                            APPROVED DRAFT




                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                IEEE P11073-10201/D2.1.109
                                                                   September October 2018




 1   IEEE P11073-10201™/D2.1.109
 2   Draft Standard for Health informatics
 3   — Point-of-care medical device
 4   communication — Part 10201:
 5   Domain information model

 6   Sponsor

 7   IEEE 11073 Standards Committee
 8   of the
 9   IEEE Engineering in Medicine and Biology Society

10   Approved <XX MONTH 20XX>
11   IEEE-SA Standards Board
12

13   Copyright © 2018 by the Institute of Electrical and Electronics Engineers, Inc.
14   Three Park Avenue
15   New York, New York 10016-5997, USA
16   All rights reserved.
17   This document is an unapproved draft of a proposed IEEE Standard. As such, this
18   document is subject to change. USE AT YOUR OWN RISK! IEEE copyright statements
19   SHALL NOT BE REMOVED from draft or approved IEEE standards, or modified in any
20   way. Because this is an unapproved draft, this document must not be utilized for any
21   conformance/compliance purposes. Permission is hereby granted for officers from each
22   IEEE Standards Working Group or Committee to reproduce the draft document developed
23   by that Working Group for purposes of international standardization consideration. IEEE
24   Standards Department must be informed of the submission for consideration prior to any
25   reproduction for international standardization consideration (stds.ipr@ieee.org). Prior to
26   adoption of this document, in whole or in part, by another standards development
27   organization, permission must first be obtained from the IEEE Standards Department
28   (stds.ipr@ieee.org). When requesting permission, IEEE Standards Department will require
29   a copy of the standard development organization's document highlighting the use of IEEE
                          APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                  IEEE P11073-10201/D2.1.102r2.1.9
                                                                          September October 2018

1   content. Other entities seeking permission to reproduce this document, in whole or in part,
2   must also obtain permission from the IEEE Standards Department.
3   IEEE Standards Activities Department
4   445 Hoes Lane
5   Piscataway, NJ 08854, USA
6




                                                       2
                                    Copyright © 2018 IEEE. All rights reserved.
                         This is an unapproved IEEE Standards Draft, subject to change.
                                         APPROVED DRAFT




                                                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                                         IEEE P11073-10201/D2.1.102r2.1.9
                                                                                                 September October 2018

 1   Abstract: Within the context of the ISO/IEEE 11073 family of standards for point-
 2   of-care (POC) medical device communication (MDC), this standard provides an
 3   abstract, object-oriented domain information model that specifies the structure of
 4   exchanged information, as well as the events and services that are supported by
 5   each type of object. All data structure elements are specified using abstract syntax
 6   (ASN.1) and may be applied to many different implementation technologies,
 7   transfer syntaxes, and application service models. Core subjects include medical,
 8   alert, system, patient, control, archival, communication, and extended services.
 9   Model extensibility is supported, and a conformance model and statement
10   template is provided.
11
12   Keywords: abstract syntax, alarm, alert, ASN.1, information model, medical
13   device communications, medical information bus, MIB, point-of-care, POC, object-
14   oriented, patient, remote control
15

     x
16
17




     The Institute of Electrical and Electronics Engineers, Inc.
     3 Park Avenue, New York, NY 10016-5997, USA

     Copyright © 20XX by The Institute of Electrical and Electronics Engineers, Inc.
     All rights reserved. Published <XX MONTH 20XX>. Printed in the United States of America.

     IEEE is a registered trademark in the U.S. Patent & Trademark Office, owned by The Institute of Electrical and Electronics
     Engineers, Incorporated.

     PDF:     ISBN 978-0-XXXX-XXXX-X           STDXXXXX
     Print:   ISBN 978-0-XXXX-XXXX-X           STDPDXXXXX

     IEEE prohibits discrimination, harassment and bullying. For more information, visit http://www.ieee.org/web/aboutus/whatis/policies/p9-26.html.
     No part of this publication may be reproduced in any form, in an electronic retrieval system or otherwise, without the prior written permission
     of the publisher.

                                                                     3
                                                  Copyright © 2018 IEEE. All rights reserved.
                                       This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                   IEEE P11073-10201/D2.1.102r2.1.9
                                                                           September October 2018

 1   Important Notices and Disclaimers Concerning IEEE Standards Documents

 2   IEEE documents are made available for use subject to important notices and legal
 3   disclaimers. These notices and disclaimers, or a reference to this page, appear in all
 4   standards and may be found under the heading “Important Notices and Disclaimers
 5   Concerning IEEE Standards Documents.” They can also be obtained on request from IEEE
 6   or viewed at http://standards.ieee.org/IPR/disclaimers.html.

 7   Notice and Disclaimer of Liability Concerning the Use of IEEE Standards
 8   Documents

 9   IEEE Standards documents (standards, recommended practices, and guides), both full-use
10   and trial-use, are developed within IEEE Societies and the Standards Coordinating
11   Committees of the IEEE Standards Association (“IEEE-SA”) Standards Board. IEEE (“the
12   Institute”) develops its standards through a consensus development process, approved by
13   the American National Standards Institute (“ANSI”), which brings together volunteers
14   representing varied viewpoints and interests to achieve the final product. IEEE Standards
15   are documents developed through scientific, academic, and industry-based technical
16   working groups. Volunteers in IEEE working groups are not necessarily members of the
17   Institute and participate without compensation from IEEE. While IEEE administers the
18   process and establishes rules to promote fairness in the consensus development process,
19   IEEE does not independently evaluate, test, or verify the accuracy of any of the information
20   or the soundness of any judgments contained in its standards.

21   IEEE Standards do not guarantee or ensure safety, security, health, or environmental
22   protection, or ensure against interference with or from other devices or networks.
23   Implementers and users of IEEE Standards documents are responsible for determining and
24   complying with all appropriate safety, security, environmental, health, and interference
25   protection practices and all applicable laws and regulations.

26   IEEE does not warrant or represent the accuracy or content of the material contained in its
27   standards, and expressly disclaims all warranties (express, implied and statutory) not
28   included in this or any other document relating to the standard, including, but not limited
29   to, the warranties of: merchantability; fitness for a particular purpose; non-infringement;
30   and quality, accuracy, effectiveness, currency, or completeness of material. In addition,
31   IEEE disclaims any and all conditions relating to: results; and workmanlike effort. IEEE
32   standards documents are supplied “AS IS” and “WITH ALL FAULTS.”

33   Use of an IEEE standard is wholly voluntary. The existence of an IEEE standard does not
34   imply that there are no other ways to produce, test, measure, purchase, market, or provide
35   other goods and services related to the scope of the IEEE standard. Furthermore, the
36   viewpoint expressed at the time a standard is approved and issued is subject to change
37   brought about through developments in the state of the art and comments received from
38   users of the standard.

39   In publishing and making its standards available, IEEE is not suggesting or rendering
40   professional or other services for, or on behalf of, any person or entity nor is IEEE
41   undertaking to perform any duty owed by any other person or entity to another. Any person
                                                        4
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                    IEEE P11073-10201/D2.1.102r2.1.9
                                                                            September October 2018

 1   utilizing any IEEE Standards document, should rely upon his or her own independent
 2   judgment in the exercise of reasonable care in any given circumstances or, as appropriate,
 3   seek the advice of a competent professional in determining the appropriateness of a given
 4   IEEE standard.

 5   IN NO EVENT SHALL IEEE BE LIABLE FOR ANY DIRECT, INDIRECT,
 6   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 7   (INCLUDING, BUT NOT LIMITED TO: PROCUREMENT OF SUBSTITUTE GOODS
 8   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 9   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
10   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
11   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
12   PUBLICATION, USE OF, OR RELIANCE UPON ANY STANDARD, EVEN IF
13   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE AND REGARDLESS OF
14   WHETHER SUCH DAMAGE WAS FORESEEABLE.

15   Translations

16   The IEEE consensus development process involves the review of documents in English
17   only. In the event that an IEEE standard is translated, only the English version published
18   by IEEE should be considered the approved IEEE standard.

19   Official statements

20   A statement, written or oral, that is not processed in accordance with the IEEE-SA
21   Standards Board Operations Manual shall not be considered or inferred to be the official
22   position of IEEE or any of its committees and shall not be considered to be, or be relied
23   upon as, a formal position of IEEE. At lectures, symposia, seminars, or educational courses,
24   an individual presenting information on IEEE standards shall make it clear that his or her
25   views should be considered the personal views of that individual rather than the formal
26   position of IEEE.

27   Comments on standards

28   Comments for revision of IEEE Standards documents are welcome from any interested
29   party, regardless of membership affiliation with IEEE. However, IEEE does not provide
30   consulting information or advice pertaining to IEEE Standards documents. Suggestions for
31   changes in documents should be in the form of a proposed change of text, together with
32   appropriate supporting comments. Since IEEE standards represent a consensus of
33   concerned interests, it is important that any responses to comments and questions also
34   receive the concurrence of a balance of interests. For this reason, IEEE and the members
35   of its societies and Standards Coordinating Committees are not able to provide an instant
36   response to comments or questions except in those cases where the matter has previously
37   been addressed. For the same reason, IEEE does not respond to interpretation requests.
38   Any person who would like to participate in revisions to an IEEE standard is welcome to
39   join the relevant IEEE working group.

40   Comments on standards should be submitted to the following address:
                                                         5
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                    IEEE P11073-10201/D2.1.102r2.1.9
                                                                            September October 2018

 1                  Secretary, IEEE-SA Standards Board
 2                  445 Hoes Lane
 3                  Piscataway, NJ 08854 USA

 4   Laws and regulations

 5   Users of IEEE Standards documents should consult all applicable laws and regulations.
 6   Compliance with the provisions of any IEEE Standards document does not imply
 7   compliance to any applicable regulatory requirements. Implementers of the standard are
 8   responsible for observing or referring to the applicable regulatory requirements. IEEE does
 9   not, by the publication of its standards, intend to urge action that is not in compliance with
10   applicable laws, and these documents may not be construed as doing so.

11   Copyrights

12   IEEE draft and approved standards are copyrighted by IEEE under U.S. and international
13   copyright laws. They are made available by IEEE and are adopted for a wide variety of
14   both public and private uses. These include both use, by reference, in laws and regulations,
15   and use in private self-regulation, standardization, and the promotion of engineering
16   practices and methods. By making these documents available for use and adoption by
17   public authorities and private users, IEEE does not waive any rights in copyright to the
18   documents.

19   Photocopies

20   Subject to payment of the appropriate fee, IEEE will grant users a limited, non-exclusive
21   license to photocopy portions of any individual standard for company or organizational
22   internal use or individual, non-commercial use only. To arrange for payment of licensing
23   fees, please contact Copyright Clearance Center, Customer Service, 222 Rosewood Drive,
24   Danvers, MA 01923 USA; +1 978 750 8400. Permission to photocopy portions of any
25   individual standard for educational classroom use can also be obtained through the
26   Copyright Clearance Center.

27   Updating of IEEE Standards documents

28   Users of IEEE Standards documents should be aware that these documents may be
29   superseded at any time by the issuance of new editions or may be amended from time to
30   time through the issuance of amendments, corrigenda, or errata. A current IEEE document
31   at any point in time consists of the current edition of the document together with any
32   amendments, corrigenda, or errata then in effect.

33   Every IEEE standard is subjected to review at least every ten years. When a document is
34   more than ten years old and has not undergone a revision process, it is reasonable to
35   conclude that its contents, although still of some value, do not wholly reflect the present
36   state of the art. Users are cautioned to check to determine that they have the latest edition
37   of any IEEE standard.

38   In order to determine whether a given document is the current edition and whether it has
39   been amended through the issuance of amendments, corrigenda, or errata, visit IEEE
                                                         6
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                             APPROVED DRAFT




                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                     IEEE P11073-10201/D2.1.102r2.1.9
                                                                             September October 2018

 1   Xplore at http://ieeexplore.ieee.org/ or contact IEEE at the address listed previously. For
 2   more information about the IEEE-SA or IEEE’s standards development process, visit the
 3   IEEE-SA Website at http://standards.ieee.org.

 4   Errata

 5   Errata, if any, for all IEEE standards can be accessed on the IEEE-SA Website at the
 6   following URL: http://standards.ieee.org/findstds/errata/index.html. Users are encouraged
 7   to check this URL for errata periodically.

 8   Patents

 9   Attention is called to the possibility that implementation of this standard may require use
10   of subject matter covered by patent rights. By publication of this standard, no position is
11   taken by the IEEE with respect to the existence or validity of any patent rights in connection
12   therewith. If a patent holder or patent applicant has filed a statement of assurance via an
13   Accepted Letter of Assurance, then the statement is listed on the IEEE-SA Website at
14   http://standards.ieee.org/about/sasb/patcom/patents.html. Letters of Assurance may
15   indicate whether the Submitter is willing or unwilling to grant licenses under patent rights
16   without compensation or under reasonable rates, with reasonable terms and conditions that
17   are demonstrably free of any unfair discrimination to applicants desiring to obtain such
18   licenses.

19   Essential Patent Claims may exist for which a Letter of Assurance has not been received.
20   The IEEE is not responsible for identifying Essential Patent Claims for which a license
21   may be required, for conducting inquiries into the legal validity or scope of Patents Claims,
22   or determining whether any licensing terms or conditions provided in connection with
23   submission of a Letter of Assurance, if any, or in any licensing agreements are reasonable
24   or non-discriminatory. Users of this standard are expressly advised that determination of
25   the validity of any patent rights, and the risk of infringement of such rights, is entirely their
26   own responsibility. Further information may be obtained from the IEEE Standards
27   Association.

28




                                                          7
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                             IEEE P11073-10201/D2.1.102r2.1.9
                                                                                     September October 2018

 1       Participants

 2       At the time this draft standard was submitted to the IEEE-SA Standards Board for approval,
 3       the Point-of-Care Devices Working Group had the following membership:

 4                                                   John Rhoads, Chair
 5                                                      , Vice Chair
 6
     7                                        8
 9
10
11       The following members of the individual balloting committee voted on this standard.
12       Balloters may have voted for approval, disapproval, or abstention.
13
14       [To be supplied by IEEE]
15
16
17       When the IEEE-SA Standards Board approved this standard on <Date Approved>, it had
18       the following membership:

19                                                <Name>, Chair
20                                              <Name>, Vice Chair
21                                              <Name>, Past Chair
22                                       Konstantinos Karachalios, Secretary
23
24       [To be supplied by IEEE]
25
26




                                                                  8
                                               Copyright © 2018 IEEE. All rights reserved.
                                    This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                        IEEE P11073-10201/D2.1.102r2.1.9
                                                                                September October 2018

 1   Introduction

 2   This introduction is not part of IEEE P11073-10201/D2.1.8, Draft Standard for Health informatics — Point-of-care
 3   medical device communication — Part 10201: Domain information model.

 4   ISO/IEEE 11073 standards enable communication between different medical devices and
 5   between medical devices and other IT systems for information and for command and
 6   control. The primary goals are to:

 7      Provide real-time plug-and-play interoperability for patient-connected medical
 8       devices
 9      Facilitate the efficient exchange of patient related data and medical device related
10       data, acquired at the point-of-care, in all health care environments

11   “Real-time” means that data from multiple devices can be retrieved, time correlated, and
12   displayed or processed in fractions of a second.

13   “Plug-and-play” means that when a device or system is connected to another device or
14   system, detection, configuration, and the initiation of communication all occur
15   automatically andwithout any other human interaction.

16   “Efficient exchange of medical device data” means that information that is captured at the
17   point-of-care (e.g., patient vital signs data) can be archived, retrieved, and processed by
18   many different types of applications without extensive software and equipment support,
19   and without needless loss of information. This standard is especially targeted at acute and
20   continuing care devices, such as patient monitors, ventilators, infusion pumps, ECG
21   devices, etc. It is a member of a family of standards that can be layered together to provide
22   connectivity optimized for the specific devices being interfaced.

23
24




                                                             9
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                      APPROVED DRAFT




                                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                                      IEEE P11073-10201/D2.1.102r2.1.9
                                                                                              September October 2018

 1   Contents

 2   1. Scope ............................................................................................................................. 11

 3   2. Normative references .................................................................................................... 11

 4   3. Definitions, acronyms, and abbreviations ..................................................................... 12
 5      3.1 Definitions .............................................................................................................. 12
 6      3.2 Abbreviations and acronyms .................................................................................. 16

 7   4. General requirements .................................................................................................... 18

 8   5. DIM ............................................................................................................................... 19
 9      5.1 General .................................................................................................................... 19
10      5.2 Package diagram–overview .................................................................................... 22
11      5.3 Model for the Medical Package .............................................................................. 24
12      5.4 Model for the Alert Package ................................................................................... 28
13      5.5 Model for the System Package ............................................................................... 31
14      5.6 Model for the Control Package ............................................................................... 33
15      5.7 Model for the ExtendedServices Package .............................................................. 37
16      5.8 Model for the Communication Package ................................................................. 41
17      5.9 Model for the Archival Package ............................................................................. 43
18      5.10 Model for the Patient Package .............................................................................. 45
19      5.11 DIM—dynamic model .......................................................................................... 46

20   6. DIM class definitions .................................................................................................... 51
21      6.1 Overview ................................................................................................................. 51
22      6.2 Top class ................................................................................................................. 61
23      6.3 Medical package ..................................................................................................... 62
24      6.4 Alert package .......................................................................................................... 99
25      6.5 System package..................................................................................................... 105
26      6.6 Control package .................................................................................................... 125
27      6.7 ExtendedServices package .................................................................................... 139
28      6.8 Communication package....................................................................................... 152
29      6.9 Archival package .................................................................................................. 159
30      6.10 Patient package ................................................................................................... 166

31   7. Service model for communicating systems ................................................................ 170
32      7.1 General .................................................................................................................. 170
33      7.2 Communicating systems ....................................................................................... 170
34      7.3 General service model overview........................................................................... 170
35      7.4 General object management services definition ................................................... 173

36   8. MDIB nomenclature ................................................................................................... 180

37   9. Conformance model .................................................................................................... 180
38      9.1 Applicability ......................................................................................................... 180
39      9.2 Conformance specification ................................................................................... 181
                                                                   10
                                                Copyright © 2018 IEEE. All rights reserved.
                                     This is an unapproved IEEE Standards Draft, subject to change.
                                       APPROVED DRAFT




                                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                                                                      IEEE P11073-10201/D2.1.102r2.1.9
                                                                                              September October 2018

 1        9.3 ICSs ....................................................................................................................... 182

 2   Annex A (informative) Bibliography.............................................................................. 188
 3

 4




 5   Draft Standard for Health informatics
 6   — Point-of-care medical device
 7   communication — Part 10201:
 8   Domain information model

 9   1. Scope

10   The scope of this project is to define a general object-oriented information model that may
11   be used to structure information and identify services used in point-of-care medical device
12   communications. The scope is primarily focused on acute care medical devices and the
13   communication of patient vital signs information.

14   2. Normative references

15   The following referenced documents are indispensable for the application of this document
16   (i.e., they must be understood and used, so each referenced document is cited in text and
17   its relationship to this document is explained). For dated references, only the edition cited
18   applies. For undated references, the latest edition of the referenced document (including
19   any amendments or corrigenda) applies.

20

21   .1




     1
      IEEE publications are available from the Institute of Electrical and Electronics Engineers, 445 Hoes Lane, Piscataway, NJ 08854,
     USA (http://www.standards.ieee.org/).

                                                                    11
                                                 Copyright © 2018 IEEE. All rights reserved.
                                      This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1    ISO/IEC 8824-1, Information technology — Abstract Syntax Notation One (ASN.1) —
2    Part 1: Specification of basic notation. 2

3    ISO/IEEE 11073-10101, Health informatics                                 —      Point-of-care          medical       device
4    communication — Part 10101: Nomenclature.

5    ISO/IEEE 11073-20101, Health informatics — Point-of-care                                               medical       device
6    communication — Part 20101: Application profiles – Base standard.

 7   OMG® Unified Modeling Language® (OMG UML®) 2.5.1 3

8    3. Definitions, acronyms, and abbreviations

9    3.1 Definitions

10   For the purposes of this document, the following terms and definitions apply. The IEEE
11   Standards Dictionary: Glossary of Terms & Definitions should be referenced for terms not
12   defined in this clause. 4

13   agent: Device that provides data in a manager-agent communicating system.

14   alarm: Signal that indicates abnormal events occurring to the patient or the device system.

15   alert: Synonym for the combination of patient-related physiological alarms, technical
16   alarms, and equipment-user advisory signals.

17   alert condition: The active (true) state of a physiologic alarm (primarily related to the
18   patient), technical alarm (primarily related to a device), or an advisory that is typically
19   reported to clinicians, physicians, or other healthcare staff, for responding to patient needs
20   or related workflows.

21   alert monitor: Object representing the output of an alert system that considers multiple
22   alert conditions in a scope defined by objects that are contained by a single MDS object.
23   An alert monitor is able to report individual, concurrent alert conditions as well as the
24   overall system alert condition.

25   alert status: Object representing the output of an alert system that considers multiple alert
26   conditions in a scope defined by objects that are contained by either a single VMD object
27   or a single MDS object. An alert status is able to report concurrent alert conditions.

28   archival: Relating to the storage of data over a prolonged period.


     2
       ISO/IEC documents can be obtained from the ISO office, 1 rue de Varembé, Case Postale 56, CH-1211, Genève 20, Switzerland/
     Suisse (http://www.iso.ch/) and from the IEC office, 3 rue de Varembé, Case Postale 131, CH-1211, Genève 20, Switzerland/Suisse
     (http://www.iec.ch/). ISO/IEC publications are also available in the United States from the Sales Department, American National
     Standards Institute, 25 West 43rd Street, 4th Floor, New York, NY 10036, USA (http://www.ansi.org/).
     3
       The OMG UML standard can be freely downloaded at https://www.omg.org/spec/UML/
     4
       The IEEE Standards Dictionary: Glossary of Terms & Definitions is available at http://shop.ieee.org/.

                                                                 12
                                              Copyright © 2018 IEEE. All rights reserved.
                                   This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   association control service element (ACSE): Method used to establish logical
 2   connections between medical device systems (MDSs).

 3   attribute: The definition of a property of an object.

 4   channel: An object that groups together physiological measurement data and any derived
 5   data that have a contextual relationship with each other..

 6   class: A model which describes the properties and behaviors of a type of entity found
 7   within a problem domain.

 8   class diagram: Diagram showing connections between classes in a system.

 9   communication controller: Part of a medical device system (MDS) responsible for
10   communications.

11   communication party: Actor of the problem domain that participates in the
12   communication in that domain.

13   communication role: Role of a party in a communication situation defining the party’s
14   behavior in the communication. Associated with a communication role is a set of services
15   that the party provides to other parties.

16   data agent: As a medical device, a patient data acquisition system that provides the
17   acquired data for other devices.

18   data format: Arrangement of data in a file or stream.

19   data logger: A device that is functioning in its capacity as a data storage and archival
20   system.
21   NOTE—There may be several different types of data loggers; clinical, technical, forensic, alarm condition, user logs

22
23   data structure: A data organization format that is implemented by an application.

24   dictionary: Description of the contents of the medical data information base (MDIB)
25   containing vital signs information, device information, demographics, and other elements
26   of the MDIB.

27   discrete parameter: Measured, calculated, or manually entered value that can be
28   expressed as a single numeric or textual value.

29       Example: a non-invasive systolic blood pressure (measured), cardiac index
30       (calculated), gender male or female

31   domain information model (DIM): The model describing common concepts and
32   relationships for a problem domain.


                                                               13
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   event: A change in device status that is communicated by a notification reporting service.

 2   event report: Service [provided by the common medical device information service
 3   element (CMDISE)] to report an event relating to a managed object instance.

 4   framework: A structure of processes and specifications designed to support the
 5   accomplishment of a specific task.

 6   graphic parameter: Parameter that requires multiple regularly sampled data points in
 7   order to be expressed properly.

 8      Example: a single ECG waveform snippet

 9   host system: Term used as an abstraction of a medical system to which measurement
10   devices are attached.information service element: Instances in the medical data
11   information base (MDIB).

12   instance: The realization of an abstract concept or specification, e.g., class instance,
13   application instance, information service element instance, virtual medical device (VMD)
14   instance, operating instance.

15   instance method: A procedure or process that defines a behavior exhibited by the instances
16   of a class (i.e. objects). Instance methods provide the interface by which the properties of
17   an object may be accessed or modified.

18   intensive care unit (ICU): The unit within a medical facility in which patients are
19   managed using multiple modes of monitoring and therapy.

20   interchange format: The representation of the data elements and the structure of the
21   message containing those data elements while in transfer between systems. The
22   interchange format consists of a data set of construction elements and a syntax. The
23   representation is technology specific.

24   interoperability:The ability of two or more devices or systems to exchange information
25   in a format that is usable by the receivers of the information.

26   latency: In a communications scenario, the time delay between sending a signal from one
27   device and receiving it by another device.

28   lower layers: Layer 1 to Layer 4 of the International Organization for Standardization
29   (ISO)/open systems interconnection (OSI) reference model. These layers cover
30   mechanical, electrical, and general communication protocol specifications.

31   manager: Device that receives data in a manager-agent communicating system.

32   manager-agent model: Communication model where one device (i.e., agent) provides
33   data and another device (i.e., manager) receives data.


                                                        14
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   medical data information base (MDIB): The concept of an object-oriented database
 2   storing (at least) vital signs information.

 3   medical device: A device, apparatus, or system used for patient monitoring, treatment, or
 4   therapy, which does not normally enter metabolic pathways. For the purposes of this
 5   standard, the scope of medical devices is further limited to patient-connected medical
 6   devices that provide support for electronic communications.

 7   medical device system (MDS): Abstraction for system comprising one or more medical
 8   functions. In the context of this standard, the term is specifically used as an object-oriented
 9   abstraction of a device that provides medical information in the form of instances of the
10   classes that are defined in this standard.

11   monitor: A medical device designed to acquire, display, record, and/or analyze patient
12   data and to alert caregivers of events needing their attention.

13   object: A particular instance of a class. An object represents a physical or logical
14   occurrence of an actual medical device or medical device component.

15   object instance: synonym of object

16

17   object-oriented analysis: Method of analysis where the problem domain is modelled in
18   the form of classes and the relationships between those classes.

19   open system: A set of protocols allowing computers of different origins to be linked
20   together.

21   operation: A function or transformation that may be applied to or by objects (sometimes
22   also called service).

23   problem domain: The field of health care under consideration in a modeling process.

24   protocol: A standard set of rules describing the transfer of data between devices. It
25   specifies the format of the data and specifies the signals to start, control, and end the
26   transfer.

27   real time: At the time when an event or process occurs.

28   scanner: An observer and “summarizer” of attribute values.

29   scenario: A formal description of a class of business activities including the semantics of
30   business agreements, conventions, and information content.

31   service: A specific behavior that a communication party in a specific role is responsible
32   for exhibiting.


                                                         15
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   syntax (i.e., of an interchange format): The rules for combining the construction elements
 2   of the interchange format.

 3   system: The demarcated part of the perceivable universe, existing in time and space, that
 4   may be regarded as a set of elements and relationships between these elements.

 5   timestamp: An attribute or field in data that denotes the time of data generation.

 6   top class: The ultimate base class for most of the classes belonging to the domain
 7   information model defined in this standard.

 8   upper layers: Layer 5 to Layer 7 of the International Organization for Standardization
 9   (ISO)/open systems interconnection (OSI) reference model. These layers cover
10   application, presentation, and session specifications and functionalities.

11   virtual medical device (VMD): An abstract representation of a medical-related subsystem
12   of a medical device system (MDS).

13   virtual medical object (VMO): An abstract representation of an object in the Medical
14   Package of the domain information model (DIM).

15   vital sign: Clinical information, relating to one or more patients, that is measured by or
16   derived from apparatus connected to the patient or otherwise gathered from the patient.

17   waveform: Graphic data, typically vital signs data values varying with respect to time,
18   usually presented to the clinician in a graphical form.

19   3.2 Abbreviations and acronyms

20   ACSE           association control service element
21   ASN.1          Abstract Syntax Notation One
22   BCC            bedside communication controller
23   BER            basic encoding rules
24   BMP            basic multilingual plane
25   CMDIP          Common Medical Device Information Protocol
26   CMDISE         common medical device information service element
27   CMIP           Common Management Information Protocol
28   CMISE          common management information service element
29   DCC            device communication controller
30   DICOM          digital imaging and communications in medicine
31   DIM            domain information model
32   ECG            electrocardiogram

                                                        16
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                          APPROVED DRAFT




                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   EEG          electroencephalogram
 2   EBWW         eyeball and wristwatch
 3   FSM          finite state machine
 4   GMDN         Global Medical Device Nomenclature
 5   GMT          Greenwich mean time
 6   IANA         Internet Assigned Numbers Authority
 7   ICS          implementation conformance statement
 8   ICU          intensive care unit
 9   ID           identifier or identification
10   LAN          local area network
11   LSB          least significant bit
12   MDIB         medical data information base
13   MDS          medical device system
14   MEDICOM      medical imaging communication
15   MIB or Mib   management information base
16   MOC          managed object class
17   OID          object identifier
18   OR           operating room
19   OSI          open systems interconnection
20   PC           personal computer
21   PDU          protocol data unit
22   PM           persistent metric
23   SCADA        supervisory control and data acquisition
24   SCP ECG       Standard        Communications             Protocol         [for       computer-assisted]
25   Electrocardiography
26   SNMP         Simple Network Management Protocol
27   SNTP         Simple Network Time Protocol
28   UDI          Unique Device Identifiaction
29   UML          unified modeling language
30   UTC          coordinated universal time
31   VMD          virtual medical device
32   VMO          virtual medical object
33   VMS          virtual medical system

                                                       17
                                    Copyright © 2018 IEEE. All rights reserved.
                         This is an unapproved IEEE Standards Draft, subject to change.
                                        APPROVED DRAFT




                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                          IEEE P11073-10201/D2.1.109, September October 2018



1    4. General requirements

2    The ISO/IEEE 11073 family of standards is intended to enable medical devices to
3    interconnect and inter-operate with other medical devices and with computerized
4    healthcare information systems in a manner suitable for the clinical environment.

5    The ISO/IEEE 11073 family is based on an object-oriented systems management
6    paradigm. Data (e.g., measurement, state) is modeled in the form of classes, instances of
7    which can be accessed and manipulated using an object access service protocol.

8    The domain information model (DIM) defines the overall set of classes and their attributes,
9    methods, and access functions needed for medical device communication.

10   The top-level user requirements are defined in IEEE 11073-20101, 5 which also defines the
11   user scenarios covered by the ISO/IEEE 11073 family of standards.

12   As a part of the ISO/IEEE 11073 family of standards, the primary requirements for the
13   DIM are as follows:

14         Define an object-oriented model representing the relevant information (i.e., data)
15          and functions (e.g., device controls) encountered in the problem domain of medical
16          device communication, including measurement information, contextual data, device
17          control methods, and other relevant aspects.
18         Provide detailed specification of the classes defined in the object-oriented model,
19          including their attributes and methods.
20         Define a service model for communicating medical devices that provides access to
21          the object instances, their attributes, and their methods.
22         Use the nomenclature defined in ISO/IEEE 11073-10101 to identify all data
23          elements in the model.
24         Be usable for the definition of data communication protocols as well as for the
25          definition of file storage formats.
26         Define conformance requirements.
27         Be extensible and expandable to incorporate future needs in the defined modeling
28          framework.




     5
         Information on references can be found in Clause 2.

                                                                     18
                                                  Copyright © 2018 IEEE. All rights reserved.
                                       This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   5. DIM

 2   5.1 General

 3   5.1.1 Modeling concept

 4   The DIM is an object-oriented model that consists of classifiers, their attributes, and their
 5   methods, which are abstractions of real-world entities in the domain of (vital signs
 6   information communicating) medical devices.

 7   The information model and the service model for communicating systems defined and used
 8   in this standard are conceptually based on the International Organization for
 9   Standardization (ISO)/open systems interconnection (OSI) system management model
10   (ISO/IEC 7498, parts 1-4). Classes defined in the information model are considered to
11   model managed (here, medical) objects. For the most part, the objects are directly available
12   to management (i.e., access) services provided by the common medical device information
13   service element (CMDISE) as defined in this standard.

14   For communicating systems, the set of object instances available on any medical device
15   that complies with the definitions of this standard forms the medical data information base
16   (MDIB). The MDIB is a structured collection of managed medical objects representing the
17   vital signs information provided by a particular medical device. Attribute data types,
18   hierarchies, and behavior of objects in the MDIB are defined in this standard.

19   The majority of classes defined here represent generalized vital signs data and support
20   information. Specialization of these classes is achieved by defining appropriate attributes.
21   Class hierarchies and associations between classes are used to express device configuration
22   and device capabilities.

23      Example: A generalized object is instantiated to represent vital signs in the form of a
24      real-time waveform. A set of attributes is used to specify a particular waveform as an
25      invasive arterial blood pressure. The position in the hierarchy of all objects defines the
26      subsystem that derives the waveform.

27   Figure 1 shows the relation between managed medical objects, MDIB, CMDISE,
28   application processes, and communication systems.




                                                         19
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                               —MDIB in communicating systems
 3

 4   In the case of communicating systems, managed medical objects are accessible only
 5   through services provided by CMDISE. The way that these objects are stored in the MDIB
 6   in any specific system and the way applications and the CMDISE access these objects are
 7   implementation issues and as such not normative.

 8   In the case of a vital signs archived data format that complies with the definitions in this
 9   standard, object instances are stored, together with their dynamic attribute value changes,
10   over a certain time period on archival media. Attribute data types and hierarchies of objects
11   in the archival data format are again defined in this standard.

12   Figure 2 shows the relationship between managed medical objects, the data archive, and
13   archive access services.

14   In the case of the archived data format, the way managed medical objects are stored on a
15   medium is the subject of standardization. The access services are a local implementation
16   issue and as such are not intended to be governed by this standard.




                                                         20
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018




1
2                      —Managed medical objects in a vital signs archive
3

 4   5.1.2 Scope of the DIM

 5   5.1.2.1 General

 6   Vital signs information classes that are defined in this standard encompass digitized
 7   biosignals that are derived by medical measurement devices used, for example, in
 8   anaesthesia, surgery, infusion therapy, intensive care, and obstetrical care.

 9   Biosignal data within the scope of this standard include direct and derived, quantitative and
10   qualitative measurements, technical and medical alarms, and control settings. Patient
11   information relevant for the interpretation of these signals is also defined in the DIM.
12   5.1.2.2 Communicating systems

13   Communicating systems within the scope of this standard include physiological meters and
14   analysers, especially systems providing real-time or continuous monitoring. Data
15   processing capabilities are required for these systems.

16   Information management objects that provide capabilities and concepts for cost-effective
17   communication (specifically data summarization objects) and objects necessary to enable
18   real-time communication are also within the scope of the information model in this
19   standard.

20   Interoperability issues, specifically lower communication layers, temporal synchronization
21   between multiple devices, etc., are outside the scope of this standard.

22   5.1.2.3 Archived vital signs

23   Context information classes that describe the data acquisition process and organize a vital
24   signs archive are within the scope of this standard.




                                                         21
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   5.1.3 Approach

 2   For the object-oriented modeling, the Unified Modeling Language (UML) is used. The
 3   domain is first subdivided into different packages, and this subdivision permits the
 4   organization of the model into smaller packages. Each package is then defined in the form
 5   of UML class diagrams. Classes are briefly introduced, and their relations and hierarchies
 6   are defined in the class diagrams. No single diagram shows all of the classes and
 7   relationships defined in the DIM. The diagrams must be considered as a set that, together,
 8   define the structure of the DIM.

 9   For the class definitions, a textual approach is followed. Attributes are defined in attribute
10   definition tables. Attribute data types are defined using Abstract Syntax Notation One
11   (ASN.1) as defined by ISO/IEC 8824, parts 1-2. The behavior of and notifications
12   generated by objects are also defined in definition tables. These definitions directly relate
13   to the service model specified in Clause 7.

14   5.1.4 Extension of the model

15   It is expected that over time extensions of the model may be needed to account for new
16   developments in the area of medical devices. Also, in special implementations, there may
17   be a requirement to model data that are specific for a particular device or a particular
18   application (and that are, therefore, not covered by the general model).

19   In some cases, it may be possible to use the concept of external object relations. Most
20   classes defined in this standard provide an attribute group (e.g., the Relationship Attribute
21   Group) that can be used to supply information about related objects that are not defined in
22   the DIM. Supplying such information can be done by specifying a relation to an external
23   object and assigning attributes to this relation (see6.1.3.20).

24   In other cases, it may be necessary to define completely new classes or to add new
25   attributes, new methods, or new events to already defined classes. These extensions are
26   considered private or manufacturer-specific extensions. Dealing with these extensions is
27   primarily a matter of an interoperability standard that is based on this standard on vital
28   signs representation.

29   In general, in an interoperability format, classes, attributes, and methods are identified by
30   nomenclature codes. IEEE/ISO 11073 part 10101 defines nomenclature that should be
31   preferred when implementing an 11073 compliant device. The nomenclature code space
32   (i.e., code values) leaves room for private extensions. As a general rule, an interoperability
33   standard that is based on this DIM should be able to deal with private or manufacturer-
34   specific extensions by ignoring classes, attributes, etc., with unknown identifiers (i.e.,
35   nomenclature codes).

36   5.2 Package diagram–overview

37   The package diagram organizes the problem domain into separate groups. It shows key
38   classes inside each package and the relationships between them.

                                                         22
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   The package diagram depicted in 0 contains only a small subset of all classifiers defined in
 2   the DIM. Not all relations are shown between the shown classes. Refer to the detailed UML
 3   class diagrams for each package for more information.




 4
 5                                        —Packages of the DIM
 6

 7   The Top class is an abstract class and at the same time the ultimate base for the majority
 8   of classes defined in the model. The only classes for which the Top class does not serve as
 9   a base class are the DeviceInterface class and the MibElement classes. Figure 4 shows the
10   Top class and all of the class that are immediate subclasses of class Top. Many of the
11   subclasses shown are themselves subclassed. This secondary subclassing is not shown in
12   Figure 4.

13




                                                        23
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                                       —Top class inheritance
 3

 4

 5   The more detailed UML class diagrams for these packages are contained in 5.3 through
 6   5.10. These diagrams show relationships between classes defined in the package as well as
 7   key relationships between classes defined in the package and classes defined in other
 8   packages. Some relationships appear in one diagram and are absent in other diagrams
 9   where the two associated classes are shown. The inclusion of a relationship in any UML
10   class diagram indicates that it is part of the complete UML model.

11   The numbers in the packages refer to the corresponding subclauses in this clause about
12   models and in Clause 6 about the class definitions.

13

14   5.3 Model for the Medical Package

15   5.3.1 General

16   The Medical Package deals with the derivation and representation of biosignals and
17   contextual information that is important for the interpretation of measurements.

18   Figure 5 shows the UML class diagram for the Medical Package.

19
20

21




                                                        24
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                                         APPROVED DRAFT




                                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                           IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                                                      —Medical Package model
 3
 4   NOTE—Instances of any class that are modeled with a containment association may be contained by exactly one instance
 5   of a container class. 6

 6   The Medical Package model contains the classes described in 5.3.2 through 5.3.14.
 7   5.3.2 VMO (i.e., virtual medical object) class

 8   VMO is the abstract base class for all medical-related classes in the model. It provides
 9   consistent naming and identification across the Medical Package model.

10   The VMO class is abstract and cannot be instantiated.
11   5.3.3 VMD (i.e., virtual medical device) class

12   The VMD class models medical-related subsystems (e.g., hardware or even pure software)
13   of medical devices. The characteristics of a subsystem (e.g., modes, versions) are captured



     6
         Notes in text, tables, and figures are given for information only, and do not contain requirements needed to implement the standard.

                                                                     25
                                                  Copyright © 2018 IEEE. All rights reserved.
                                       This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   by instances of this class. At the same time, a VMD object is a container for objects
 2   representing measurement and status information.

 3        Example: A modular patient monitor provides measurement modalities in the form of
 4        plug-in modules. Each module is represented by a VMD object.

 5   5.3.4 Channel class

 6   Channel objects are used for grouping Metric objects that have a contextual relationship
 7   with each other.

 8        Example 1: A blood pressure VMD may define a Channel object to group together all
 9        metrics that deal with the blood pressure (e.g., pressure value, pressure waveform). A
10        second Channel object can be used to group together metrics that deal with heart rate.

11        Example 2: A pulse oximeter has two physical interface ports, one that provides
12        waveform data and one that provides numeric values.

13   The Channel object is mandatory for representation of Metric objects in a VMD. In some
14   cases a VMD may contain a single Channel and that Channel may be functionally
15   superfluous. This may be likely if the attribution of the Channel object consists only of the
16   mandatory type and handle attributes. In this case it is recommended that the value for the
17   type attribute be initialized using the values corresponding to the term having the reference
18   ID MDC_DEV_CHAN, which is defined in IEEE11073:10101. Usage of this term in this
19   context may serve as a signalprovide an indication that the Channel object in question may
20   not require representation in other messaging formats (e.g. IHE PCD-01).
21   5.3.5 Metric class

22   The Metric class is the abstract base class for all classes representing direct and derived,
23   quantitative and qualitative biosignal measurement, status, and context data.

24   Specializations of the Metric class are provided to deal with common representations (e.g.,
25   single values, array data, status indications) and presentations (e.g., on a display) of
26   measurement data.

27   The Metric class is abstract and cannot be instantiated.
28   5.3.6 Numeric class

29   The Numeric class models numerical measurements and status information, e.g., amplitude
30   measures, counters.

31        Example: A heart rate measurement is represented by a Numeric object.
32   NOTE— A compound Numeric object is defined as an efficient model, for example, for arterial blood pressure, which
33   usually has three associated values (i.e., systolic, diastolic, mean). The availability of multiple values in a single Numeric
34   (or other Metric) object can be indicated in a special structure attribute of the Metric class.




                                                                26
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                               IEEE P11073-10201/D2.1.109, September October 2018



 1   5.3.7 SampleArray class

 2   The SampleArray class is the abstract base class for metrics that have a graphical, curve
 3   type presentation and, therefore, have their observation values reported as arrays of data
 4   points by communicating systems.

 5   The SampleArray class is abstract and cannot be instantiated.

 6   5.3.8 RealTimeSampleArray class

 7   The RealTimeSampleArray class models a real-time continuous waveform. As such, it has
 8   special requirements in communicating systems, e.g., processing power, low latency, high
 9   bandwidth.

10      Example: An electrocardiogram (ECG) real-time wave is represented as a
11      RealTimeSampleArray object.

12   5.3.9 TimeSampleArray class

13   The TimeSampleArray class models noncontinuous waveforms (i.e., a wave snippet).
14   Within a single observation (i.e., a single array of sample values), samples are equidistant
15   in time.

16      Example: Software for ST segment analysis may use the TimeSampleArray class to
17      represent snippets of ECG real-time waves that contain only a single QRS complex.
18      Within this wave snippet, the software can locate the ST measurement points. It
19      generates a new snippet, for example, every 15 seconds.

20   5.3.10 DistributionSampleArray class

21   The DistributionSampleArray class models linear value distributions in the form of arrays
22   containing scaled sample values. Each value within an observation array represents a
23   measured value from a different point in the parameter space.                        The
24   DistributionSampleArray shall not be used for measurements distributed in time.

25      Example: An electroencephalogram (EEG) application may use a Fourier
26      transformation to derive a frequency distribution (i.e., a spectrum) from the EEG signal.
27      It then uses a DistributionSampleArray object to represent that spectrum in the MDIB.

28   5.3.11 Enumeration class

29   The Enumeration class models status information and/or annotation information.
30   Observation values may be presented in the form of normative codes (that are included in
31   the nomenclature defined in IEEE 11073 part 10101 or in some other nomenclature
32   scheme), bit string, or in the form of free text.

33      Example: An ECG rhythm qualification may be represented as an Enumeration object.
34      A ventilator may provide information about its current ventilation mode as an
35      Enumeration object.

                                                        27
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   5.3.12 ComplexMetric class

 2   In special cases, a ComplexMetric object can be used to group a larger number of strongly
 3   related Metric objects in one single container object for performance or for modeling
 4   convenience. A ComplexMetric object is a composition of Metric objects, possibly
 5   recursive.

 6      Example: A ventilator device may provide extensive breath analysis capabilities. For
 7      each breath, it calculates various numerical values (e.g., volumes, I:E ratio, timing
 8      information) as well as enumerated information (e.g., breath type classification,
 9      annotation data). For efficiency, all this information is grouped together in one
10      ComplexMetric object instance, which is updated upon each breath.

11   5.3.13 PM-Store (i.e., persistent metric) class

12   The PM-Store class provides long-term storage capabilities for metric data. A PM-Store
13   contains a variable number of PM-Segment objects that can be accessed only through the
14   PM-Store object. A PM-Store object is intended to store data of a single Metric object only.

15      Example: A device stores the numerical value of an invasive blood pressure on a disk.
16      It uses the PM-Store object to represent this persistent information. The attributes of
17      the PM-Store object describe the sampling period, the sampling algorithm, and the
18      storage format. When the label of the pressure measurement is changed (e.g., during a
19      wedge procedure), the storage process opens a new PM-Segment to store the updated
20      context data (here: the label).
21   5.3.14 PM-Segment class

22   The PM-Segment class models a continuous time period in which a metric is stored without
23   any changes of relevant metric context attributes (e.g., scales, labels).

24   PM-Segment objects are accessible only through the PM-Store object that contains them
25   (e.g., for retrieving stored data, the PM-Store object has to be accessed).

26   5.4 Model for the Alert Package

27   5.4.1 General

28   The Alert Package deals with classes that represent status information about patient
29   condition and/or technical conditions influencing the measurement or device functioning.
30   Alert-related information is often subject to normative regulations to which a device may
31   be required to comply and, therefore, requires special consideration that is outside the scope
32   of this standard.

33   In the model, all alarm-related object-oriented items are identified by the term alert. The
34   term alert is used in this standard as a synonym for the combination of patient-related
35   physiological alarms, technical alarms, and equipment user-advisory signals.


                                                         28
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   An alarm is a signal that indicates abnormal events occurring to the patient or the device
 2   system. A physiological alarm is a signal that either indicates that a monitored
 3   physiological parameter is out of specified limits or indicates an abnormal patient
 4   condition. A technical alarm is a signal that indicates a device system is either not capable
 5   of accurately monitoring the patient’s condition or no longer monitoring the patient’s
 6   condition.

 7   The model defines three different levels of alarming. These levels represent different sets
 8   of alarm processing steps, ranging from a simple context-free alarm event detection to an
 9   intelligent device system alarm process. This process facilitates the prioritization of all
10   device alarms, the latching of alarms if needed (a latched alarm does not stop when the
11   alert condition goes away), and the production of audible and visual alarm indications for
12   the user.

13   For consistent system-wide alarming, a particular medical device may provide either no
14   alarming capability or exactly one level of alarming, which is dependent on the capabilities
15   of the device. Each level is represented by one specific object class. In other words, either
16   zero or one alarm object class (e.g., only Alert or only AlertStatus or only AlertMonitor;
17   no combinations) is instantiated in the device containment tree. Multiple instances of a
18   class are allowed.
19   NOTE— Medical device alarming is subject to various national and international safety standards (e.g., IEC 60601 series,
20   ISO 9703 series). Considering requirements of current safety standards, objects in this standard define information
21   contents only. Any implementation shall, therefore, follow appropriate standards for dynamic alarming behavior.

22   Figure 6 shows the UML class diagram for the Alert Package.

23   Instances of classes in the Alert Package area shall be contained in exactly one superior
24   object.

25   The Alert Package model contains the classes described in 5.4.2 through 5.4.4.
26   5.4.2 Alert class

27   The Alert class models the status of a simple alert condition check. As such, an instance
28   represents a single alarm only. The alarm can be either a physiological alarm or a technical
29   alarm condition of a related object [e.g., MDS (i.e., medical device system), VMD, Metric].
30   In the case that neither an AlertStatus nor AlertMonitor object is used, a single Alert object
31   is needed for each alert condition that the device is able to detect.

32   Each Alert object has a reference to an object defined in the Medical Package to which the
33   alert condition relates.
34   NOTE—An Alert object is not dynamically created or deleted in cases where alert conditions start or stop. Rather, an
35   existing Alert object’s attribute values change (are updated) in these cases.

36        Example: An Alert object may represent the status of a process that checks for a limit
37        violation physiological alarm of the heart rate signal. In the case of a violation of the
38        limit, the object generates an event (i.e., attribute update) that represents this alert
39        condition in the form of attribute value changes.
                                                               29
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018




1
2                                           —Alert Package model
3
 4   5.4.3 AlertStatus class

 5   The AlertStatus class models the output of a process that considers all alert conditions in a
 6   scope that spans one or more objects. In contrast to an Alert object, an AlertStatus object
 7   collects all alert conditions related to a VMD object hierarchy or related to an MDS object
 8   and provides this information in list-structured attributes. Collecting all alarms together
 9   allows the implementation of first-level alarm processing where knowledge about the
10   VMD or MDS can be used to prioritize alert conditions and to suppress known false alarm
11   indications.

12   For larger scale devices without complete alarm processing, use of an AlertStatus object
13   greatly reduces the overhead of a large number of Alert object instances.

14   If a device contains an AlertStatus object, it shall not contain any Alert or the AlertMonitor
15   objects. Each VMD or MDS in the MDIB is able to contain at most one instance of the
16   AlertStatus class.

17       Example: An ECG VMD derives a heart rate value. As the VMD is able to detect that
18       the ECG leads are disconnected from the patient, its AlertStatus object reports only a
19       technical alarm and suppresses a heart rate limit violation alarm in this case.

20   5.4.4 AlertMonitor class

21   The AlertMonitor class models the output of a medical device system alert processor. As
22   such, it represents the overall device or system alert condition and provides a list of all alert
23   conditions of the system in its scope. This list includes global state information and
24   individual alarm state information that allows the implementation of a safety-standard-
25   compliant alarm display on a remote system.

                                                          30
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   If a device contains an AlertMonitor object, it shall not contain any Alert or AlertStatus
 2   objects. An MDS shall not contain more than one AlertMonitor object.

 3      Example: A patient-monitoring system provides alarm alert information in the form of
 4      an AlertMonitor object to a central station. Alert information includes the current global
 5      maximum severity of audible and visual alert conditions on the monitor display as well
 6      as a list of active technical and physiological alarm conditions. The alert processor
 7      operates in a latching mode where physiological alarm conditions are buffered until
 8      they are explicitly acknowledged by a user.

 9   5.5 Model for the System Package

10   5.5.1 General

11   The System Package deals with the representation of devices that derive or process vital
12   signs information and comply with the definitions in this standard.

13   Figure 7 shows the UML class diagram for the System Package.




14
15                                       —System Package model
16

17   The System Package model contains the classes described in 5.5.2 through 5.5.13.

18   5.5.2 VMS (i.e., virtual medical system) class

19   The VMS class is the abstract base class for all System Package classes in this model. It
20   provides consistent naming and identification of system-related objects.

                                                         31
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   The VMS class is abstract and cannot be instantiated.
 2   5.5.3 MDS class

 3   The MDS class is an abstraction of a device that provides medical information in the form
 4   of instances of classes that are defined in the Medical Package of the DIM.

 5   An instance of the MDS class is the top-level object in the device’s MDIB and represents
 6   the instrument itself. Composite devices may contain additional MDS objects in the MDIB.

 7   Further specializations of this class are used to represent differences in complexity and
 8   scope.

 9   The MDS class is abstract and cannot be instantiated.
10   5.5.4 CompositeMultipleBedMDS class

11   The CompositeMultipleBedMDS class models a device that contains multiple MDS
12   objects at multiple locations (i.e., multiple beds).
13   5.5.5 SinglePatientMDS class

14   The SinglePatientMDS is an abstract class that models a medical device that is associated
15   with a single patient.

16   The SinglePatientMDS class is abstract and cannot be instantiated.

17   5.5.6 CompositeSingleBedMDS class

18   The CompositeSingleBedMDS class models a device that contains one or more
19   SimpleMDS or HydraMDS objects at one location (i.e., a bed).

20   5.5.7 SingleSystemMDS class

21   The SingleSystemMDS class models a medical device that contains VMD objects and that
22   may be contained by a CompositeMDS object.

23   The SingleSystemMDS class is abstract and cannot be instantiated.
24   5.5.8 SimpleMDS class

25   The SimpleMDS class models a medical device that contains a single VMD instance only
26   (i.e., a single-purpose device).
27   5.5.9 HydraMDS class

28   The HydraMDS class models a device that contains multiple VMD instances (i.e., a
29   multipurpose device).



                                                        32
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                             APPROVED DRAFT




                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                               IEEE P11073-10201/D2.1.109, September October 2018



 1   5.5.10 Log class

 2   The Log class is an abstract base class that models a storage container for important local
 3   system notifications and events. It is possible to define specialized classes for specific event
 4   types.

 5   The Log class is abstract and cannot be instantiated.

 6   5.5.11 EventLog class

 7   The EventLog class models a general Log object that stores system events in a free-text
 8   representation.

 9      Example: An infusion device may want to keep track of mode and rate changes by
10      remote systems. When a remote operation is invoked, it creates an entry in its event
11      log.

12   5.5.12 Battery class

13   For battery-powered devices, some battery information is contained in an MDS object in
14   the form of attributes. If the battery subsystem is either capable of providing more
15   information (i.e., a smart battery) or manageable, then a special Battery object is provided.
16   5.5.13 Clock class

17   The Clock class provides additional capabilities for handling date-related and time-related
18   information beyond the basic capabilities of an MDS object. It models the real-time clock
19   capabilities of an MDS object.

20   The Clock class is used in applications where precise time synchronization of medical
21   devices is needed. This class provides resolution and accuracy information so that
22   applications can synchronize real-time data streams between devices.

23   5.6 Model for the Control Package

24   5.6.1 General

25   The Control Package contains classes that allow remote measurement control and device
26   control.

27   The model for remote control defined in this standard provides the following benefits:

28      A system that allows remote control is able to explicitly register which attributes or
29       features can be accessed or modified by a remote system.
30      For attributes that can be remotely modified, a list of possible legal attribute values
31       is provided to the controlling system.
32      It is not mandatory that a remote-controllable item correspond to an attribute of a
33       medical object.

                                                          33
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018




 1     Dependence of a controllable item on internal system states is modeled.
 2     A simple locking transaction scheme allows the handling of transient states during
 3          remote control.
 4   At least two different uses of remote control are considered:

 5      Automatic control may be done by some processes running on the controlling
 6          device. Such a process has to be able to discover automatically how it can modify
 7          or access the controllable items to provide its function.
 8      It is also possible to use remote control to present some form of control interface to
 9          a human operator. For this use, descriptions of functions, and possibly help
10          information, need to be provided.
11   The basic concept presented here is based on Operation objects. An Operation object
12   allows modification of a virtual attribute. This virtual attribute may, for example, be a
13   measurement label, a filter state (on/off), or a gain factor. The attribute is called virtual
14   because it need not correspond to any attribute in other objects instantiated in the system.
15   A virtual attribute may correspond to multiple attributes and may be responsible for a series
16   of actions.

17   Different specializations of the Operation class define how the virtual attribute is modified.
18   A SelectItemOperation, for example, allows the selection of an item from a given list of
19   possible item values for the attribute. A SetValueOperation allows the setting of the
20   attribute to a value from a defined range with a specific step width (i.e., resolution).

21   The idea is that the Operation object provides all necessary information about legal
22   attribute values. Furthermore, the Operation object defines various forms of text string to
23   support a human user of the operation. It also contains grouping information that allows
24   logical grouping of multiple Operation objects together when they are presented as part of
25   a human interface.

26   Operation objects cannot directly be accessed by services defined in the service model in
27   Clause 7. Instead, all controls shall be routed through the SCO (i.e., service and control
28   object). Operation objects support a simple locking mechanism to prevent side effects
29   caused by simultaneous calls.

30   The SCO groups together all Operation objects that belong to a specific entity (i.e., MDS,
31   VMD). The SCO also allows feedback to a controlled device, for example, for a visual
32   indication that the device is currently remote-controlled.

33   Figure 8 shows the UML class diagram for the Control Package:

34   The Control Package model contains the classes described in 5.6.2 through 5.6.10.




                                                         34
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                                         —Control Package model
 3
 4   5.6.2 SCO class

 5   An instance of the SCO (service and control object) class is responsible for managing all
 6   remote-control capabilities that are supported by a medical device.

 7   Remote control in medical device communication is sensitive to safety and security issues.
 8   The SCO provides means for the following:

 9     1. Simple transaction processing, which prevents inconsistencies when a device is
10        controlled from multiple access points (e.g., local and remote) and during the
11        processing of control commands.
12     2. State indications, which allows local and remote indication of ongoing controls.

13   5.6.3 Operation class

14   The Operation class is the abstract base class for classes that model remote-controllable
15   items. Each Operation object allows the system to modify some specific item (i.e., a virtual
16   attribute) in a specific way defined by the Operation object. Operation objects are not
17   directly accessible by services defined in the service model in Clause 7. All controls shall
18   be routed through the SCO object (i.e., the parent) to allow a simple form of transaction
19   processing.




                                                           35
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   The set of Operation objects instantiated by a particular medical device defines the
 2   complete remote control interface of the device. In this way a host system is able to
 3   discover the remote control capabilities of a device in the configuration phase.

 4   The Operation class is abstract and cannot be instantiated.

 5   5.6.4 SelectItemOperation class

 6   An instance of the SelectItemOperation class facilitates the selection of one item out of a
 7   given list.

 8      Example: The invasive pressure VMD may allow modification of its label. It uses a
 9      SelectItemOperation object for this function. The list of legal values supplied by the
10      operation may be, for example, {ABP, PAP, CVP, LAP}. By invoking the operation, a
11      user is able to select one value out of this list.

12   5.6.5 SetValueOperation class

13   An instance of the SetValueOperation class facilitates the adjustment of a value within a
14   given range with a given resolution.

15      Example: A measurement VMD may allow adjustment of a signal gain factor. It uses
16      a SetValueOperation object for this function. The SetValueOperation object provides
17      the supported value range and step width within this range.

18   5.6.6 SetStringOperation class

19   An instance of the SetStringOperation class allows the system to set the contents of an
20   opaque string variable of a given maximum length and format.

21      Example: An infusion device may allow a remote system to set the name of the infused
22      drug in free-text form to show it on a local display. It defines an instance of the
23      SetStringOperation class for this function. The SetStringOperation object specifies the
24      maximum string length and the character format so that the device is able to show the
25      drug name on a small display.

26   5.6.7 ToggleFlagOperation class

27   An instance of the ToggleFlagOperation class allows operation of a toggle switch (with
28   two states, e.g., on/off).

29      Example: An ECG VMD may support a line frequency filter. It uses a
30      ToggleFlagOperation object for switching the filter on or off.
31   5.6.8 ActivateOperation class

32   An instance of the ActivateOperation class allows a defined activity to be started (e.g., a
33   zero pressure).


                                                        36
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1      Example: The zero procedure of an invasive pressure VMD may be started with an
 2      ActivateOperation object.
 3   5.6.9 LimitAlertOperation class

 4   An instance of the LimitAlertOperation class allows adjustment of the limits of a limit
 5   alarm detector and the switching of the limit alarm to on or off.
 6   5.6.10 SetRangeOperation class

 7   An instance of the SetRangeOperation class allows the selection of a value range by the
 8   simultaneous adjustment of a low and high value within defined boundaries.

 9      Example: A measurement VMD may provide an analog signal input for which the
10      signal input range can be adjusted with a SetRangeOperation object.

11   5.7 Model for the ExtendedServices Package

12   5.7.1 General

13   The ExtendedServices Package contains classes that provide extended medical object
14   management services that allow efficient access to medical information in communicating
15   systems. Such access is achieved by a set of objects that package attribute data from
16   multiple objects in a single event message.

17   The classes providing extended services are conceptually derived from ISO/OSI system
18   management services defined in the ISO/IEC 10164 family of standards (specifically Part
19   5 and Part 13). The definitions have been adapted to and optimized for specific needs in
20   the area of vital signs communication between medical devices.

21   Figure 9 shows the UML class diagram for the ExtendedServices Package.




                                                        37
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                               —ExtendedServices Package model
 3

 4   The ExtendedServices Package model contains the classes described in 5.7.2 through
 5   5.7.10.
 6   5.7.2 Scanner class

 7   The Scanner class is an abstract base class that models an observer and “summarizer” of
 8   attribute values. A Scanner object observes attributes of managed medical objects and
 9   generates summaries in the form of notification event reports. These event reports contain
10   data from multiple objects, which provide a better communication performance compared
11   to separate polling commands (e.g., GET service) or multiple individual event reports from
12   all object instances.

13   Subclasses of the Scanner class may be instantiated either by the agent system itself or by
14   the manager system (e.g., dynamic scanner creation by using the CREATE service).

15   The Scanner class is abstract and cannot be instantiated.

16   5.7.3 CfgScanner (i.e., configurable scanner) class

17   The CfgScanner class is an abstract base class that defines a special attribute (i.e., the Scan-
18   List attribute) that allows the system to configure which of an object’s attributes of an
19   object are scanned. The Scan-List attribute may be modified either by the agent system
20   (i.e., auto-configuration or pre-configuration) or by the manager system (i.e., full dynamic
21   configuration by using the SET service).

22   A CfgScanner object may support different granularity for scanning:



                                                         38
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1     1.  Attribute group (i.e., a defined set of attributes): The Scan-List attribute contains the
 2         identifiers (IDs) of attribute groups, and all attributes in the group are scanned.
 3     2. Individual attribute: The Scan-List attribute contains the IDs of all attributes that are
 4         scanned.
 5   In order to deal efficiently with optional attributes, the attribute group scan granularity is
 6   recommended for CfgScanner objects.

 7   The CfgScanner class is abstract and cannot be instantiated.

 8   5.7.4 EpiCfgScanner (i.e., episodic configurable scanner) class

 9   An instance of the EpiCfgScanner class is responsible for observing attributes of managed
10   medical objects and for reporting attribute changes in the form of unbuffered event reports.

11   The unbuffered event report is triggered only by attribute value changes. If an
12   EpiCfgScanner object uses attribute group scan granularity, the event report contains all
13   attributes of the scanned object that belong to this attribute group if one or more of these
14   attributes changed their value.

15          Example: A medical device provides heart beat detect events in the form of an
16          Enumeration object. A display application creates an instance of the EpiCfgScanner
17          object and adds the observed value of the Enumeration object to the Scan-List attribute.
18          The scanner instance afterwards sends a notification when the Enumeration object
19          reports a heart beat.

20   5.7.5 PeriCfgScanner (i.e., periodic configurable scanner) class

21   An instance of the PeriCfgScanner class is responsible for observing attributes of managed
22   medical objects and for periodically reporting attribute values in the form of buffered event
23   reports. A buffered event report contains the attribute values of all available attributes that
24   are specified in the scan list, independent of attribute value changes.

25   If the scanner operates in a special superpositive mode, the buffered event report contains
26   all value changes of attributes that occurred in the reporting period; otherwise, the report
27   contains only the most recent attribute values.

28          Example: A data logger creates an instance of the PeriCfgScanner class and configures
29          the scanner so that it sends an update of the observed value attributes of all Numeric
30          objects in the MDIB every 15 seconds.
31   5.7.6 FastPeriCfgScanner (i.e., fast periodic configurable scanner) class

32   The FastPeriCfgScanner class is specialized for scanning the observed value attribute of
33   RealTimeSampleArray objects. This special scanner class is further optimized for low-
34   latency reporting and efficient communication bandwidth utilization, which is required to
35   access real-time waveform data.



                                                           39
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1      Example: A real-time display application (e.g., manager system) wants to display ECG
 2      waveforms. It instantiates a FastPeriCfgScanner object on the agent system (e.g., server
 3      device) and requests periodic updates of all ECG leads.
 4   5.7.7 UcfgScanner (i.e., unconfigurable scanner) class

 5   The UcfgScanner class is an abstract base class. An UcfgScanner object scans a predefined
 6   set of managed medical objects that cannot be modified. In other words, an UcfgScanner
 7   object typically is a reporting object that is specialized for one specific purpose.

 8   The UcfgScanner class is abstract and cannot be instantiated.
 9   5.7.8 ContextScanner class

10   An instance of the ContextScanner class is responsible for observing device configuration
11   changes. After instantiation, a ContextScanner object is responsible for announcing the
12   object instances in the device’s MDIB. A ContextScanner object provides the object
13   instance containment hierarchy and static attribute values.

14   In case of dynamic configuration changes, a ContextScanner object sends notifications
15   about new object instances or deleted object instances.

16      Example: A data logger creates a ContextScanner instance in an agent MDIB to receive
17      notifications about MDS configuration changes when new measurement modules are
18      plugged in (i.e., new VMD instance) or when such a module is unplugged (i.e., VMD
19      instance deleted).

20   5.7.9 AlertScanner class

21   An instance of the AlertScanner class is responsible for observing the alert-related attribute
22   groups of objects modeled in the Alert Package. As alarming in general is security-
23   sensitive, AlertScanner objects are not configurable (i.e., all or no Alert objects are
24   scanned).

25   An AlertScanner object sends event reports periodically so that timeout conditions can be
26   checked.
27   5.7.10 OperatingScanner class

28   An instance of the OperatingScanner class is responsible for providing all information
29   about the operating and control system of a medical device.

30   In other words, an OperatingScanner instance maintains the configuration of Operation
31   objects contained in SCOs (by sending CREATE notifications for Operation objects), it
32   scans transaction-handling-related SCO attributes, and it scans Operation attributes.
33   Because SCOs and Operation objects may have dependencies, the OperatingScanner is not
34   configurable.



                                                         40
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                          APPROVED DRAFT




                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                            IEEE P11073-10201/D2.1.109, September October 2018



 1   5.8 Model for the Communication Package

 2   5.8.1 General

 3   The Communication Package deals with objects that enable and support basic
 4   communication.

 5   Figure 10 shows the UML class diagram for the Communication Package.




 6
 7                              —Communication Package model
 8

 9   The Communication Package model contains the classes described in 5.8.2 through 5.8.7.
10   5.8.2 CommunicationController class

11   The CommunicationController class models the upper layer and lower layer
12   communication profile of a medical device.

13   CommunicationController objects are the access points for retrieving DeviceInterface
14   attributes and management information base element (MibElement) attributes for obtaining
15   management information related to data communications.

16   The CommunicationController class is abstract and cannot be instantiated. Two
17   instantiable subclasses are defined: BCC and DCC. A medical device MDIB contains either
                                                       41
                                    Copyright © 2018 IEEE. All rights reserved.
                         This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   no CommunicationController object or one BCC object or one DCC object (depending on
 2   its role).
 3   5.8.3 DCC (i.e., device communication controller) class

 4   The DCC class is the CommunicationController subclass used by medical devices
 5   operating as agent systems (i.e., association responders).

 6   DCC objects shall contain one or more DeviceInterface objects.
 7   5.8.4 BCC (i.e., bedside communication controller) class

 8   The BCC class is the CommunicationController subclass used by medical devices
 9   operating as manager systems (i.e., association requestors).

10   BCC objects shall contain one or more DeviceInterface objects.

11   5.8.5 DeviceInterface class

12   The DeviceInterface class models a particular interface, i.e., port. The port is either a
13   logical or a physical end point of an association for which (e.g., statistical) data captured
14   in the MibElement objects can be independently collected.

15   Both an agent system and a manager system can have multiple logical or physical ports,
16   depending on the selected implementation of the lower layer communication system.

17   DeviceInterface objects are not accessible by CMDISE services. DeviceInterface objects
18   contain at least one Mib-Element object (i.e., the DeviceInterfaceMibElement object,
19   which represents device interface properties), which can be accessed by a special method
20   defined by the CommunicationController object.
21   5.8.6 MibElement class

22   An instance of the MibElement class contains statistics and performance data for one
23   DeviceInterface object.

24   The MibElement class is abstract and cannot be instantiated

25   Management information for a communication link is dependent on the lower layers of the
26   communication stack (i.e., lower layers profile). Various MibElement subclasses are
27   defined to group management information in defined packages, which can be generic or
28   dependent on specific transport profiles. This standard defines two concrete subclasses of
29   MibElement. Additional MibElement specializations may be defined in the future by other
30   standards.

31   MibElement objects are not directly accessible. Their attributes can be accessed only
32   through a CommunicationController object. MibElement objects are not part of the
33   device’s MDIB.


                                                         42
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   5.8.7 DeviceInterfaceMibElement class

 2   An instance of the DeviceInterfaceMibElement class describes the properties of the device   Formatted: IEEEStds Paragraph
 3   interface. If a Medical Device System (MDS) implements a CommunicationController
 4   then a DeviceInterfaceMibElement must be implemented as well.
 5   5.8.8 SpecializedMibElement class

 6   The SpecializedMibElement class is the abstract base class for all classes defined for      Formatted: IEEEStds Paragraph
 7   managing information beyond that which is handled by the DeviceInterfaceMibElement.
 8   Only one subclass of SpecializedMibElement is defined in this standard. More
 9   specializations may be defined in the future by other standards.

10   5.8.9 GeneralCommunicationStatisticsMibElement class

11   The GeneralCommunicationStatisticsMibElement class      is a subclass       of              Formatted: IEEEStds Paragraph
12   SpecializedMibElement. The GeneralCommunicationStatistics class models typical
13   communication statistics that are generally applicable.
14   5.8.7 Specialized MibElement classes

15   Management information for a communication link is dependent on the lower layers of the
16   communication stack (i.e., lower layers profile).

17   This standard, however, defines only two MibElement subclasses:

18      The mandatory DeviceInterfaceMibElement class, which describes properties of the
19       device interface
20      An optional GeneralCommunicationStatisticsMibElement class, which models
21       typical communication statistics that are generally applicable

22   5.9 Model for the Archival Package

23   5.9.1 General

24   The Archival Package deals with storage and representation of biosignals, status, and
25   context information in an on-line or an off-line archive.

26   Figure 11 shows the UML class diagram for the Archival Package.

27   The Archival Package model contains the classes described in 5.9.2 through 5.9.8.




                                                        43
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018




 1
 2                                     —Archival Package model
 3
 4   5.9.2 MultipatientArchive class

 5   Instances of the MultipatientArchive class group together multiple PatientArchive objects
 6   referring to different patients.

 7      Example: A drug study may be documented in the form of a MultipatientArchive
 8      object containing multiple PatientArchive objects that show how the drug affected the
 9      monitored vital signs.

10   5.9.3 PatientArchive class

11   Instances of the PatientArchive class group patient-related information (e.g., vital signs
12   data, treatment data, and patient demographics) together in a single archive object. This
13   object relates to static (i.e., invariant) data in a PatientDemographics object only.

14      Example: A hospital may store data about multiple visits of a single patient in a
15      PatientArchive object that contains a number of SessionArchive objects, each
16      documenting vital signs information recorded during a specific visit in a hospital
17      department.



                                                        44
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1   5.9.4 SessionArchive class

 2   The SessionArchive class models a patient visit or a continuous stay in the a hospital or
 3   hospital department. Diagnostic treatments performed during this time period are
 4   represented by SessionTest objects contained in a SessionArchive object. A
 5   SessionArchive object refers to dynamic (i.e., variant) data in a PatientDemographics
 6   object.

 7   5.9.5 PhysicianArchive class

 8   The Physician class models the physician responsible for the set of diagnostic and
 9   therapeutic activities during the time period represented by a SessionArchive object.

10   5.9.6 SessionTest class

11   The SessionTest class models vital signs information of a single patient that is recorded
12   during a single examination or diagnostic treatment. Instances of the SessionTest class
13   contain vital signs metrics in form of PM-Store objects. It also may contain information
14   about equipment that was used for recording (in the form of relations to MDS and Ancillary
15   objects).

16      Example: Vital signs information recorded during a ECG stress test examination is
17      organized in a SessionTest object.
18   5.9.7 SessionNotes class

19   The SessionNotes class models a container for diagnostic data, patient care details, and
20   treatment-related information in the form of textual data.

21   5.9.8 Ancillary class

22   The Ancillary class is not further defined in this standard. This class is present in the model
23   to indicate that information from sources other than devices within the scope of this
24   standard are permitted to be included in (or referenced by) the SessionTest object.

25      Example: Image data that complies with the DICOM (ISO 12052) standard are
26      permitted to be included in the SessionTest object as ancillary data.

27   5.10 Model for the Patient Package

28   5.10.1 General

29   The Patient Package deals with all patient-related information that is relevant in the scope
30   of this standard, but is not vital signs information modeled in the Medical Package.

31   Figure 12 shows the UML class diagram for the Patient Package:

32   The Patient Package model contains one class (see 5.10.2).


                                                           45
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1
 2
 3
 4
 5
 6
 7
 8
 9




10
11                                       —Patient Package model
12   5.10.2 PatientDemographics class

13   Instances of the PatientDemographics class store patient census data.

14   This standard provides minimal patient information as typically required by medical
15   devices. A complete patient record is outside the scope of this standard.

16   5.11 DIM—dynamic model

17   5.11.1 General

18   Subclause 5.11 defines global dynamic system behavior.

19   Note that dynamic object behavior resulting from invocation of object management
20   services is part of the class definitions in Clause 6.

21   5.11.2 MDS communication finite state machine (FSM)

22   Figure 13 shows the MDS FSM for a communicating medical device that complies with
23   the definitions in this standard. The FSM is used to synchronize the operational behavior
24   of manager (i.e., client) systems and agent (i.e., server) systems.

25   After power-up, the device performs all necessary local initializations (i.e, boot phase) and
26   ends up in the disconnected state, where it waits for connection events.

                                                         46
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



1    When a connection event is detected, the device tries to establish a logical connection (i.e,
2    an association) with the other device. A manager (i.e., client) system is the association
3    requester, and an agent (i.e, server) system is the association responder. Basic compatibility
4    checks are performed in the associating state.




5
6                                                   —MDS FSM
 7

 8   After successful association, configuration data (i.e., the MDIB structure) is exchanged by
 9   the use of services and extended services (in particular, the ContextScanner object) as
10   defined in this standard. Additional information (e.g., MDS attributes) is supplied that
11   allows further compatibility and state checks.

12   After configuration, medical data are exchanged by using services and extended services
13   as defined in this standard. Dynamic reconfiguration is allowed in the operating state. If
14   the device or the type of reconfiguration does not allow dynamic handling in the operating
15   state, a special “reconfiguring” state is provided.

16   If an event indicates an intention to disconnect, the disassociating state is entered.

                                                         47
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   The diagram does not show error events. Fatal error events take the state machine out of
 2   the operating state.
 3   NOTE—This state machine describes the behavior of the MDS communication system only. Usually the device must
 4   perform its medical function independent of the communication system.

 5   The FSM is considered a part of the MDS class. The MDS-Status attribute reflects the state
 6   of the machine. The MDS may announce state changes in the form of attribute change
 7   event reports.

 8   Specific application profiles shall use this state machine as a general guideline, but they
 9   may define specific deviations to fulfill specific profile-dependent requirements or
10   assumptions.

11   5.11.3 Communicating systems—startup object interaction diagram

12   Figure 14 presents the UML sequence diagram that visualizes the startup phase after
13   connecting two devices.




14
15                                         —Startup after connection
16

17   It is assumed here that, conceptually, messages are exchanged between the
18   CommunicationController objects (using the device interface).


                                                            48
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



1    Some form of connection indication is necessary to make the manager system aware of a
2    new agent on the network. This mechanism is dependent on the specific lower layer
3    implementation; therefore, it is not further defined in this standard.

4    Specific application profiles shall use this interaction diagram as a general guideline, but
5    they may define specific deviations to fulfill specific profile-dependent requirements or
6    assumptions.
7    5.11.4 Communication Package—MibElement data access

8    Figure 15 presents the UML sequence diagram that shows how a manager system accesses
9    the MibElement data using the objects defined in the Communication Package (see 5.8).




10
11                                     —MibElement data access
12

13   The diagram assumes the following:

14      An association is established between the agent and the manager.
15      The configuration phase is finished, and the manager has an image of the agent’s
16          MDIB.
17      The DCC object is part of the agent’s MDIB.
18   The manager first uses the GET service to retrieve all DCC attributes and their values. The
19   attributes specify how many DeviceInterface objects exist.

20   The manager uses the ACTION service with the CommunicationController’s Get-Mib-
21   Data method to retrieve the attributes of the mandatory DeviceInterfaceMibElement object.
22   The MibElement attribute variables specify if any additional MibElement objects are
23   available for the interface. If so, the manager can use the same ACTION command to
24   retrieve the additional management information represented in the MibElement objects.

                                                        49
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                             APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                               IEEE P11073-10201/D2.1.109, September October 2018



 1   5.11.5 Dynamic object relations

 2   5.11.5.1 General

 3   This subclause deals with relations between managed medical objects (i.e., instances of
 4   classes that are defined as managed objects in this standard).

 5   Generally, the relationships between objects that are defined in the package models are
 6   dynamic.

 7      Example: A modular patient monitor is modeled as an MDS. Measurement modules
 8      are modeled as VMDs. If a new module is connected to the monitor, there is also a new
 9      relationship between the MDS and the new VMD instance.

10   Communicating agent systems (i.e., agents) use services defined in this standard to
11   announce configuration change events to other connected systems. These manager systems
12   (i.e., managers) modify their view of the agent MDIB.

13   Not only does a vital signs information archive have to update its configuration, but it also
14   has to permanently store these connection and disconnection events.

15      Example: An instance of the SessionArchive class represents the stay of a patient in
16      the intensive care unit (ICU). During that period, new devices are connected to the
17      patient to increase the number of recorded vital signs. They are removed again as soon
18      as the patient’s condition stabilizes. The SessionArchive object shall not delete
19      recorded data when the recording device is disconnected.

20   Thus, in certain applications (e.g., archival applications), object relationships have
21   associated information that must be captured.

22   When required, the relationships themselves can be considered to be special managed
23   objects as shown in Figure 16.




24
25                      —Example of a relationship represented by an object

                                                          50
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1

 2   The example in Figure 16 shows a relation between a SessionArchive object and an MDS
 3   object. The relation is represented as an object. This object has attributes that provide
 4   information, for example, about time of connection and disconnection.

 5   Modeling the relations as objects has the advantage that information can be defined in the
 6   form of attributes. It is not necessary to assign the attributes to one or both objects that are
 7   related.

 8   How dynamic object relations are handled by systems that comply with the definitions in
 9   this standard is defined in 5.11.5.2 and 5.11.5.3.

10   5.11.5.2 Dynamic object relations in communicating systems

11   Relations between objects that are defined in the package models are considered
12   configuration information. The ContextScanner class provides configuration information
13   in the form of object create notifications and object delete notifications. No means for
14   persistent storage of past (i.e., old) configuration information is defined for communicating
15   systems.

16   Other relations between objects (e.g., to reference a source signal in derived data) are
17   specified in the form of attributes of the corresponding objects (e.g., the Vmo-Source-List
18   attribute of the Metric object). Dynamic changes of these attributes are announced by
19   attribute change notification events.

20   5.11.5.3 Dynamic object relations in archival systems

21   An archival system may need to provide persistent storage for configuration information.
22   In this case, the corresponding relations are considered to be represented by objects, as
23   shown in 5.11.5.

24   An archival system that uses a data format in compliance with the definitions in this
25   standard has to provide means to store (i.e., archive) the attributes of dynamic relationship
26   objects.

27   6. DIM class definitions

28   6.1 Overview

29   6.1.1 General

30   Clause 6 contains the definitions for all classes in the DIM. The packages defined in the
31   model are used to categorize classes. Attributes, behavior, and notifications are defined for
32   each class.




                                                         51
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1   6.1.2 Notation

 2   Each class is defined in a separate subclause (see 6.2 through 6.10). Further subclauses
 3   define attributes, behavior, and notifications for the classes.

 4   The class is defined in a subclause as follows:
 5   Class:                     Defines the name of the class.
 6   Description:               “Gives a short, informative textual description of the class.”
 7   Superclass:                Defines the class from which this class inherits attributes, attribute groups, behavior, and
 8                              notifications.
 9   Subclasses:                Defines classes that inherit attributes, attribute groups, behavior, and notifications from
10                              this class.
11   Name Binding:              Defines the attribute that uniquely identifies an object instance in a given context. For
12                              manageable objects, this definition is the Handle attribute and the context is the device
13                              system (i.e., single MDS context). See also 6.1.3.5.
14   Registered As:             Defines a term that is defined in the nomenclature to allow unique identification [e.g.,
15                              object identifier (OID), code] of the class.

16   The attributes of each class are defined in an attribute subclause. Tables define attribute
17   names, unique attribute IDs, attribute data types, and certain qualifiers. The qualifiers have
18   the following meaning:

19     M            attribute is mandatory
20     O            attribute is optional
21     C            attribute is conditional; availability of attribute depends on a predefined
22                  condition

23   Unless otherwise noted, the attribute definition tables do not show inherited attributes
24   again. In other words, the attribute lists of all superclasses have to be checked for a
25   complete list of attributes.

26   Attributes are assigned to, or grouped together in, attribute groups so attributes can be
27   classified according to their use (e.g., static context information, dynamic context
28   information, value observations). The grouping also makes it possible to effectively deal
29   with optional attributes: A GET service facilitates the retrieval of all members of the group
30   so an application is able to determine which attributes are actually present in a particular
31   object instance.

32   Attribute groups may be extensible. In other words, a derived class is able to add additional
33   members to an inherited attribute group.

34   Attribute groups are also defined in tables that specify group identification and the list of
35   group members. Inherited attribute groups are not shown in the attribute group tables again
36   unless these groups are extensible.

37   Special instance methods or functions that may be called on an object are defined in a
38   behavior subclause. These methods can be invoked by the CMDISE ACTION service.




                                                           52
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1   Events generated by an object (other than a generic attribute change notification) are
 2   defined in a notifications subclause. An object reports these events by using the CMDISE
 3   EVENT REPORT service.
 4   6.1.3 Common data types

 5   This subclause defines a set of ASN.1 data types that are used in the class definitions.

 6   The external nomenclature reference data type is a special data type that is defined for this
 7   function as follows:
 8   6.1.3.1 Integer and bit string data types

 9   For representing integer numbers, the class definitions use fixed-size data types only. The
10   bit string data type represents a bit field where each single bit has a defined meaning (i.e.,
11   flag fields). The following integer data types and bit string data types are used:
12    --
13    -- 8-bit unsigned integer
14    --
15    INT-U8 ::= INTEGER (0..255)

16    --
17    -- 8-bit signed integer
18    --
19    INT-I8 ::= INTEGER (-128..127)

20    --
21    -- 16-bit unsigned integer
22    --
23    INT-U16 ::= INTEGER (0..65535)

24    --
25    -- 16-bit signed integer
26    --
27    INT-I16 ::= INTEGER (-32768..32767)

28    --
29    -- 32-bit unsigned integer
30    --
31    INT-U32 ::= INTEGER (0..4294967295)

32    --
33    -- 32-bit signed integer
34    --
35    INT-I32 ::= INTEGER (-2147483648..2147483647)

36    --
37    -- 8-bit bit string
38    --
39    BITS-8 ::= BIT STRING (SIZE(8))

40    --
41    -- 16-bit bit string
42    --
43    BITS-16 ::= BIT STRING (SIZE(16))


                                                           53
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1     --
 2     -- 32-bit bit string
 3     --
 4     BITS-32 ::= BIT STRING (SIZE(32))

5      --
6      -- 8-bit octet string
7      --
8      OCTET STRING-8 ::= OCTET STRING (SIZE(8))

 9   NOTE 1—When interpreting integer numbers, the representation (e.g., little endian versus big endian) has to be
10   considered. Communicating systems negotiate this representation at association (i.e., transfer syntax). Archival data
11   formats have to provide a mechanism to uniquely identify integer representation (e.g., a field in a specification header).
12   NOTE 2—In the class definitions, data types with named constants or named bits also use the above notation for
13   simplicity. The above notation is illegal ASN.1 syntax, but it can be easily transformed to the correct syntax.

14   6.1.3.2 Identification data type

15   All elements (e.g., classes, objects, measurement types) that need unique identification are
16   assigned an OID. The set of valid OIDs for this standard is defined in ISO/IEEE 11073-
17   10101. The nomenclature is split into a set of partitions, and each partition has its own
18   range of 16-bit codes. In other words, the 16-bit code is context-sensitive.

19   The 16-bit identification data type is defined as follows:
20     --
21     -- OID type as defined in nomenclature (do not confuse with ASN.1 OID)
22     -- 16-bit integer type
23     --
24     OID-Type ::= INT-U16

25   For IDs that are not part of the standard nomenclature (i.e., private or manufacturer-specific
26   codes), a special type is defined as follows:
27     --
28     -- Private OID
29     --
30     PrivateOid ::= INT-U16

31   6.1.3.3 Handle data type

32   The handle data type is used for efficient, locally unique identification of all managed
33   medical object instances. (Locally unique means unique within one MDS context.) This
34   data type is defined as follows:
35     --
36     -- handle
37     --
38     HANDLE ::= INT-U16

39   6.1.3.4 Instance number data type

40   The instance number data type is used to distinguish object instances of the same type or
41   object instances that are not directly manageable (i.e., used, e.g., as the Name Binding
42   attribute for Operation objects). This data type is defined as follows:
                                                               54
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1      --
2      -- Instance Number
3      --
4      InstNumber ::= INT-U16

 5   6.1.3.5 Global object identification

 6   Handle and instance number data types must be unique inside one specific naming context
 7   (e.g., handles are unique within at least one MDS context). This uniqueness allows the
 8   identification of an object instance within its naming context by one single, small identifier.

 9   To address larger scale systems, a context ID field at the MDS level within an MDIB is
10   added to the handle data type so that multiple device systems can be distinguished. This
11   global handle data type is defined as follows:
12     --
13     -- MDS Context ID
14     --
15     MdsContext ::= INT-U16

16     --
17     -- Global handle allows identification of an object in a larger scale system
18     --
19     GLB-HANDLE ::= SEQUENCE {
20          context-id MdsContext,
21          handle      HANDLE
22     }

23     --
24     -- Managed OID as a type for complete global object identification
25     --
26     ManagedObjectId ::= SEQUENCE {
27         m-obj-class OID-Type,
28         m-obj-inst GLB-HANDLE
29     }

30       Example: A medical device may interface with further medical devices (i.e., sub-
31       devices). In the MDIB, this device may model these sub-devices as individual MDS
32       objects with their own naming context. In this way, name space collisions (e.g.,
33       duplicate handle values, duplicate nomenclature codes) can be avoided without
34       reassigning handle values. A manager system needs to interpret the MDS context IDs
35       together with handle values to uniquely identify object instances within this composite
36       MDIB. The context IDs are assigned when the MDIB is created by ContextScanner
37       object create notifications.

38   Assumptions and possible restrictions about different naming contexts within an MDIB are
39   profile dependent.

40   6.1.3.6 Type ID data type

41   The type ID data type is used in the VMOs and VMS objects to provide specific static
42   information about the type of an object instance (e.g., blood pressure could be the type of
43   a Numeric object). Codes defined in the nomenclature are used. The nomenclature contains
44   a number of partitions, and code values are unique only within one partition. As the type
                                                               55
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   ID data type should be context-free, the partition of the nomenclature code is also provided.
 2   This data type is defined as follows:
3      --
4      -- Type ID
5      --
6      TYPE ::= SEQUENCE {
7           partition NomPartition,
8           code      OID-Type
9      }

10     --
11     -- The following nomenclature partitions exist
12     --
13     NomPartition ::= INT-U16 {
14          nom-part-unspec(0),
15          nom-part-obj(1),                -- object-oriented partition
16          nom-part-metric(2),             -- metric [supervisory control and data acquisition (SCADA)] partition
17          nom-part-alert(3),              -- alerts/events partition
18          nom-part-dim(4),                -- dimensions partition
19          nom-part-vattr(5),              -- virtual attribute partition for Operation objects
20          nom-part-pgrp(6),               -- parameter group ID partition
21          nom-part-sites(7),              -- measurement and body site locations
22          nom-part-infrastruct(8),        -- infrastructure elements partition
23          nom-part-fef(9),                -- file exchange format partition
24          nom-part-ecg-extn(10),          -- ECG extensions partition
25          nom-part-icdo(11),              -- IDCO partiion
26          nom-part-phddm(128),            -- phd disease management partition
27          nom-part-hf(129),               -- health and fitness partition
28          nom-part-ageind(130),           -- aging independently partition
29          nom-part-returncodes(255),      -- return codes patition
30          nom-part-ext-nom(256),          -- IDs of other nomenclatures and dictionaries
31          nom-part-settings(258),         -- settings partition
32          nom-part-priv(1024)             -- private partition
33     }

34   6.1.3.7 Attribute value assertion data type

35   A number of services defined in the service model in Clause 7 provide access to
36   theattributes of an object (e.g., GET, SET). Typically, the attribute has to be identified by
37   means of an attribute ID. The attribute data type itself is dependent on this ID. The attribute
38   value assertion data type represents this ID-value pair and is defined as follows:
39     AVA-Type ::= SEQUENCE {
40        attribute-id                      OID-Type,
41        attribute-value                   ANY DEFINED BY attribute-id
42     }

43   6.1.3.8 Attribute list data type

44   Frequently, a list of attribute ID–attribute value pairs is needed. The attribute list data type
45   is a special data type that is provided for this situation and is defined as follows:
46     AttributeList ::= SEQUENCE OF AVA-Type




                                                              56
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   6.1.3.9 Attribute ID list data type

 2   Frequently, a list of attribute IDs is used. The attribute ID list data type is a special type
 3   that is provided for convenience and is defined as follows:
 4     AttributeIdList ::= SEQUENCE OF OID-Type

 5   6.1.3.10 Floating point type data type

 6   For performance and efficiency, the class definitions use the floating point type data type,
 7   which is a special data type for representing floating point numbers. It is assumed that this
 8   data type is 32 bits. This data type is defined as follows:
 9     --
10     -- 32-bit float type; the integer type is a placeholder only
11     --
12     FLOAT-Type ::= INT-U32

13   The concrete specific floating point number format is either explicitly negotiated at
14   association or implicitly defined by the association application context.
15   6.1.3.11 Relative time data type

16   The relative time data type is a high-resolution time definition relative to some event (e.g.,
17   a synchronization event at startup). This data type is used to position events relative to each
18   other. It is defined as follows:
19     --
20     -- 5HODWLYHWLPHKDVDUHVROXWLRQRIȝV>OHDVWVLJQLILFDQWELW/6%@ZKLFKLVVXIILFLHQWIRUVDPSOLQJUDWHVXSWR
21     -- 8 kHz and spans time periods up to 6.2 days
22     --
23     RelativeTime ::= INT-U32

24   Note that the time accuracy is defined by the system itself.
25   6.1.3.12 High-resolution relative time data type

26   If either the resolution or the time span of the previously defined relative time data type is
27   not sufficient, a high-resolution relative time data type is defined. The data type is 64 bits
28   long. However, as there is no 64- bit integer data type defined, an opaque (i.e., string) data
29   structure is used. The type is defined as follows:
30     --
31     -- 64-bit (8 byte) high-resoluWLRQWLPHWKH/6%UHSUHVHQWVȝV
32     --
33     HighResRelativeTime ::= OCTET STRING-8

34   Note that the time accuracy is defined by the system itself.

35   6.1.3.13 Absolute time data type

36   Absolute time data type specifies the time of day with at least a resolution of 1 s. For
37   efficiency, the values in the structure are BCD-encoded (i.e., 4-bit nibbles). The year 1996,
                                                                57
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1   for example, is represented by the hexa- decimal value 0x19 in the century field and the
 2   hexadecimal value 0x96 in the year field. This format can easily be converted to character-
 3   based or integer-based representations. The absolute time data type is defined as follows:
 4    AbsoluteTime ::= SEQUENCE {
 5        century                          INT-U8,
 6        year                             INT-U8,
 7        month                            INT-U8,
 8        day                              INT-U8,
 9        hour                             INT-U8,
10        minute                           INT-U8,
11        second                           INT-U8,
12        sec-fractions                    INT-U8              -- hundredths of second if available
13    }

14   6.1.3.14 Date data type

15   The date data type is used to specify a certain calendar date. For ease of transformation,
16   the data type has the same encoding (i.e., BCD) as the absolute time data type. The date
17   data type is defined as follows:
18    Date ::= SEQUENCE {
19        century   INT-U8,
20        year      INT-U8,
21        month     INT-U8,
22        day       INT-U8
23    }

24   6.1.3.15 Data Type: OperationalState

25   The operational state data type defines if a certain object or other property is enabled or
26   disabled. The definitions are derived from ISO/IEC 10164-2 and are as follows:
27    OperationalState ::= INT-U16 {
28        disabled(0),
29        enabled(1),
30        notAvailable(2)
31    }

32   6.1.3.16 Administrative state data type

33   The administrative state data type defines if a certain object is locked or unlocked. The
34   definitions are derived from ISO/IEC 10164-2 and are as follows:
35    AdministrativeState ::= INT-U16 {
36       locked(0),
37       unlocked(1),
38       shuttingDown(2)
39    }

40   6.1.3.17 Color data type

41   The color data type represents the basic RGB colors and is defined as follows:
42    --
43    -- 3 bits representing RGB, respectively

                                                              58
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1    --
 2    SimpleColour ::= INT-U16 {
 3        col-black(0),                   -- 000
 4        col-red(1),                     -- 100
 5        col-green(2),                   -- 010
 6        col-yellow(3),                  -- 110
 7        col-blue(4),                    -- 001
 8        col-magenta(5),                 -- 101
 9        col-cyan(6),                    -- 011
10        col-white(7)                    -- 111
11    }

12   6.1.3.18 Locale data type

13   The locale data type shall be used to specify language and encoding information for data
14   types that represent human-readable text strings. This data type is defined as follows:
15    Locale ::= SEQUENCE {
16        language INT-U32,               -- from ISO 639-1 or ISO 629-2, see below for encoding
17        country    INT-U32,             -- from ISO 3166-1, ISO 3166-2, or ISO 3166-3, see below for encoding
18        charset    CharSet,             -- format of character encoding
19        str-spec   StringSpec
20    }

21    --
22    -- Charset names correspond to Internet Assigned Numbers Authority (IANA), the numeral constants are the
23    -- IANA MIBenum values for registered charsets
24    --
25    CharSet ::= INT-U16 {
26         charset-unspec(0),
27         charset-iso-10646-ucs-2(1000), -- ISO 10646 two-octet character encoding scheme, big endian
28         charset-iso-10646-ucs-4(1001), -- ISO 10646 four-octet character encoding scheme, big endian
29         charset-iso-8859-1(4),          -- encoding according to ISO/IEC 8859 Part 1
30         charset-iso-8859-2(5),          -- encoding according to ISO/IEC 8859 Part 2
31         charset-iso-8859-3(6),          -- encoding according to ISO/IEC 8859 Part 3
32         charset-iso-8859-4(7),          -- encoding according to ISO/IEC 8859 Part 4
33         charset-iso-8859-5(8),          -- encoding according to ISO/IEC 8859 Part 5
34         charset-iso-8859-6(9),          -- encoding according to ISO/IEC 8859 Part 6
35         charset-iso-8859-7(10),         -- encoding according to ISO/IEC 8859 Part 7
36         charset-iso-8859-8(11),         -- encoding according to ISO/IEC 8859 Part 8
37         charset-iso-8859-9(12),         -- encoding according to ISO/IEC 8859 Part 9
38         charset-iso-8859-10(13),        -- encoding according to ISO/IEC 8859 Part 10
39         charset-iso-8859-13(109),       -- encoding according to ISO/IEC 8859 Part 13
40         charset-iso-8859-14(110),       -- encoding according to ISO/IEC 8859 Part 14
41         charset-iso-8859-15(111),       -- encoding according to ISO/IEC 8859 Part 15
42         charset-iso-2022-kr(37),        -- encoding according to RFC 1557 (Korean Character Encoding)
43         charset-ks-c-5601(36),          -- encoding according to Korean Industrial Standard, KSC 5601-1987
44         charset-iso-2022-jp(39),        -- encoding according to RFC 1468 (Japanese Character Encoding)
45         charset-iso-2022-jp-2(40),      -- encoding according to RFC 1554 (Japanese Character Encoding)
46         charset-jis-x0208(63),          -- encoding according to JIS X0208:1983,1990
47         charset-iso-2022-cn(104),       -- encoding according to RFC 1922 (Chinese Character Encoding)
48         charset-gb-2312(2025)           -- encoding according to Chinese Graphic Character Set, GB 2312:1980
49    }

50    StringSpec ::= SEQUENCE {
51         str-max-len INT-U16,           -- maximum string length
52         str-flags   StringFlags        -- specific flags for string representation and coding
53    }

54    StringFlags ::= BITS-16 {

                                                            59
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



1           str-flag-nt(0)              -- strings are null terminated
2      }

 3   The field Locale::language shall represent the lowercase ISO/IEC 646 representation of a
 4   two-character language ID code from ISO 639-1 or ISO 639-2. For processing
 5   convenience, the language ID is stored in a 32- bit integer field. The first octet of the code
 6   is stored in the most significant byte of this field. Unused octets in the field are filled with
 7   NULL bytes.

 8         Example:
 9            Language:            “English”
10            Language identifier: “en”
11            Encoding:            65 6E 00 00h

12   The field Locale::country shall represent the uppercase ISO/IEC 646 representation of a
13   two-character coun- try ID code from ISO 3166-1, ISO 3166-2, or ISO 3166-3. For
14   processing convenience, the country ID is stored in a 32-bit integer field. The first octet of
15   the code is stored in the most significant byte of this field. Unused octets of the field are
16   filled with NULL bytes.

17   The country code can be used to distinguish between certain aspects of the same language
18   used in different countries, e.g., English in the United States versus English in the United
19   Kingdom.

20   If no specific country is defined, this field shall be set to 0.

21         Example:
22            Country:                 “United States”
23            Country identifier:      “US”
24            Encoding:                55 53 00 00h

25   The field Locale::charset denotes the encoding scheme of the characters used in string data
26   types represent- ing readable text.

27   For interoperability, the character encoding scheme iso-10646-ucs-2 is recommended. This
28   encoding scheme corresponds to ISO/IEC 10646 with a 2-octet (i.e., 16-bit per character)
29   big-endian encoding, repre- senting the basic multilingual plane (BMP). The character
30   codes within ISO/IEC 10646 do not correspond directly with glyphs, i.e., the graphical
31   representation of a character. Also the ISO/IEC 10646 is language independent. Other
32   Locale::charset values may be more language dependent because they also specify a cer-
33   tain character repertoire.

34   6.1.3.19 External nomenclature reference data type

35   In certain cases, it is required to refer to standard coding systems (i.e., nomenclatures) that
36   are outside the scope of this standard.



                                                           60
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1         Example: The nomenclature defined in this standard does not define diagnostic codes
 2         or procedure codes. However, it is possible to reference a different coding system and
 3         provide the information in the form of an external code.

 4   The external nomenclature reference data type is a special data type that is defined for this
 5   function as follows:
 6     ExtNomenRef ::= SEQUENCE {
 7         nomenclature-id                 OID-Type,     -- external nomenclature ID from external
 8                                                       -- nomenclature partition
 9          nomenclature-code              ANY DEFINED BY nomenclature-id
10     }

11   6.1.3.20 External object relation list data type

12   In certain cases, managed medical objects defined in the DIM may have relations to other
13   objects that are not defined in this standard (i.e., they are external to the definitions).

14   The external object relation list data type can be used to provide information about these
15   objects and the particular relation. This data type is defined as follows:
16     --
17     -- ExtObjRelationList
18     --
19     ExtObjRelationList ::= SEQUENCE OF ExtObjRelationEntry

20     ExtObjRelationEntry ::= SEQUENCE {
21         relation-type              OID-Type,
22         related-object             OID-Type,
23         relation-attributes        AttributeList
24     }

25         Example 1: In certain situations, it is necessary to record specific production
26         information (e.g., serial number) of a transducer that is used to derive a measurement.
27         The transducer in this standard is not defined as a managed medical object. Therefore,
28         the VMD object instances use a relation entry to supply the information, e.g., {relation-
29         type = is-connected; related-object = Transducer; relation-attributes = {model, “A-
30         Model,” serial-number = “12345”}}.

31         Example 2: A certain numerical measurement value is manually validated by a nurse.
32         A charting system keeps information about manual validations. The nurse is not
33         modeled as an object in this standard. Therefore, the charting system uses a relation
34         entry as an additional attribute of the Numeric object, e.g., {relation-type = validated-
35         by; related-object = Nurse; relation-attributes = {name, “C. Smith,” date, “041295”}}

36   The external object relation list data type is a very powerful concept to extend the
37   information model without really defining additional classes of objects.

38   6.2 Top class

39   Class:                      Top
40   Description:                “The Top class is the common inheritance base for most of the classes in the DIM.”

                                                              61
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                             APPROVED DRAFT




                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                               IEEE P11073-10201/D2.1.109, September October 2018



 1   Superclass:             --
 2   Subclasses:             PM-Segment, VMO, Battery, Clock, Log, VMS, Operation, Scanner,
 3                           CommunicationController,      MultiPatientArchive,     PatientArchive, Physician,
 4                           SessionArchive, SessionNotes, SessionTest, PatientDemographics
 5   Name Binding:           -
 6   Registered As:          MDC_MOC_TOP

 7   6.2.1 Attributes

 8   The Top class defines the attributes in Table 1.

 9                                Table 1 —Top class attributes
       Attribute name       Attribute ID         Attribute type                  Remark                    Qualifier
      Class              MDC_ATTR_CLASS         OID-Type            Defines the ID of the class; IDs       M
                                                                    come from the object-oriented
                                                                    nomenclature partition.
      Name-Binding       MDC_ATTR_NAME_         OID-Type            Defines ID of Name Binding             M
                         BINDING                                    attribute, e.g., HANDLE; IDs
                                                                    come from the object-oriented
                                                                    nomenclature partition.
10
11   The Top class does not define any attribute groups.

12   6.2.2 Behavior

13   The Top class does not define any special methods.
14   6.2.3 Notifications

15   The Top class defines the events in Table 2.

16                                         Table 2 —Top events
              Event                Mode                     Event ID                Event              Event result
                                                                                  parameter
      Attribute-Update     Confirmed/Unconfirmed     MDC_NOTI_ATTR_            AttributeList           —
                                                     UPDATE
17
18   The attribute update notification allows all objects to communicate their attribute values
19   with a generic event report. However, the use of this notification for systems with multiple
20   object instances is not recommended. Instead, Scanner objects should be used.

21   6.3 Medical package

22   6.3.1 VMO class

23   Class:                  VMO
24   Description:            “The VMO is the base class for all medical-related classes in the model. It provides
25                           consistent naming and identification across the Medical Package model. As a base class,
26                           the VMO cannot be instantiated.”
27   Superclass:             Top
28   Subclasses:             Alert, AlertStatus, AlertMonitor, Channel, Metric, PM-Store, VMD, SCO


                                                          62
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   Name Binding:                   Handle (the value of the Handle attribute is sufficient for unique identification of an
 2                                   instance of a VMO-derived class in a device system)
 3   Registered As:                  MDC_MOC_VMO

 4   6.3.1.1 Attributes

 5   The VMO class defines the attributes in Table 3.

 6                                       Table 3 —VMO class attributes
      Attribute name           Attribute ID             Attribute type                  Remark                  Qualifier
      Type                MDC_ATTR_ID_                TYPE                  Defines a specific static type of   M
                          TYPE                                              this object, as defined in the
                                                                            object-oriented or metric
                                                                            nomenclature partition.
      Handle              MDC_ATTR_ID_                HANDLE                Locally unique short-hand           M
                          HANDLE                                            identification.
      Label-String        MDC_ATTR_ID_                OCTET STRING          Textual representation of type      O
                          LABEL_STRING                                      ID.
      Ext-Obj-            MDC_ATTR_EXT_               ExtObjRelationList    Relations to objects that are not   O
      Relations           OBJ_RELATION                                      defined in the DIM.
 7
 8   The VMO class defines in Table 4 the attribute groups or extensions to inherited attribute
 9   groups.

10                                   Table 4 —VMO class attribute groups
             Attribute group                      Attribute group ID                           Group elements
      VMO Static Context Group            MDC_ATTR_GRP_VMO_STATIC               from VMO:
      (extensible attribute group)                                              Type, Handle
      VMO Dynamic Context                 MDC_ATTR_GRP_VMO_DYN                  from VMO:
      Group                                                                     Label-String
      (extensible attribute group)
      Relationship Attribute Group        MDC_ATTR_GRP_RELATION                 from VMO:
                                                                                Ext-Obj-Relations
11
12   6.3.1.2 Behavior

13   The VMO class does not define any special methods.
14   6.3.1.3 Notifications

15   The VMO class does not generate any special notifications.
16   6.3.2 VMD class

17   Class:                          VMD
18   Description:                    “The VMD class is an abstraction of a medical-related subsystem (e.g., hardware or even
19                                   pure software) of a medical device.”
20   Superclass:                     VMO
21   Subclasses:                     --
22   Name Binding:                   Handle (VMO inherited)
23   Registered As:                  MDC_MOC_VMO_VMD

                                                               63
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1   6.3.2.1 Attributes

2   The VMD class defines the attributes in Table 5.

3                                      Table 5 —VMD class attributes
     Attribute name            Attribute ID           Attribute type                  Remark                   Qualifier
     Vmd-Status           MDC_ATTR_VMD_              VMDStatus           Example: on.                          M
                          STAT
     Vmd-Model            MDC_ATTR_ID_               SystemModel         Manufacturer and model number.        O
                          MODEL
     Instance-Number      MDC_ATTR_ID_               InstNumber          If multiple instances of the same     O
                          INSTNO                                         VMD exist, this attribute helps to
                                                                         order the sequence.
     Production-          MDC_ATTR_ID_               ProductionSpec      Serial numbers and revisions;         O
     Specification        PROD_SPECN                                     only present if VMD represents
                                                                         an independent subsystem.
     Udi                  MDC_ATTR_ID_UDI            UdiSpec             This attribute defines the UDI(s)     O
                                                                         under which this product is listed
                                                                         with an authority such as the US
                                                                         FDA.
     Compatibility-Id     MDC_ATTR_ID_               INT-U32             Static for manufacturer use.          O
                          COMPAT
     Parameter-Group      MDC_ATTR_ID_               OID-Type            Example: cardiovascular.              O
                          PARAM_GRP
     Position             MDC_ATTR_ID_               INT-U16             Example: slot number 0xffff           O
                          POSN                                           marks an invalid or unknown
                                                                         position.
     Operating-Hours      MDC_ATTR_TIME_             INT-U32                                                   O
                          PD_OP_HRS
     Operation-Cycles     MDC_ATTR_CYC_OP            INT-U32             Example: number of                    O
                                                                         measurements taken.
     Measurement-         MDC_ATTR_MSMT_             MsmtPrinciple       Describes the physical principle      O
     Principle            PRINCIPLE                                      of the measurement.
     Locale               MDC_ATTR_                  Locale              Defines charset and language of       O
                          LOCALE                                         printable string attributes in this
                                                                         VMD and contained objects.
4
5   Identification and revision attributes are not needed if the VMD does not represent a
6   hardware component.

7   The VMD class defines in Table 6 the attribute groups or extensions to inherited attribute
8   groups.

9                                   Table 6 —VMD class attribute groups
           Attribute group                     Attribute group ID                           Group elements
     VMO Static Context Group          MDC_ATTR_GRP_VMO_STATIC                from VMO:
     (extensible attribute group)                                             Type, Handle
                                                                              from VMD:
                                                                              Instance-Number, Compatibility-Id,
                                                                              Parameter-Group, Measurement-Principle,
                                                                              Locale

                                                              64
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



             Attribute group                      Attribute group ID                             Group elements
      VMO Dynamic Context                 MDC_ATTR_GRP_VMO_DYN                    from VMO:
      Group                                                                       Label-String
      (extensible attribute group)                                                from VMD:
                                                                                  Vmd-Status
      VMD Production Attribute            MDC_ATTR_GRP_VMD_PROD                   from VMD:
      Group                                                                       Vmd-Model, Production-Specification,
                                                                                  Udi
      VMD Application Attribute           MDC_ATTR_GRP_VMD_APPL                   from VMD:
      Group                                                                       Position, Operating-Hours, Operation-
                                                                                  Cycles

      NOTE—A separate attribute group is defined for VMD static attributes that are needed only in special applications.

 1
 2   The following ASN.1 data type definitions apply:
 3     --
 4     -- VMD status indication bits; all bits 0 indicate that VMD is operational
 5     --
 6     VMDStatus ::= BITS-16 {
 7         vmd-off(0),
 8         vmd-not-ready(1),                  -- e.g. for an infusion pump that is not ready
 9         vmd-standby(2),                    -- e.g. for device powered but not active
10         vmd-transduc-discon(8),            -- transducer disconnected
11         vmd-hw-discon(9)                   -- measurement hardware disconnected
12     }

13     --
14     -- Physical principle of the measurement (multiple bits may be set)
15     --
16     MsmtPrinciple ::= BITS-16 {
17          msp-other(0),
18          msp-chemical(1),
19          msp-electrical(2),
20          msp-impedance(3),
21          msp-nuclear(4),
22          msp-optical(5),
23          msp-thermal(6),
24          msp-biological(7),
25          msp-mechanical(8),
26          msp-acoustical(9),
27          msp-manual(15)
28     }

29   6.3.2.2 Behavior

30   The VMD class does not define any special methods.
31   6.3.2.3 Notifications

32   The VMD class does not generate any special notifications.
33   6.3.3 Channel class

34   Class:                          Channel
35   Description:                    “Channel objects are used for grouping Metric objects that have a contextual relationship
36                                   with each other.”

                                                                65
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   Superclass:                     VMO
 2   Subclasses:                     --
 3   Name Binding:                   Handle (VMO inherited)
 4   Registered As:                  MDC_MOC_VMO_CHAN

 5   6.3.3.1 Attributes

 6   The Channel class defines the attributes in Table 7.

7                                     Table 7 —Channel class attributes
       Attribute name            Attribute ID         Attribute type                  Remark                   Qualifier
      Channel-Id           MDC_ATTR_CHAN_            OID-Type            Dynamic identification.               O
                           ID
      Channel-Status       MDC_ATTR_CHAN_            ChannelStatus       Example: Transducer                   O
                           STAT                                          Disconnected.
      Physical-            MDC_ATTR_CHAN_            INT-U16             Provides a reference to a             O
      Channel-No           NUM_PHYS                                      particular hardware channel, e.g.,
                                                                         A/D.
      Logical-Channel-     MDC_ATTR_CHAN_            INT-U16             Dynamic channel numbering.            O
      No                   NUM_LOGICAL
      Parameter-Group      MDC_ATTR_ID_              OID-Type            Static group of metrics, e.g.,        O
                           PARAM_GRP                                     cardiovascular.
      Measurement-         MDC_ATTR_MSMT_            MsmtPrinciple       Describes the physical principle of   O
      Principle            PRINCIPLE                                     the measurement.
      Color                MDC_ATTR_COLOR            SimpleColour        Useful to assign a common color       O
                                                                         to objects in one channel.
 8
 9   The Channel class defines in Table 8 the attribute groups or extensions to inherited attribute
10   groups.

11                              Table 8 —Channel class attribute groups
              Attribute group                   Attribute group ID                          Group elements
      VMO Static Context Group             MDC_ATTR_GRP_VMO_STATIC            from VMO:
      (extensible attribute group)                                            Type, Handle
                                                                              from Channel:
                                                                              Physical-Channel-No, Parameter-Group,
                                                                              Measurement-Principle
      VMO Dynamic Context                  MDC_ATTR_GRP_VMO_DYN               from VMO:
      Group                                                                   Label-String
      (extensible attribute group)                                            from Channel:
                                                                              Channel-Id, Channel-Status, Logical-
                                                                              Channel-No, Color
12
13   The following ASN.1 data type definitions apply:
14     --
15     -- Channel Status indication bits
16     --
17     ChannelStatus ::= BITS-16 {
18          chan-off(0),
19          chan-not-ready(1),
20          chan-standby(2),
21          chan-transduc-discon(8),

                                                               66
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1         chan-hw-discon(9)
 2     }

 3   6.3.3.2 Behavior

 4   The Channel class does not define any special methods.
 5   6.3.3.3 Notifications

 6   The Channel class does not generate any special notifications.

 7   6.3.4 Metric class

 8   Class:                      Metric
 9   Description:                “The Metric class is the base class for all classes representing direct and derived,
10                               quantitative and qualitative biosignal measurement, status, and context data. It is a base
11                               class that is used for inheritance only.”
12   Superclass:                 VMO
13   Subclasses:                 ComplexMetric, Enumeration, Numeric, SampleArray
14   Name Binding:               Handle (VMO inherited)
15   Registered As:              MDC_MOC_VMO_METRIC

16   6.3.4.1 Attributes

17   The Metric class defines the attributes in Table 9.

18                                  Table 9 —Metric class attributes
      Attribute name           Attribute ID           Attribute type                  Remark                   Qualifier
      Metric-           MDC_ATTR_                  MetricSpec             Static; mandatory basic             M
      Specification     METRIC_SPECN                                      properties.
      Max-Delay-        MDC_ATTR_                  RelativeTime           Static; maximum delay to real       O
      Time              DELAY_TIME_MAX                                    time.
      Metric-Status     MDC_ATTR_                  MetricStatus                                               O
                        METRIC_STAT
      Measurement-      MDC_ATTR_                  MeasurementStatus      Usually part of an observed         O
      Status            MSMT_STAT                                         value.
      Metric-Id-        MDC_ATTR_                  NomPartition           Identifies the nomenclature         O
      Partition         METRIC_ID_PART                                    partition associated with the
                                                                          MetricId if it is different from
                                                                          the partition specified in the
                                                                          object’s VMO::Type attribute.
      Metric-Id         MDC_ATTR_ID_               OID-Type               Contains dynamic identification     O
                        PHYSIO                                            (e.g., a specific blood pressure
                                                                          label) compared to the static,
                                                                          generic ID in the
                                                                          MetricSpecification. OID is
                                                                          from VMO::Type or Metric-Id-
                                                                          Partition partition. Usually this
                                                                          attribute is part of an observed
                                                                          value, not an individual
                                                                          attribute.




                                                              67
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



    Attribute name        Attribute ID           Attribute type                   Remark                   Qualifier
    Metric-Id-Ext      MDC_ATTR_ID_           ExtNomenRef            Dynamic identification of the         O
                       MSMT_EXT                                      metric in a different
                                                                     nomenclature or dictionary. Use
                                                                     of this attribute severely limits
                                                                     interoperability of applications.
    Unit-Code          MDC_ATTR_UNIT_         OID-Type               Example: mmHG;, usually part          O
                       CODE                                          of observed value.
    Unit-Labelstring   MDC_ATTR_UNIT_         OCTET STRING           Textual representation of             O
                       LABEL_STRING                                  dimension.
    Vmo-Source-        MDC_ATTR_VMO_          VmoSourceList          Indicates sources of this metric      O
    List               LIST_SRC                                      in the form of references to
                                                                     other metrics.
    Metric-Source-     MDC_ATTR_              MetricSourceList       Indicates sources of this metric      O
    List               METRIC_LIST_SRC                               in the form of a list of metric
                                                                     IDs.
    Msmt-Site-List     MDC_ATTR_SITE_         SiteList               Measurement sites, specified in       O
                       LIST_MSMT                                     internal nomenclature.
    Msmt-Site-List-    MDC_ATTR_SITE_         SiteListExt            Measurement sites, specified in       O
    Ext                LIST_MSMT_EXT                                 external nomenclature.
    Body-Site-List     MDC_ATTR_SITE_         SiteList               Body sites, specified in internal     O
                       LIST_BODY                                     nomenclature.
    Body-Site-List-    MDC_ATTR_SITE_         SiteListExt            Body sites, specified in external     O
    Ext                LIST_BODY_EXT                                 nomenclature.
    Metric-            MDC_ATTR_              MetricCalibration      Indicates type and last time of       O
    Calibration        METRIC_CALIB                                  calibration.
    Color              MDC_ATTR_              SimpleColour           Color for representation.             O
                       COLOR
    Measure-Mode       MDC_ATTR_              PrivateOid             Manufacturer-specific                 O
                       MODE_MSMT                                     measurement information.
    Measure-Period     MDC_ATTR_TIME_         MetricMeasure          Measurement repetition time;          O
                       PD_MSMT                                       not necessarily the same as
                                                                     update period.
    Averaging-         MDC_ATTR_TIME_         MetricMeasure          Time period used to average           O
    Period             PD_AVG                                        values, e.g., a metric for the
                                                                     average flow of last hour.
    Start-Time         MDC_ATTR_TIME_         AbsoluteTime           Time when measurement                 O
                       START                                         activity was started, e.g., when
                                                                     infusion was started.
    Stop-Time          MDC_ATTR_TIME_         AbsoluteTime           Time when measurement                 O
                       STOP                                          activity was stopped.
    Metric-Info-       MDC_ATTR_              OCTET STRING           Textual attribute, e.g., to specify   O
    Labelstring        METRIC_INFO_                                  electrode displacements or other
                       LABEL_STRING                                  specific information about the
                                                                     measurement.
    Substance          MDC_ATTR_ID_           ExtNomenRef            Substance to which a metric           O
                       SUBSTANCE                                     pertains; expressed in
                                                                     nomenclature that is defined
                                                                     outside of this standard.
    Substance-         MDC_ATTR_ID_           OCTET STRING           Textual attribute that identifies     O
    Labelstring        SUBSTANCE_                                    the substance.
                       LABEL_STRING
1

                                                         68
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1    The Metric class defines in Table 10 the attribute groups or extensions to inherited attribute
2    groups.

 3                              Table 10 —Metric class attribute groups
           Attribute group                      Attribute group ID                              Group elements
      VMO Static Context Group       MDC_ATTR_GRP_VMO_STATIC                        from VMO:
      (extensible attribute group)                                                  Type, Handle
                                                                                    from Metric:
                                                                                    Metric-Specification, Max-Delay-Time
      VMO Dynamic Context            MDC_ATTR_GRP_VMO_DYN                           from VMO:
      Group                                                                         Label-String
      (extensible attribute group)                                                  from Metric:
                                                                                    Metric-Status, Measurement-Status,
                                                                                    Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                    Unit-
                                                                                    Labelstring, Vmo-Source-List, Metric-
                                                                                    Source-List, Msmt-Site-List, Body-
                                                                                    Site-
                                                                                    List, Metric-Calibration, Color,
                                                                                    Measure-
                                                                                    Mode, Measure-Period, Averaging-
                                                                                    Period,
                                                                                    Start-Time, Stop-Time, Metric-Info-
                                                                                    Labelstring, Substance, Substance-
                                                                                    Labelstring, Body-Site-List-Ext, Msmt-
                                                                                    Site-
                                                                                    List-Ext
      Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                    from Metric:
      Group                                                                         Metric-Id-Partition
      (extensible attribute group)
4
5    The following ASN.1 data type definitions apply:
 6    --
 7    -- Metric-Status attribute
 8    --
 9    MetricStatus ::= BITS-16 {
10        metric-off(0),
11        metric-not-ready(1),
12        metric-standby(2),
13        metric-transduc-discon(8),
14        metric-hw-discon(9)
15    }

16    --
17    -- The Metric-Specification attribute defines all mandatory static properties of a Metric object
18    --
19    MetricSpec ::= SEQUENCE {
20         update-period                    RelativeTime,       -- minimum time between changes of observed value
21         category                         MetricCategory,
22         access                           MetricAccess,
23         structure                        MetricStructure,
24         relevance                        MetricRelevance
25    }

26    --
27    -- Structure describes if the object represents a single value or multiple related values (e.g., an invasive blood
28    -- pressure could be compound when it represents a pulsatile pressure and derives systolic, diastolic, and mean
                                                               69
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



1    -- values)
2    --
3    MetricStructure ::= SEQUENCE {
4         ms-struct                       MetricComplexity,
5         ms-comp-no                      INT-U8            -- maximum number of components in
6                                                           -- compound/complex
7    }

 8   --
 9   -- The MetricComplexity value facilitates differentiation between simple, compound, and complex metric structures
10   --
11   MetricComplexity ::= INT-U8 {
12        simple(0),
13        compound(1),                    -- multiple observed values, same dynamic context
14        complex(2)                      -- multiple observed values, multiple dynamic contexts)
15   }

16   --
17   -- The MetricAccess bit field provides information on how it is possible to access the metric value and when a new
18   -- value is available
19   --
20   -- NOTES
21   -- 1--The avail-intermittent flag shall be set if the observed value is not always available
22   -- 2--Exactly one update mode bit (upd-) shall be set
23   -- 3--At least one access mode bit (acc-) shall be set
24   -- 4--It is possible to set scan option bits (sc-) only if the acc-scan bit is set
25   -- 5--If the acc-scan bit is set, at least one sc-opt bit shall be set
26   --
27   MetricAccess ::= BITS-16 {
28         avail-intermittent(0),               -- value is intermittently available
29         upd-periodic(1),                     -- value is periodically (fixed period) updated
30         upd-episodic(2),                     -- value is episodically updated
31         msmt-noncontinuous(3),               -- measurement is not continuous (e.g. NBP)
32         acc-evrep(4),                        -- metric sends event report for observed value
33         acc-get(5),                          -- metric supports explicit GET service
34         acc-scan(6),                         -- metric observed value is able to be accessed via Scanner object
35         gen-opt-sync(8),                     -- observed value shall be processed synchronously
36         sc-opt-normal(10),                   -- scan option: value can be scanned with update period
37         sc-opt-extensive(11),                -- scan option: in update period multiple values may occur
38         sc-opt-long-pd-avail(12),            -- scan option: value may be scanned slow (superpositive-avg scan bit)
39         sc-opt-confirm(13),                  -- scan option: scanner should operate in confirmed mode
40         sc-opt-refresh(14)                   -- scan option: a scan refresh operation is allowed
41   }

42   --
43   -- The metric category makes it possible to distinguish between measurements, settings, and calculations
44   --
45   MetricCategory ::= INT-U16 {
46        mcat-unspec(0),
47        auto-measurement(1),
48        manual-measurement(2),
49        auto-setting(3),
50        manual-setting(4),
51        auto-calculation(5),
52        manual-calculation(6)
53   }

54   --
55   -- Metric relevance defines in what way the metric should be used (i.e., a value of 0 means normal)
56   --
57   MetricRelevance ::= BITS-16 {


                                                            70
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



1         rv-unspec(0),                    -- relevance not specified; should normally not be used
2         rv-internal(1),                  -- an internally used value only
3         rv-store-only(2),                -- only relevant for storage
4         rv-no-recording(3),              -- not relevant for recording
5         rv-phys-ev-ind(4),               -- metric represents a physiological trigger (not a value)
6         rv-btb-metric(5),                -- metric is calculated for each beat or breath, not time-averaged
7         rv-app-specific(8),              -- dedicated application required to interpret the metric
8         rv-service(9)                    -- metric is intended for service or diagnostic purposes
9    }

10   --
11   -- The Metric-Calibration attribute defines calibration methods and times
12   -- NOTE--Multiple entries allowed
13   --
14   MetricCalibration ::= SEQUENCE OF MetricCalEntry

15   MetricCalEntry ::= SEQUENCE {
16       cal-type     MetricCalType,
17       cal-state    MetricCalState,
18       cal-time     AbsoluteTime
19   }

20   MetricCalType ::= INT-U16 {
21       cal-unspec(0),
22       cal-offset(1),                    -- offset calibration
23       cal-gain(2),                      -- gain calibration
24       cal-two-point(3)                  -- two-point calibration
25   }

26   MetricCalState ::= INT-U16 {
27       not-calibrated(0),
28       cal-required(1),
29       calibrated(2)
30   }

31   --
32   -- Ordered list of measurement sites, e.g., EEG electrode positions
33   -- Entries are from body site nomenclature partition
34   --
35   SiteList ::= SEQUENCE OF OID-Type

36   --
37   -- Site list may also refer to external nomenclatures to specify measurement sites
38   --
39   SiteListExt ::= SEQUENCE OF ExtNomenRef

40   --
41   -- Metric-Source-List attribute is an ordered list of metric OIDs
42   -- OIDs from VMO::Type or Metric-Id-Partition partition
43   --
44   MetricSourceList ::= SEQUENCE OF OID-Type

45   --
46   -- Vmo-Source-List attribute defines references to other VMO-derived objects that are used as sources of this
47   -- metric (this is an ordered list)
48   --
49   VmoSourceList ::= SEQUENCE OF VmoSourceEntry

50   VmoSourceEntry ::= SEQUENCE {
51      vmo-type OID-Type,         -- from object-oriented nomenclature partition
52      glb-handle GLB-HANDLE

                                                              71
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1      }

 2     --
 3     -- Measurement-Status attribute defines the state of the measurement; used by derived classes
 4     --
 5     MeasurementStatus ::= BITS-16 {
 6         invalid(0),
 7         questionable(1),
 8         not-available(2),
 9         calibration-ongoing(3),
10         test-data(4),
11         demo-data(5),
12         validated-data(8),               -- relevant e.g. in an archive
13         early-indication(9),             -- early estimate of value
14         msmt-ongoing(10),                -- indicates that a new measurement is just being taken (episodic)
15         msmt-state-in-alarm(14),         -- indicates that the metric has an active alert condition
16         msmt-state-al-inhibited(15)      -- metric supports alarming, and alarms are turned off (optional)
17     }

18     --
19     -- In a number of derived metrics, specification of ranges is necessary
20     -- A type for this is defined here in the base class
21     --
22     AbsoluteRange ::= SEQUENCE {
23           lower-value FLOAT-Type,
24           upper-value FLOAT-Type
25     }

26     --
27     -- Metric measure is used for attributes that have a value and a dimension
28     --
29     MetricMeasure ::= SEQUENCE {
30         value        FLOAT-Type,
31         unit-code OID-Type                 -- from dimensions nomenclature partition
32     }

33   6.3.4.2 Behavior

34   The Metric class does not define any special methods.
35   6.3.4.3 Notifications

36   The Metric class does not generate any special notifications.
37   6.3.5 Numeric class

38   Class:                        Numeric
39   Description:                  “The Numeric class represents numerical measurements and status information, e.g.,
40                                 amplitude measures, counters.”
41   Superclass:                   Metric
42   Subclasses:                   --
43   Name Binding:                 Handle (VMO inherited)
44   Registered As:                MDC_MOC_VMO_METRIC_NU

45   6.3.5.1 Attributes

46   The Numeric class defines the attributes in Table 11.


                                                               72
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1                                   Table 11 —Numeric class attributes
     Attribute name           Attribute ID           Attribute type                    Remark                 Qualifier
     Nu-Observed-         MDC_ATTR_NU_            NuObsValue               Example: measurement value;        Ca
     Value                VAL_OBS                                          should also contain validity
                                                                           information to be useful.
     Compound-Nu-         MDC_ATTR_NU_            NuObsValueCmp            Used when multiple values are      C
     Observed-Value       CMPD_VAL_OBS                                     represented in a single Numeric
                                                                           object. (Structure is
                                                                           compound.)
     Absolute-Time-       MDC_ATTR_               AbsoluteTime             Time of observation                O
     Stamp                TIME_STAMP_                                      (timestamp).
                          ABS
     Relative-Time-       MDC_ATTR_               RelativeTime                                                O
     Stamp                TIME_STAMP_
                          REL
     Hires-Time-          MDC_ATTR_               HighResRelativeTime      High-resolution timestamp.         O
     Stamp                TIME_STAMP_
                          REL_HI_RES
     Nu-Measure-          MDC_ATTR_NU_            AbsoluteRange            Potential measurement range.       O
     Range                RANGE_MSMT
     Nu-                  MDC_ATTR_NU_            AbsoluteRange            Physiological reasonable range     O
     Physiological-       RANGE_PHYSIO                                     (note that this is not an
     Range                                                                 alarming range).
     Nu-Measure-          MDC_ATTR_NU_            FLOAT-Type               Resolution of measurement;         O
     Resolution           MSMT_RES                                         minimum difference between
                                                                           two observed values.
     Display-             MDC_ATTR_DISP_          DispResolution           Used when different resolution     O
     Resolution           RES                                              is needed when value is
                                                                           displayed.
     Accuracy             MDC_ATTR_NU_            FLOAT-Type               Maximum deviation of actual        O
                          ACCUR_MSMT                                       value from reported observed
                                                                           value (if it can be specified).
     a
2     Exactly one observed value type shall be present as defined by the Metric-Specification
3    attribute.
4
5   The Numeric class defines in Table 12 the attribute groups or extensions to inherited
6   attribute groups.

7                            Table 12 —Numeric class attribute groups
          Attribute group                      Attribute group ID                            Group elements
     VMO Static Context Group        MDC_ATTR_GRP_VMO_STATIC                     from VMO:
     (extensible attribute group)                                                Type, Handle
                                                                                 from Metric:
                                                                                 Metric-Specification, Max-Delay-Time
     VMO Dynamic Context             MDC_ATTR_GRP_VMO_DYN                        from VMO:
     Group                                                                       Label-String
     (extensible attribute group)                                                from Metric:
                                                                                 Metric-Status, Measurement-Status,
                                                                                 Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                 Unit-
                                                                                 Labelstring, Vmo-Source-List, Metric-



                                                              73
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



           Attribute group                      Attribute group ID                            Group elements
                                                                                   Source-List, Msmt-Site-List, Body-
                                                                                   Site-
                                                                                   List, Metric-Calibration, Color,
                                                                                   Measure-
                                                                                   Mode, Measure-Period, Averaging-
                                                                                   Period,
                                                                                   Start-Time, Stop-Time, Metric-Info-
                                                                                   Labelstring, Substance, Substance-
                                                                                   Labelstring, Body-Site-List-Ext, Msmt-
                                                                                   Site-
                                                                                   List-Ext
                                                                                   from Numeric:
                                                                                   Nu-Measure-Range, Nu-Physiological-
                                                                                   Range, Nu-Measure-Resolution,
                                                                                   Display-
                                                                                   Resolution, Accuracy
      Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                   from Metric:
      Group                                                                        Metric-Id-Partition
      (extensible attribute group)                                                 from Numeric:
                                                                                   Nu-Observed-Value, Absolute-Time-
                                                                                   Stamp, Relative-Time-Stamp, Hires-
                                                                                   Time-
                                                                                   Stamp, Compound-Nu-Observed-
                                                                                   Value
 1
 2   The following ASN.1 data type definitions apply:
 3    --
 4    -- Nu-Observed-Value attribute always includes identification, state, and dimension to ensure consistency with
 5    -- minimal overhead
 6    --
 7    NuObsValue ::= SEQUENCE {
 8         metric-id OID-Type,                                -- from VMO::Type or Metric-Id-Partition partition
 9         state       MeasurementStatus,                     -- defined in Metric base
10         unit-code OID-Type,                                -- from dimensions nomenclature partition
11         value       FLOAT-Type
12    }

13    --
14    -- Observed value for compound numerics
15    --
16    NuObsValueCmp ::= SEQUENCE OF NuObsValue

17    --
18    -- Display-Resolution attribute is the value representation on a display (may be lower resolution)
19    --
20    DispResolution ::= SEQUENCE {
21         pre-point INT-U8,                 -- digits before decimal point
22         post-point INT-U8                 -- digits after decimal point
23    }

24   6.3.5.2 Behavior

25   The Numeric class does not define any special methods.




                                                               74
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   6.3.5.3 Notifications

 2   The Numeric class does not generate any special notifications.

 3   6.3.6 SampleArray class

 4   Class:                    SampleArray
 5   Description:              “The SampleArray class is the base class for metrics that have a graphical, curve type
 6                             presentation and, therefore, have their observation values reported as arrays of data points
 7                             by communicating systems.”
 8   Superclass:               Metric
 9   Subclasses:               DistributionSampleArray, RealTimeSampleArray, TimeSampleArray
10   Name Binding:             Handle (VMO inherited)
11   Registered As:            MDC_MOC_VMO_METRIC_SA

12   6.3.6.1 Attributes

13   The SampleArray class defines the attributes in Table 13.

14                           Table 13 —SampleArray class attributes
       Attribute name        Attribute ID           Attribute type                   Remark                   Qualifier
      Sa-Observed-        MDC_ATTR_SA_           SaObsValue              Example: array of measurement        Ca
      Value               VAL_OBS                                        values.
      Compound-Sa-        MDC_ATTR_SA_           SaObsValueCmp                                                C
      Observed-Value      CMPD_VAL_OBS
      Sa-Specification    MDC_ATTR_SA_           SaSpec                  Static description of sample         M
                          SPECN                                          array and sample types.
      Compression         MDC_ATTR_              PrivateOid              Defines potential compression        O
                          COMPRES                                        algorithm.
      Scale-And-          MDC_ATTR_              ScaleRangeSpec8         Defines mapping between              C
      Range-              SCALE_SPECN_I8                                 samples and actual values as
      Specification-8                                                    well as measurement range; type
                                                                         depends on sample size. Exactly
                                                                         one of the following attributes
                                                                         shall be implemented for any
                                                                         SampleArray object: Scale-And-
                                                                         Range-Specification-8, Scale-
                                                                         And-Range-Specification-16,
                                                                         Scale-And-Range-Specification-
                                                                         32.
      Scale-And-          MDC_ATTR_              ScaleRangeSpec16        Defines mapping between              C
      Range-              SCALE_SPECN_I16                                samples and actual values as
      Specification-16                                                   well as measurement range; type
                                                                         depends on sample size. Exactly
                                                                         one of the following attributes
                                                                         shall be implemented for any
                                                                         SampleArray object: Scale-And-
                                                                         Range-Specification-8, Scale-
                                                                         And-Range-Specification-16,
                                                                         Scale-And-Range-Specification-
                                                                         32.




                                                            75
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                        APPROVED DRAFT




                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                          IEEE P11073-10201/D2.1.109, September October 2018



Attribute name        Attribute ID          Attribute type                    Remark                Qualifier
Scale-And-         MDC_ATTR_              ScaleRangeSpec32       Defines mapping between            C
Range-             SCALE_SPECN_I32                               samples and actual values as
Specification-32                                                 well as measurement range; type
                                                                 depends on sample size. Exactly
                                                                 one of the following attributes
                                                                 shall be implemented for any
                                                                 SampleArray object: Scale-And-
                                                                 Range-Specification-8, Scale-
                                                                 And-Range-Specification-16,
                                                                 Scale-And-Range-Specification-
                                                                 32.
Sa-                MDC_ATTR_SA_           ScaledRange8           For optimum display scaling, the   O
Physiological-     RANGE_PHYS_I8                                 physiologically meaningful
Range-8                                                          range is specified.
Sa-                MDC_ATTR_SA_           ScaledRange16          For optimum display scaling, the   O
Physiological-     RANGE_PHYS_I16                                physiologically meaningful
Range-16                                                         range is specified.
Sa-                MDC_ATTR_SA_           ScaledRange32          For optimum display scaling, the   O
Physiological-     RANGE_PHYS_I32                                physiologically meaningful
Range-32                                                         range is specified.
Visual-Grid-8      MDC_ATTR_GRID_         SaVisualGrid8          Defines gridline positions on      O
                   VIS_I8                                        displays and recorders; type
                                                                 depends on sample size.
Visual-Grid-16     MDC_ATTR_GRID_         SaVisualGrid16         Defines gridline positions on      O
                   VIS_I16                                       displays and recorders; type
                                                                 depends on sample size.
Visual-Grid-32     MDC_ATTR_GRID_         SaVisualGrid32         Defines gridline positions on      O
                   VIS_I32                                       displays and recorders; type
                                                                 depends on sample size.
Sa-Calibration-    MDC_ATTR_SA_           SaCalData8             Defines positions of calibration   O
Data-8             CALIB_I8                                      markers on display and
                                                                 recorders; type depends on
                                                                 sample size.
Sa-Calibration-    MDC_ATTR_SA_           SaCalData16            Defines positions of calibration   O
Data-16            CALIB_I16                                     markers on display and
                                                                 recorders; type depends on
                                                                 sample size.
Sa-Calibration-    MDC_ATTR_SA_           SaCalData32            Defines positions of calibration   O
Data-32            CALIB_I32                                     markers on display and
                                                                 recorders; type depends on
                                                                 sample size.
Filter-            MDC_ATTR_              SaFilterSpec                                              O
Specification      FILTER_SPECN
Filter-Label-      MDC_ATTR_              OCTET STRING           Text label of an active filter,    O
String             FILTER_LABEL_                                 e.g., ‘Butterworth’ or
                   STRING                                        ‘LinearPhase.’
Sa-Signal-         MDC_ATTR_SA_           SaSignalFrequency      Maximum signal frequency.          O
Frequency          FREQ_SIG
Sa-Measure-        MDC_ATTR_SA_           FLOAT-Type                                                O
Resolution         MSMT_RES
Sa-Marker-List-8   MDC_ATTR_SA_           MarkerListSaVal8                                          O
                   MARKER_LIST_I8
Sa-Marker-List-    MDC_ATTR_SA_           MarkerListSaVal16                                         O
16                 MARKER_LIST_I16

                                                     76
                                  Copyright © 2018 IEEE. All rights reserved.
                       This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



     Attribute name            Attribute ID          Attribute type                   Remark                 Qualifier
     Sa-Marker-List-      MDC_ATTR_SA_             MarkerListSaVal32                                         O
     32                   MARKER_LIST_I32
     a
1     Exactly one observed value type shall be present as defined by the Metric-Specification
2    attribute.
3
4   The SampleArray class defines in Table 14 the attribute groups or extensions to inherited
5   attribute groups.

6                        Table 14 —SampleArray class attribute groups
          Attribute group                      Attribute group ID                           Group elements
     VMO Static Context Group       MDC_ATTR_GRP_VMO_STATIC                      from VMO:
     (extensible attribute group)                                                Type, Handle
                                                                                 from Metric:
                                                                                 Metric-Specification, Max-Delay-Time
                                                                                 from SampleArray:
                                                                                 Sa-Specification, Compression, Sa-
                                                                                 Marker-
                                                                                 List-8, Sa-Marker-List-16, Sa-Marker-
                                                                                 List-32
     VMO Dynamic Context            MDC_ATTR_GRP_VMO_DYN                         from VMO:
     Group                                                                       Label-String
     (extensible attribute group)                                                from Metric:
                                                                                 Metric-Status, Measurement-Status,
                                                                                 Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                 Unit-
                                                                                 Labelstring, Vmo-Source-List, Metric-
                                                                                 Source-List, Msmt-Site-List, Body-
                                                                                 Site-
                                                                                 List, Metric-Calibration, Color,
                                                                                 Measure-
                                                                                 Mode, Measure-Period, Averaging-
                                                                                 Period,
                                                                                 Start-Time, Stop-Time, Metric-Info-
                                                                                 Labelstring, Substance, Substance-
                                                                                 Labelstring, Body-Site-List-Ext, Msmt-
                                                                                 Site-
                                                                                 List-Ext
                                                                                 from SampleArray:
                                                                                 Scale-And-Range-Specification-8, Sa-
                                                                                 Physiological-Range-8, Visual-Grid-8,
                                                                                 Sa-
                                                                                 Calibration-Data-8, Filter-
                                                                                 Specification,
                                                                                 Filter-Label-String, Sa-Signal-
                                                                                 Frequency,
                                                                                 Sa-Measure-Resolution, Scale-And-
                                                                                 Range-
                                                                                 Specification-16, Scale-And-Range-
                                                                                 Specification-32, Sa-Physiological-
                                                                                 Range-16, Sa-Physiological-Range-32,
                                                                                 Visual-Grid-16, Visual-Grid-32, Sa-
                                                                                 Calibration-Data-16, Sa-Calibration-
                                                                                 Data-32
     Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                  from Metric:
     Group                                                                       Metric-Id-Partition
     (extensible attribute group)                                                from SampleArray:

                                                              77
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



          Attribute group                       Attribute group ID                              Group elements
                                                                                    Sa-Observed-Value, Compound-Sa-
                                                                                    Observed-Value
1
2    The following ASN.1 data type definitions apply:
 3    --
 4    -- Sa-Observed-Value attribute
 5    --
 6    SaObsValue ::= SEQUENCE {
 7         metric-id OID-Type,                                   -- from VMO::Type or Metric-Id-Partition partition
 8         state      MeasurementStatus,                         -- defined in Metric base class
 9         array      OCTET STRING
10    }

11    --
12    -- Compound-Sa-Observed-Value attribute is the compound observed value
13    --
14    SaObsValueCmp ::= SEQUENCE OF SaObsValue

15    --
16    -- Sa-Specification attribute
17    --
18    SaSpec ::= SEQUENCE {
19         array-size                        INT-U16,            -- number of samples per metric update period
20         sample-type                       SampleType,
21         flags                             SaFlags
22    }

23    -- Sample type describes one sample in the observed value array
24    --
25    SampleType ::= SEQUENCE {
26         sample-size                    INT-U8,             -- e.g. 8 for 8bit samples, 16 for 16bit samples, shall be
27                                                            -- divisible by 8
28         significant-bits               SignificantBits     -- defines significant bits in one sample; if value is 255,
29                                                            -- the samples are signed; all bits are significant;
30                                                            -- samples are interpreted in twos complement
31    }

32    SignificantBits ::= INT-U8 {
33         signed-samples(255)
34    }

35    --
36    -- SaFlags data type defines additional wave form properties
37    --
38    SaFlags ::= BITS-16 {
39         smooth-curve(0),                 -- for optimum display, use a smoothing algorithm
40         delayed-curve(1),                -- curve is delayed (not real time)
41         static-scale(2),                 -- ScaleRangeSpec does not change
42         sa-ext-val-range(3)              -- the nonsignificant bits in a sample are not 0, e.g., when they are used for
43                                          -- annotations or markers; the receiver must apply a bit mask to extract the
44                                          -- significant bits from the sample
45    }

46    --
47    -- Specification of an applied signal filter
48    --
49    SaFilterSpec ::= SEQUENCE OF SaFilterEntry


                                                               78
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1    SaFilterEntry ::= SEQUENCE {
2         filter-type                        FilterType,
3         filter-frequency                   FLOAT-Type,
4         filter-order                       INT-I16              -- e.g. -1: 6 dB/oct
5    }

 6   FilterType ::= INT-U16 {
 7        other(0),
 8        low-pass(1),
 9        high-pass(2),
10        notch(3)
11   }

12   --
13   -- Scale-and-Range-Specification attribute describes a relation between scaled values and absolute values;
14   -- depending on the sample size, multiple attribute types exist
15   --
16   -- NOTE--If a wave does not represent absolute values, the absolute value fields should contain a special value; if
17   -- the Sa-Specification attribute indicates signed samples, the scaled values have to be interpreted as signed values
18   --
19   ScaleRangeSpec8 ::= SEQUENCE {
20         lower-absolute-value             FLOAT-Type,
21         upper-absolute-value             FLOAT-Type,
22         lower-scaled-value               INT-U8,
23         upper-scaled-value               INT-U8
24   }

25   ScaleRangeSpec16 ::= SEQUENCE {
26        lower-absolute-value      FLOAT-Type,
27        upper-absolute-value      FLOAT-Type,
28        lower-scaled-value        INT-U16,
29        upper-scaled-value        INT-U16
30   }

31   ScaleRangeSpec32 ::= SEQUENCE {
32        lower-absolute-value      FLOAT-Type,
33        upper-absolute-value      FLOAT-Type,
34        lower-scaled-value        INT-U32,
35        upper-scaled-value        INT-U32
36   }

37   --
38   -- Visual-Grid attribute defines grid lines at different levels of grid lines; if the Sa-Specification attribute indicates
39   -- signed samples, the scaled values have to be interpreted as signed values
40   --
41   SaVisualGrid8 ::= SEQUENCE OF SaGridEntry8

42   SaGridEntry8 ::= SEQUENCE {
43       absolute-value                      FLOAT-Type,
44       scaled-value                        INT-U8,
45       level                               INT-U8
46   }

47   SaVisualGrid16 ::= SEQUENCE OF SaGridEntry16

48   SaGridEntry16 ::= SEQUENCE {
49       absolute-value                      FLOAT-Type,
50       scaled-value                        INT-U16,
51       level                               INT-U16
52   }


                                                              79
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1   SaVisualGrid32 ::= SEQUENCE OF SaGridEntry32

2    SaGridEntry32 ::= SEQUENCE {
3        absolute-value                    FLOAT-Type,
4        scaled-value                      INT-U32,
5        level                             INT-U16
6    }

 7   --
 8   -- Sa-Calibration-Data attribute defines calibration markers on a display or on a recording strip; if the Sa-
 9   -- Specification attribute indicates signed samples, the scaled values have to be interpreted as signed values
10   --
11   SaCalData8 ::= SEQUENCE {
12        lower-absolute-value               FLOAT-Type,
13        upper-absolute-value               FLOAT-Type,
14        lower-scaled-value                 INT-U8,
15        upper-scaled-value                 INT-U8,
16        increment                          INT-U16,            -- scaled value for each step of the stair
17        cal-type                           SaCalDataType
18   }

19   SaCalData16 ::= SEQUENCE {
20       lower-absolute-value              FLOAT-Type,
21       upper-absolute-value              FLOAT-Type,
22       lower-scaled-value                INT-U16,
23       upper-scaled-value                INT-U16,
24       increment                         INT-U16,             -- scaled value for each step of the stair
25       cal-type                          SaCalDataType
26   }

27   SaCalData32 ::= SEQUENCE {
28       lower-absolute-value              FLOAT-Type,
29       upper-absolute-value              FLOAT-Type,
30       lower-scaled-value                INT-U32,
31       upper-scaled-value                INT-U32,
32       increment                         INT-U32,             -- scaled value for each step of the stair
33       cal-type                          SaCalDataType
34   }

35   SaCalDataType ::= INT-U16 {
36       bar(0),    -- display a calibration bar
37       stair(1)   -- display a calibration stair
38   }

39   --
40   -- Sa-Signal-Frequency attribute specifies the signal frequency
41   --
42   SaSignalFrequency ::= SEQUENCE {
43        low-edge-freq                   FLOAT-Type,
44        high-edge-freq                  FLOAT-Type            -- both in Hz
45   }

46   --
47   -- Sa-Physiological-Range attribute data types
48   -- If the Sa-Specification attribute indicates signed samples, the scaled values have to be interpreted as signed
49   -- values
50   --
51
52   ScaledRange8 ::= SEQUENCE {
53        lower-scaled-value               INT-U8,
54        upper-scaled-value               INT-U8

                                                             80
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1      }

2      ScaledRange16 ::= SEQUENCE {
3           lower-scaled-value              INT-U16,
4           upper-scaled-value              INT-U16
5      }

6      ScaledRange32 ::= SEQUENCE {
7           lower-scaled-value              INT-U32,
8           upper-scaled-value              INT-U32
9      }

10     --
11     -- Sa-Marker-List attribute allows the definition of special sample values to mark or annotate certain conditions
12     -- directly in the sample value; the special sample value may be a full value or a bit mask, depending on the marker
13     -- ID; in any case, the sample value may use bits outside the normal range (as defined by the SampleType::
14     -- significant-bits) only if the SaFlags::sa-ext-val-range flag is set
15     --
16     MarkerListSaVal8 ::= SEQUENCE OF MarkerEntrySaVal8

17     MarkerEntrySaVal8 ::= SEQUENCE {
18         marker-id OID-Type,       -- from VMO::Type or Metric-Id-Partition partition
19         marker-val INT-U8,        -- a value or bit mask depending on marker-id
20         unused     INT-U8         -- for alignment
21     }

22     MarkerListSaVal16 ::= SEQUENCE OF MarkerEntrySaVal16

23     MarkerEntrySaVal16 ::= SEQUENCE {
24         marker-id OID-Type,       -- from VMO::Type or Metric-Id-Partition partition
25         marker-val INT-U16        -- a value or bit mask depending on marker-id
26     }

27     MarkerListSaVal32 ::= SEQUENCE OF MarkerEntrySaVal32

28     MarkerEntrySaVal32 ::= SEQUENCE {
29         marker-id OID-Type,       -- from VMO::Type or Metric-Id-Partition partition
30         marker-val INT-U32        -- a value or bit mask depending on marker-id
31     }

32   6.3.6.2 Behavior

33   The SampleArray class does not define any special methods.

34   6.3.6.3 Notifications

35   The SampleArray class does not generate any special notifications.
36   6.3.7 RealTimeSampleArray class

37   Class:                       RealTimeSampleArray
38   Description:                 “The RealTimeSampleArray class describes a sample array that represents a real-time
39                                continuous waveform.”
40   Superclass:                  SampleArray
41   Subclasses:                  --
42   Name Binding:                Handle (VMO inherited)
43   Registered As:               MDC_MOC_VMO_METRIC_SA_RT



                                                               81
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   6.3.7.1 Attributes

 2   The RealTimeSampleArray class defines the attributes in Table 15.

 3                     Table 15 —RealTimeSampleArray class attributes
         Attribute            Attribute ID            Attribute type                    Remark                   Qualifier
          name
      Sample-Period      MDC_ATTR_TIME_            RelativeTime             Example: in (parts of)              M
                         PD_SAMP                                            milliseconds.
      Sweep-Speed        MDC_ATTR_SPD_             MetricMeasure            Example: millimeters per            O
                         SWEEP_DEFAULT                                      second.
      Average-           MDC_ATTR_                 RelativeTime             Indicates the average time          O
      Reporting-         REPORTING_                                         between when the first element
      Delay              DELAY_AVG                                          in an array update was sampled
                                                                            and when the
                                                                            FastPeriCfgScanner event
                                                                            report was generated (i.e., the
                                                                            event report timestamp).
      Sample-Time-       MDC_ATTR_                 RelativeTime             Indicates the precise sample        C
      Sync               SAMPLE_TIME_                                       time of the first element in an
                         SYNC                                               array update. Optional if the
                                                                            Average-Reporting-Delay
                                                                            attribute is present; out of the
                                                                            scope of this standard
                                                                            otherwise.
      Hires-Sample-      MDC_ATTR_                 HighResRelativeTime      Indicates the precise sample        C
      Time-Sync          SAMPLE_TIME_                                       time of the first element in an
                         SYNC_HIRES                                         array update. Optional if the
                                                                            Average-Reporting-Delay
                                                                            attribute is present; out of the
                                                                            scope of this standard
                                                                            otherwise.
 4
 5   NOTE 1—Together with the Average-Reporting-Delay attribute, the Sample-Time-Sync or HiRes-Sample-Time-Sync
 6   attribute can be used to accurately specify specific sample times. The Sample-Time-Sync and HiRes-Sample-Time-Sync
 7   attributes should be reported by an episodic scanner

 8          When reporting is first started and
 9          Periodically after that start at a frequency that ensures that time drift/clock skew will not compromise precise
10           time correlation with a single waveform sample.

11   NOTE 2—See also 6.7.5 for the definition of the FastPeriCfgScanner class.

12   The RealTimeSampleArray class defines in Table 16 the attribute groups or extensions to
13   inherited attribute groups.

14                 Table 16 —RealTimeSampleArray class attribute groups
           Attribute group                     Attribute group ID                             Group elements
      VMO Static Context           MDC_ATTR_GRP_VMO_STATIC                        from VMO:
      Group                                                                       Type, Handle
      (extensible attribute                                                       from Metric:
      group)                                                                      Metric-Specification, Max-Delay-Time
                                                                                  from SampleArray:



                                                              82
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



         Attribute group                  Attribute group ID                             Group elements
                                                                             Sa-Specification, Compression, Sa-
                                                                             Marker-
                                                                             List-8, Sa-Marker-List-16, Sa-Marker-
                                                                             List-32
                                                                             from RealTimeSampleArray:
                                                                             Sample-Period, Sweep-Speed, Average-
                                                                             Reporting-Delay
     VMO Dynamic Context       MDC_ATTR_GRP_VMO_DYN                          from VMO:
     Group                                                                   Label-String
     (extensible attribute                                                   from Metric:
     group)                                                                  Metric-Status, Measurement-Status,
                                                                             Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                             Unit-
                                                                             Labelstring, Vmo-Source-List, Metric-
                                                                             Source-List, Msmt-Site-List, Body-Site-
                                                                             List, Metric-Calibration, Color,
                                                                             Measure-
                                                                             Mode, Measure-Period, Averaging-
                                                                             Period,
                                                                             Start-Time, Stop-Time, Metric-Info-
                                                                             Labelstring, Substance, Substance-
                                                                             Labelstring, Body-Site-List-Ext, Msmt-
                                                                             Site-
                                                                             List-Ext
                                                                             from SampleArray:
                                                                             Scale-And-Range-Specification-8, Sa-
                                                                             Physiological-Range-8, Visual-Grid-8,
                                                                             Sa-
                                                                             Calibration-Data-8, Filter-Specification,
                                                                             Filter-Label-String, Sa-Signal-
                                                                             Frequency,
                                                                             Sa-Measure-Resolution, Scale-And-
                                                                             Range-
                                                                             Specification-16, Scale-And-Range-
                                                                             Specification-32, Sa-Physiological-
                                                                             Range-16, Sa-Physiological-Range-32,
                                                                             Visual-Grid-16, Visual-Grid-32, Sa-
                                                                             Calibration-Data-16, Sa-Calibration-
                                                                             Data-32
                                                                             from RealTimeSampleArray:
                                                                             Sample-Time-Sync, Hires-Sample-
                                                                             Time-
                                                                             Sync
     Metric Observed Value     MDC_ATTR_GRP_METRIC_VAL_OBS                   from Metric:
     Group                                                                   Metric-Id-Partition
     (extensible attribute                                                   from SampleArray:
     group)                                                                  Sa-Observed-Value, Compound-Sa-
                                                                             Observed-Value
1
2   6.3.7.2 Behavior

3   The RealTimeSampleArray class does not define any special methods.
4   6.3.7.3 Notifications

5   The RealTimeSampleArray class does not generate any special notifications.

                                                           83
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   6.3.8 TimeSampleArray class

 2   Class:                          TimeSampleArray
 3   Description:                    “The TimeSampleArray class describes a sample array that represents noncontinuous
 4                                   waveforms (i.e., a wave snippet).”
 5   Superclass:                     SampleArray
 6   Subclasses:                     --
 7   Name Binding:                   Handle (VMO inherited)
 8   Registered As:                  MDC_MOC_VMO_METRIC_SA_T

 9   6.3.8.1 Attributes

10   The TimeSampleArray class defines the attributes in Table 17.

11                         Table 17 —TimeSampleArray class attributes
      Attribute name          Attribute ID             Attribute type                  Remark                 Qualifier
      Absolute-Time-      MDC_ATTR_TIME_            AbsoluteTime            Time of observation               O
      Stamp               STAMP_ABS                                         (timestamp).
      Relative-Time-      MDC_ATTR_TIME_            RelativeTime                                              O
      Stamp               STAMP_REL
      Hires-Time-         MDC_ATTR_TIME_            HighResRelativeTime     High-resolution timestamp.        O
      Stamp               STAMP_REL_HI_
                          RES
      Sample-Period       MDC_ATTR_TIME_            RelativeTime            Example: in (parts of)            M
                          PD_SAMP                                           milliseconds.
      Sweep-Speed         MDC_ATTR_SPD_             MetricMeasure           Example: millimeters per          O
                          SWEEP_DEFAULT                                     second.
      Tsa-Marker-List     MDC_ATTR_TSA_             MarkerListRelTim        Marks positions in wave           O
                          MARKER_LIST                                       snippets.
12
13   The TimeSampleArray class defines in Table 18 the attribute groups or extensions to
14   inherited attribute groups.

15                     Table 18 —TimeSampleArray class attribute groups
           Attribute group                      Attribute group ID                           Group elements
      VMO Static Context              MDC_ATTR_GRP_VMO_STATIC                    from VMO:
      Group                                                                      Type, Handle
      (extensible attribute group)                                               from Metric:
                                                                                 Metric-Specification, Max-Delay-Time
                                                                                 from SampleArray:
                                                                                 Sa-Specification, Compression, Sa-
                                                                                 Marker-
                                                                                 List-8, Sa-Marker-List-16, Sa-Marker-
                                                                                 List-32
                                                                                 from TimeSampleArray:
                                                                                 Sample-Period, Sweep-Speed
      VMO Dynamic Context             MDC_ATTR_GRP_VMO_DYN                       from VMO:
      Group                                                                      Label-String
      (extensible attribute group)                                               from Metric:
                                                                                 Metric-Status, Measurement-Status,
                                                                                 Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                 Unit-
                                                                                 Labelstring, Vmo-Source-List, Metric-


                                                               84
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



           Attribute group                      Attribute group ID                              Group elements
                                                                                    Source-List, Msmt-Site-List, Body-
                                                                                    Site-
                                                                                    List, Metric-Calibration, Color,
                                                                                    Measure-
                                                                                    Mode, Measure-Period, Averaging-
                                                                                    Period,
                                                                                    Start-Time, Stop-Time, Metric-Info-
                                                                                    Labelstring, Substance, Substance-
                                                                                    Labelstring, Body-Site-List-Ext, Msmt-
                                                                                    Site-
                                                                                    List-Ext
                                                                                    from SampleArray:
                                                                                    Scale-And-Range-Specification-8, Sa-
                                                                                    Physiological-Range-8, Visual-Grid-8,
                                                                                    Sa-
                                                                                    Calibration-Data-8, Filter-Specification,
                                                                                    Filter-Label-String, Sa-Signal-
                                                                                    Frequency,
                                                                                    Sa-Measure-Resolution, Scale-And-
                                                                                    Range-
                                                                                    Specification-16, Scale-And-Range-
                                                                                    Specification-32, Sa-Physiological-
                                                                                    Range-16, Sa-Physiological-Range-32,
                                                                                    Visual-Grid-16, Visual-Grid-32, Sa-
                                                                                    Calibration-Data-16, Sa-Calibration-
                                                                                    Data-32
      Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                    from Metric:
      Group                                                                         Metric-Id-Partition
      (extensible attribute group)                                                  from SampleArray:
                                                                                    Sa-Observed-Value, Compound-Sa-
                                                                                    Observed-Value
                                                                                    from TimeSampleArray:
                                                                                    Absolute-Time-Stamp, Relative-Time-
                                                                                    Stamp, Hires-Time-Stamp, Tsa-Marker-
                                                                                    List
 1
 2   The following ASN.1 data type definitions apply:
3      --
4      -- Tsa-Marker-List attribute can be used to mark certain time points in the wave snippet; the first sample is at
5      -- relative time 0
6      --
7      MarkerListRelTim ::= SEQUENCE OF MarkerEntryRelTim

 8     MarkerEntryRelTim ::= SEQUENCE {
 9         marker-id                 OID-Type,                    -- from VMO::Type or Metric-Id-Partition partition
10         marker-time               RelativeTime
11     }

12   6.3.8.2 Behavior

13   The TimeSampleArray class does not define any special methods.
14   6.3.8.3 Notifications

15   The TimeSampleArray class does not generate any special notifications.


                                                               85
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1   6.3.9 DistributionSampleArray class

 2   Class:                       DistributionSampleArray
 3   Description:                 “The DistributionSampleArray class describes a sample array that represents linear value
 4                                distributions in the form of arrays containing scaled sample values. Each value within an
 5                                observation array represents a measured value from a different point in the parameter
 6                                spaceThe index of a value within an observation array denotes a spatial value, not a time
 7                                point. Thus, the observed value array can be considered an x-y coordinate system where
 8                                the y axis is specified by the attributes inherited from the Metric class and the x axis is
 9                                specified by attributes defined in the DistributionSampleArray class.”
10   Superclass:                  SampleArray
11   Subclasses:                  --
12   Name Binding:                Handle (VMO inherited)
13   Registered As:               MDC_MOC_VMO_METRIC_SA_D

14   6.3.9.1 Attributes

15   The DistributionSampleArray class defines the attributes in Table 19.

16                     Table 19 —DistributionSampleArray class attributes
      Attribute name          Attribute ID           Attribute type                     Remark                   Qualifier
      Absolute-Time-      MDC_ATTR_              AbsoluteTime              Time of observation                   O
      Stamp               TIME_STAMP_                                      (timestamp).
                          ABS
      Relative-Time-      MDC_ATTR_              RelativeTime                                                    O
      Stamp               TIME_STAMP_
                          REL
      Hires-Time-         MDC_ATTR_              HighResRelativeTime       High-resolution timestamp.            O
      Stamp               TIME_STAMP_
                          REL_HI_RES
      Distribution-       MDC_ATTR_              DsaRangeSpec              Maps array index to absolute          M
      Range-              RANGE_DISTRIB                                    value.
      Specification
      x-Unit-Code         MDC_ATTR_              OID-Type                  Applies to x axis.                    O
                          UNIT_CODE_X
      x-Unit-Label-       MDC_ATTR_              OCTET STRING              Applies to x axis.                    O
      String              UNIT_LABEL_
                          STRING_X
      Dsa-Marker-List     MDC_ATTR_              MarkerListIndex           User to mark positions in             O
                          DSA_MARKER_                                      DistributionSampleArray object
                          LIST                                             samples
17
18   The DistributionSampleArray class defines in Table 20 the attribute groups or extensions
19   to inherited attribute groups.

20              Table 20 —DistributionSampleArray class attribute groups
          Attribute group                     Attribute group ID                                Group elements
      VMO Static Context           MDC_ATTR_GRP_VMO_STATIC                       from VMO:
      Group                                                                      Type, Handle
      (extensible attribute                                                      from Metric:
      group)                                                                     Metric-Specification, Max-Delay-Time
                                                                                 from SampleArray:
                                                                                 Sa-Specification, Compression, Sa-
                                                                                 Marker-

                                                              86
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



          Attribute group                      Attribute group ID                               Group elements
                                                                                   List-8, Sa-Marker-List-16, Sa-Marker-
                                                                                   List-32
      VMO Dynamic Context          MDC_ATTR_GRP_VMO_DYN                            from VMO:
      Group                                                                        Label-String
      (extensible attribute                                                        from Metric:
      group)                                                                       Metric-Status, Measurement-Status,
                                                                                   Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                   Unit-
                                                                                   Labelstring, Vmo-Source-List, Metric-
                                                                                   Source-List, Msmt-Site-List, Body-Site-
                                                                                   List, Metric-Calibration, Color,
                                                                                   Measure-
                                                                                   Mode, Measure-Period, Averaging-
                                                                                   Period,
                                                                                   Start-Time, Stop-Time, Metric-Info-
                                                                                   Labelstring, Substance, Substance-
                                                                                   Labelstring, Body-Site-List-Ext, Msmt-
                                                                                   Site-
                                                                                   List-Ext
                                                                                   from SampleArray:
                                                                                   Scale-And-Range-Specification-8, Sa-
                                                                                   Physiological-Range-8, Visual-Grid-8,
                                                                                   Sa-
                                                                                   Calibration-Data-8, Filter-Specification,
                                                                                   Filter-Label-String, Sa-Signal-
                                                                                   Frequency,
                                                                                   Sa-Measure-Resolution, Scale-And-
                                                                                   Range-
                                                                                   Specification-16, Scale-And-Range-
                                                                                   Specification-32, Sa-Physiological-
                                                                                   Range-16, Sa-Physiological-Range-32,
                                                                                   Visual-Grid-16, Visual-Grid-32, Sa-
                                                                                   Calibration-Data-16, Sa-Calibration-
                                                                                   Data-32
                                                                                   from DistributionSampleArray:
                                                                                   Distribution-Range-Specification, x-
                                                                                   Unit-
                                                                                   Code, x-Unit-Label-String
      Metric Observed Value        MDC_ATTR_GRP_METRIC_VAL_OBS                     from Metric:
      Group                                                                        Metric-Id-Partition
      (extensible attribute                                                        from SampleArray:
      group)                                                                       Sa-Observed-Value, Compound-Sa-
                                                                                   Observed-Value
                                                                                   from DistributionSampleArray:
                                                                                   Absolute-Time-Stamp, Relative-Time-
                                                                                   Stamp, Hires-Time-Stamp, Dsa-Marker-
                                                                                   List
1
2    The following ASN.1 data type definitions apply:
 3    --
 4    -- Distribution-Range-Specification attribute defines the absolute value for the first and last array element; a linear
 5    -- scale is assumed here unless a specific compression scheme is defined (last-value -first-value)/no.of.array
 6    -- elements == step width
 7    --
 8    DsaRangeSpec ::= SEQUENCE {
 9          first-element-value             FLOAT-Type,
10          last-element-value              FLOAT-Type
11    }

                                                               87
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1     --
 2     -- DSA-Marker-List attribute allows the annotation of samples by referencing the sample with an index
 3     --
 4     MarkerListIndex ::= SEQUENCE OF MarkerEntryIndex

5      MarkerEntryIndex ::= SEQUENCE {
6          marker-id                  OID-Type,                -- from VMO::Type or Metric-Id-Partition partition
7          marker-index               INT-U16
8      }

 9   6.3.9.2 Behavior

10   The DistributionSampleArray class does not define any special methods.
11   6.3.9.3 Notifications

12   The DistributionSampleArray class does not generate any special notifications.

13   6.3.10 Enumeration class

14   Class:                      Enumeration
15   Description:                “The Enumeration class represents status information and/or annotation information.
16                               Observation values may be presented in the form of normative codes (that are included in
17                               the nomenclature defined in this standard or in some other external nomenclature), bit
18                               string, or in the form of free text.”
19   Superclass:                 Metric
20   Subclasses:                 --
21   Name Binding:               Handle (VMO inherited)
22   Registered As:              MDC_MOC_VMO_METRIC_ENUM

23   6.3.10.1 Attributes

24   The Enumeration class defines the attributes in Table 21.

25                            Table 21 —Enumeration class attributes
         Attribute          Attribute ID            Attribute type                    Remark                   Qualifier
          name
      Enum-              MDC_ATTR_             EnumObsValue                Either Enum-Observed-Value          C
      Observed-          VAL_ENUM_OBS                                      or Compound-EnumObserved-
      Value                                                                Value shall be supported in one
                                                                           object instance.
      Compound-          MDC_ATTR_             EnumObsValueCmp             Either Enum-Observed-Value          C
      Enum-              VAL_ENUM_                                         or Compound-Enum-Observed-
      Observed-          OBS_CMPD                                          Value shall be supported in one
      Value                                                                object instance.
      Absolute-Time-     MDC_ATTR_             AbsoluteTime                                                    O
      Stamp              TIME_STAMP_
                         ABS
      Relative-Time-     MDC_ATTR_             RelativeTime                                                    O
      Stamp              TIME_STAMP_
                         REL
      Hires-Time-        MDC_ATTR_             HighResRelativeTime         High-resolution timestamp.          O
      Stamp              TIME_STAMP_
                         REL_HI_RES



                                                              88
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



        Attribute           Attribute ID            Attribute type                     Remark                  Qualifier
         name
     Enum-Measure-       MDC_ATTR_             EnumMsmtRange               List of supported observed          C
     Range               ENUM_RANGE_                                       value OIDs. Optional if the
                         MSMT                                              OID type
                                                                           (EnumVal::enumobjid) is used
                                                                           in the observed value; out of the
                                                                           scope of this standard
                                                                           otherwise.
     Enum-Measure-       MDC_ATTR_             BITS-32                     List of supported observed          C
     Range-Bit-          ENUM_RANGE_                                       value bits in the bit string data
     String              MSMT_BIT_                                         type. Optional if the bit string
                         STRING                                            type (EnumVal::enum-bit-str) is
                                                                           used in the observed value; out
                                                                           of the scope of this standard
                                                                           otherwise.
     Enum-Measure-       MDC_ATTR_             EnumMsmtRangeLabels         Associates text strings with        O
     Range-Labels        ENUM_RANGE_                                       specific enumeration values.
                         MSMT_LABELS
1
2   The Enumeration class defines in Table 22 the attribute groups or extensions to inherited
3   attribute groups.

4                        Table 22 —Enumeration class attribute groups
          Attribute group                      Attribute group ID                            Group elements
     VMO Static Context Group       MDC_ATTR_GRP_VMO_STATIC                      from VMO:
     (extensible attribute group)                                                Type, Handle
                                                                                 from Metric:
                                                                                 Metric-Specification, Max-Delay-Time
                                                                                 from Enumeration:
                                                                                 Enum-Measure-Range-Labels
     VMO Dynamic Context            MDC_ATTR_GRP_VMO_DYN                         from VMO:
     Group                                                                       Label-String
     (extensible attribute group)                                                from Metric:
                                                                                 Metric-Status, Measurement-Status,
                                                                                 Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                 Unit-
                                                                                 Labelstring, Vmo-Source-List, Metric-
                                                                                 Source-List, Msmt-Site-List, Body-
                                                                                 Site-
                                                                                 List, Metric-Calibration, Color,
                                                                                 Measure-
                                                                                 Mode, Measure-Period, Averaging-
                                                                                 Period,
                                                                                 Start-Time, Stop-Time, Metric-Info-
                                                                                 Labelstring, Substance, Substance-
                                                                                 Labelstring, Body-Site-List-Ext, Msmt-
                                                                                 Site-
                                                                                 List-Ext
                                                                                 from Enumeration:
                                                                                 Enum-Measure-Range, Enum-
                                                                                 Measure-
                                                                                 Range-Bit-String
     Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                  from Metric:
     Group                                                                       Metric-Id-Partition
     (extensible attribute group)                                                from Enumeration:


                                                              89
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



          Attribute group                       Attribute group ID                              Group elements
                                                                                    Enum-Observed-Value, Absolute-
                                                                                    Time-
                                                                                    Stamp, Relative-Time-Stamp, Hires-
                                                                                    Time-
                                                                                    Stamp
1
2    The following ASN.1 data type definitions apply:
 3    --
 4    -- Enum-Observed-Value attribute
 5    --
 6    EnumObsValue ::= SEQUENCE {
 7         metric-id OID-Type,                                   -- from VMO::Type or Metric-Id-Partition partition
 8         state     MeasurementStatus,
 9         value     EnumVal                                     -- supports different value data types
10    }

11    --
12    -- The enumeration value data type is used to provide different specific observation data types as follows
13    -- (Note that the type of measurement is coded in the top level structure EnumObsVal::metric-id)
14    --
15    --      enum-obj-id:                                      used to communicate a metric OID, e.g., as an annotation
16    --                                                        or other event defined in the VMO::Type or Metric-Id-
17    --                                                        Partition partition
18    --      enum-text-string:                                 used to communicate a free text string (e.g., a status
19    --                                                        message)
20    --      enum-external-code:                               used to provide the code of an external nomenclature (e.g.,
21    --                                                        could be used for procedure codes not covered in the
22    --                                                        standard nomenclature)
23    --      enum-bit-str:                                     for coding bit string values; the bit string data type must be
24    --                                                        defined separately, e.g., in the nomenclature or in a
25    --                                                        device-specific standard
26    --      enum-record-metric/oo:                            allows the identification of additional data types by a
27    --                                                        nomenclature code from the VMO::Type or
28    --                                                        Metric-Id-Partition partition; the appended data type must
29    --                                                        be defined separately, e.g., in a device-specific standard
30    --      enum-numeral:                                     used to provide numeral enumerated values that must be
31    --                                                        defined separately, e.g., in a device-specific standard;
32    --                                                        this type is not to be used for numeric measurements
33    --
34    EnumVal ::= CHOICE {
35         enum-obj-id                     [1] OID-Type,                              -- from VMO::Type or Metric-Id-
36                                                                                    -- Partition partition
37         enum-text-string                [2] OCTET STRING,                          -- free text
38         enum-external-code              [8] ExtNomenRef,                           -- code defined in other coding
39                                                                                    -- system
40         enum-bit-str                    [16] BITS-32,                              -- bit string
41         enum-record-metric              [33] EnumRecordMetric,                     -- record type defined by ID from
42                                                                                    -- VMO::Type or Metric-Id-
43                                                                                    -- Partition partition
44         enum-record-oo                  [34] EnumRecordOo,                         -- record type defined by ID from
45                                                                                    -- object-oriented nomenclature
46                                                                                    -- partition
47         enum-numeral                    [64] INT-U32                               -- enumerated integer value
48    }

49    --
50    -- Record data type with structure and contents defined by a nomenclature ID from the VMO::Type or Metric-Id-
51    -- Partition partition

                                                              90
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1      --
2      EnumRecordMetric ::= SEQUENCE {
3         record-type-code           OID-Type,     -- from VMO::Type or Metric-Id-Partition partition
4         record-data                ANY DEFINED BY record-type-code
5      }

 6     --
 7     -- Record data type with structure and contents defined by a nomenclature ID from the object-oriented
 8     -- nomenclature partition
 9     --
10     EnumRecordOo ::= SEQUENCE {
11          record-type-code                 OID-Type,          -- must be from object-oriented nomenclature partition
12          record-data                      ANY DEFINED BY record-type-code
13     }

14     --
15     -- Compound-Enum-Observed-Value attribute is the compound observed value
16     --
17     EnumObsValueCmp ::= SEQUENCE OF EnumObsValue

18     --
19     -- Enum-Measure-Range attribute defines the set of potential (i.e., legal) values of the Enum-Observed-Value
20     -- attribute (only allowed when EnumVal::enum-obj-id type is used)
21     -- OID-Types from VMO::Type or Metric-Id-Partition partition
22     --
23     EnumMsmtRange ::= SEQUENCE OF OID-Type

24     --
25     -- Enum-Measure-Range-Labels attribute defines both the set of potential (i.e., legal) values of the Enum-
26     -- Observed-Value attribute as well as a text label that can be associated with each enumeration value
27     --
28     EnumMsmtRangeLabels ::= SEQUENCE OF EnumMsmtRangeLabel

29     EnumMsmtRangeLabel ::= SEQUENCE {
30        value    EnumVal,                                     -- specific enumeration setting
31        label    OCTET STRING                                 -- textual label associated with value
32     }

33   6.3.10.2 Behavior

34   The Enumeration class does not define any special methods.

35   6.3.10.3 Notifications

36   The Enumeration class does not generate any special notifications.
37   6.3.11 ComplexMetric class

38   Class:                       ComplexMetric
39   Description:                 “ComplexMetric objects act as a containers objects for other Metric objects, enabling
40                                reporting of the collection as a single semantic entity.”
41   Superclass:                  Metric
42   Subclasses:                  --
43   Name Binding:                Handle (VMO inherited)
44   Registered As:               MDC_MOC_VMO_METRIC_CMPLX

45   6.3.11.1 Attributes

46   The ComplexMetric class defines the attributes in Table 23.
                                                               91
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1                            Table 23 —ComplexMetric class attributes
     Attribute name            Attribute ID          Attribute type                  Remark                    Qualifier
     Cmplx-Metric-        MDC_ATTR_                 CmplxMetricInfo     Static attribute defining the object   M
     Info                 CMPLX_INFO                                    types used in the container.
     Cmplx-               MDC_ATTR_                 CmplxObsValue                                              M
     Observed-Value       CMPLX_VAL_OBS
     Cmplx-Dyn-Attr       MDC_ATTR_                 CmplxDynAttr        Dynamic attributes of the              O
                          CMPLX_DYN_ATTR                                individual objects within the
                                                                        ComplexMetric object.
     Cmplx-Static-        MDC_ATTR_                 CmplxStaticAttr     Static attributes of the individual    O
     Attr                 CMPLX_STATIC_                                 objects within the ComplexMetric
                          ATTR                                          object.
     Cmplx-               MDC_ATTR_                 INT-U16             Mandatory if the ComplexMetric         C
     Recursion-Depth      CMPLX_                                        object contains further
                          RECURSION_DEPTH                               ComplexMetric objects (e.g.,
                                                                        recursion). If so, the attribute
                                                                        defines the maximum recursion
                                                                        depth.
2
3   ComplexMetric objects shall set the Metric::MetricSpec::structure::ms-struct::complex
4   flag.

5   The ComplexMetric class defines in Table 24 the attribute groups or extensions to inherited
6   attribute groups.

7                      Table 24 —ComplexMetric class attribute groups
          Attribute group                     Attribute group ID                            Group elements
     VMO Static Context             MDC_ATTR_GRP_VMO_STATIC                      from VMO:
     Group                                                                       Type, Handle
     (extensible attribute group)                                                from Metric:
                                                                                 Metric-Specification, Max-Delay-Time
                                                                                 from ComplexMetric:
                                                                                 Cmplx-Metric-Info, Cmplx-Static-Attr,
                                                                                 Cmplx-Recursion-Depth
     VMO Dynamic Context            MDC_ATTR_GRP_VMO_DYN                         from VMO:
     Group                                                                       Label-String
     (extensible attribute group)                                                from Metric:
                                                                                 Metric-Status, Measurement-Status,
                                                                                 Metric-Id, Metric-Id-Ext, Unit-Code,
                                                                                 Unit-
                                                                                 Labelstring, Vmo-Source-List, Metric-
                                                                                 Source-List, Msmt-Site-List, Body-
                                                                                 Site-
                                                                                 List, Metric-Calibration, Color,
                                                                                 Measure-
                                                                                 Mode, Measure-Period, Averaging-
                                                                                 Period,
                                                                                 Start-Time, Stop-Time, Metric-Info-
                                                                                 Labelstring, Substance, Substance-
                                                                                 Labelstring, Body-Site-List-Ext, Msmt-
                                                                                 Site-
                                                                                 List-Ext
                                                                                 from ComplexMetric:
                                                                                 Cmplx-Dyn-Attr


                                                              92
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



           Attribute group                     Attribute group ID                            Group elements
      Metric Observed Value          MDC_ATTR_GRP_METRIC_VAL_OBS                  from Metric:
      Group                                                                       Metric-Id-Partition
      (extensible attribute group)                                                from ComplexMetric:
                                                                                  Cmplx-Observed-Value
 1
 2   The following ASN.1 data type definitions apply:
 3    --
 4    -- Definitions for Cmplx-Metric-Info attribute
 5    --
 6    CmplxMetricInfo ::= SEQUENCE {
 7         max-mplex-obs                   INT-U8,                                 -- maximum number of messages
 8                                                                                 -- until all multiplexed elements are
 9                                                                                 -- transmitted in the Metric
10                                                                                 -- Observed Value Group
11          max-mplex-dyn                   INT-U8,                                -- maximum number of messages
12                                                                                 -- until all multiplexed elements are
13                                                                                 -- transmitted in the VMO
14                                                                                 -- Dynamic Context Group
15          cm-elem-info-list               CmplxElemInfoList
16    }

17    CmplxElemInfoList ::= SEQUENCE OF CmplxElemInfo

18    CmplxElemInfo ::= SEQUENCE {
19       class-id                           OID-Type,
20       max-inst                           INT-U8,             -- number of objects from type class-id
21       max-inst-comp                      INT-U8,             -- number of compound objects from type class-id
22       max-comp-no                        INT-U8,             -- maximum number of elements within a compound
23                                                              -- object
24          max-inst-mplex                  INT-U8,             -- number of multiplexed objects within max-inst +
25                                                              -- max-inst-comp
26          max-str-size                    INT-U16             -- maximum string size
27    }

28    --
29    -- Cmplx-Observed-Value attribute, representing the hierarchy of contained Metric objects
30    --
31    CmplxObsValue ::= SEQUENCE {
32         cm-obs-cnt                     INT-U8,                                 -- sequence counter begins with 0
33                                                                                -- when a multiplex period begins
34         cm-obs-flags                   CmplxFlags,
35         cm-obs-elem-list               CmplxObsElemList
36    }

37    CmplxFlags ::= BITS-8 {
38       cmplx-flag-reserved(0)             -- for future extensions
39    }

40    CmplxObsElemList ::= SEQUENCE OF CmplxObsElem

41    CmplxObsElem ::= SEQUENCE {
42       cm-elem-idx              INT-U8,
43       cm-obs-elem-flgs         CmplxObsElemFlags,
44       attributes               AttributeList
45    }

46    CmplxObsElemFlags ::= BITS-8 {

                                                               93
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1           cm-obs-elem-flg-mplex(0),                            -- the element will be multiplexed
2           cm-obs-elem-flg-is-setting(2),
3           cm-obs-elem-flg-updt-episodic(4),
4           cm-obs-elem-flg-msmt-noncontinuous(5)
5      }

 6     --
 7     -- Cmplx-Dyn-Attr with the dynamic context data of the hierarchy of contained Metric objects
 8     --
 9     CmplxDynAttr ::= SEQUENCE {
10          cm-dyn-cnt                    INT-U8,                                 -- sequence counter begins with 0
11                                                                                -- when a multiplex period begins
12          unused                        INT-U8,
13          cm-dyn-elem-list              CmplxDynAttrElemList
14     }

15     CmplxDynAttrElemList ::= SEQUENCE OF CmplxDynAttrElem

16     CmplxDynAttrElem ::= SEQUENCE {
17        cm-elem-idx-1             INT-U8,                      -- allows the definition, with cm-elem-idx-2, of a range
18                                                               -- of elements where the dynamic attributes apply
19          cm-elem-idx-2                    INT-U8,
20          attributes                       AttributeList
21     }

22     --
23     -- Cmplx-Static-Attr with the static context data of the hierarchy of contained Metric objects
24     --
25     CmplxStaticAttr ::= SEQUENCE {
26          cm-static-elem-list               CmplxStaticAttrElemList
27     }

28     CmplxStaticAttrElemList ::= SEQUENCE OF CmplxStaticAttrElem

29     CmplxStaticAttrElem ::= SEQUENCE {
30        cm-elem-idx-1               INT-U8,                    -- allows the 94definition, with cm-elem-idx-2, of a range
31                                                               -- of elements where the static attributes apply
32          cm-elem-idx-2                    INT-U8,
33          attributes                       AttributeList       -- only static attributes as defined for metric
34                                                               -- specialization are allowed here (i.e., no VMO or
35                                                               -- Metric attributes)
36     }

37   6.3.11.2 Behavior

38   The ComplexMetric class does not define any special methods.
39   6.3.11.3 Notifications

40   The ComplexMetric class does not generate any special notifications.
41   6.3.12 PM-Store class

42   Class:                       PM-Store
43   Description:                 “PM-Store objects provide long-term storage capabilities for metric data. A PM-Store
44                                contains a variable number of PM-Segment objects that can be accessed only through the
45                                PM-Store object.”
46   Superclass:                  VMO
47   Subclasses:                  --

                                                               94
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   Name Binding:                   Handle
 2   Registered As:                  MDC_MOC_VMO_PMSTORE

 3   6.3.12.1 Attributes

 4   The PM-Store class defines the attributes in Table 25.

5                                    Table 25 —PM-Store class attributes
       Attribute name           Attribute ID          Attribute type                  Remark                   Qualifier
      Metric-Class         MDC_ATTR_                 OID-Type            Class of stored metric(s).            M
                           METRIC_CLASS
      Store-Sample-        MDC_ATTR_                 StoSampleAlg        Method used to derive stored          O
      Algorithm            METRIC_STORE_                                 values from metric observed
                           SAMPLE_ALG                                    values.
      Storage-Format       MDC_ATTR_                 StorageFormat       Layout of stored data in PM-          M
                           METRIC_STORE_                                 Segment objects.
                           FORMAT
      Store-Capacity-      MDC_ATTR_                 INT-U32             Maximum number of stored              O
      Count                METRIC_STORE_                                 values.
                           CAPAC_CNT
      Store-Usage-         MDC_ATTR_OP_              OperationalState    Actual number of stored values.       O
      Count                STAT
      Sample-Period        MDC_ATTR_TIME_            RelativeTime        Used if values are sampled            C
                           PD_SAMP                                       periodically.
      Number-Of-           MDC_ATTR_NUM_             INT-U16             Currently instantiated PM-            M
      Segments             SEG                                           Segment objects contained in the
                                                                         PM-Store object.
 6
 7   The PM-Store class defines in Table 26 the attribute groups or extensions to inherited
 8   attribute groups.

 9                           Table 26 —PM-Store class attribute groups
            Attribute group                     Attribute group ID                           Group elements
      VMO Static Context Group          MDC_ATTR_GRP_VMO_STATIC               from VMO:
      (extensible attribute group)                                            Type, Handle
      VMO Dynamic Context               MDC_ATTR_GRP_VMO_DYN                  from VMO:
      Group                                                                   Label-String
      (extensible attribute group)
      PM-Store Attribute Group          MDC_ATTR_GRP_PMSTORE                  from PM-Store:
                                                                              Metric-Class, Store-Sample-Algorithm,
                                                                              Storage-Format, Store-Capacity-Count,
                                                                              Store-Usage-Count, Sample-Period,
                                                                              Number-Of-Segments
10
11   The following ASN.1 data type definitions apply:
12     --
13     -- The storage format defines the structure of the Segment-Data attribute in all contained PM-Segment objects
14     -- 1..255: range for normative formats
15     -- 32768..65535: range for private formats
16     -- other: reserved
17     --

                                                               95
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1     StorageFormat ::= INT-U16 {
2          sto-t-nos(0),
3          sto-t-gen(1),                    -- implies general format (i.e., PM-Segment, see 6.3.13)
4          sto-t-nu-opt(2),                 -- implies optimized Numeric object format
5          sto-t-rtsa-opt(3)                -- implies optimized RealTimeSampleArray object format
6     }

 7    --
 8    -- Store-Sample-Algorithm attribute describes how samples are derived
 9    --
10    StoSampleAlg ::= INT-U16 {
11         st-alg-nos(0),
12         st-alg-moving-average(1),
13         st-alg-recursive(2),
14         st-alg-min-pick(3),
15         st-alg-max-pick(4),
16         st-alg-median(5)
17    }

18   6.3.12.2 Behavior

19   The PM-Store class defines the methods in Table 27.

20                             Table 27 —PM-Store instance methods
           Action              Mode                    Action ID                 Action parameter           Action result
      Clear-Segments     Confirmed            MDC_ACT_SEG_                   SegmSelection                 —
                                              CLEAR
      Get-Segments       Confirmed            MDC_ACT_SEG_GET                SegmSelection                 SegmentAttrList
      Get-Segment-       Confirmed            MDC_ACT_SEG_GET_               SegmSelection                 SegmentInfoList
      Info                                    INFO
21
22   The following ASN.1 data type definitions apply:
23    --
24    -- SegmSelection selects the PM-Segment objects that are subject to the method
25    --
26    SegmSelection ::= CHOICE {
27         all-segments                  [1] INT-U16,         -- if this type is chosen to select all segments, the actual
28                                                            -- contents of the field are “do not care” and should be 0
29         segm-id-list                  [2] SegmIdList,
30         abs-time-range                [3] AbsTimeRange
31    }

32    --
33    -- SegmIdList selects PM-Segment objects by ID
34    --
35    SegmIdList ::= SEQUENCE OF InstNumber

36    --
37    -- The time range allows selection of PM-Segment objects by time period
38    --
39    AbsTimeRange ::= SEQUENCE {
40         from-time AbsoluteTime,
41         to-time     AbsoluteTime
42    }

43    --

                                                              96
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1     -- Get-Segments method returns a list of PM-Segment attribute lists that include the Segment-Data attribute; the
 2     -- instance number is used to identify each segment
 3     --
 4     SegmentAttrList ::= SEQUENCE OF SegmentAttr

5      SegmentAttr ::= SEQUENCE {
6          seg-inst-no InstNumber,
7          seg-attr    AttributeList
8      }

 9     --
10     -- Segment contents information as a result to the Get-Segment-Info returns all attributes of the PM-Segment
11     -- objects except the Segment-Data attribute; this is useful to get just information about the contents
12     --
13     SegmentInfoList ::= SEQUENCE OF SegmentInfo

14     SegmentInfo ::= SEQUENCE {
15         seg-inst-no InstNumber,
16         seg-info    AttributeList
17     }

18   6.3.12.3 Notifications

19   The PM-Store class does not generate any special notifications.

20   6.3.13 PM-Segment class

21   Class:                       PM-Segment
22   Description:                 “A PM-Segment object represents a continuous time period in which a metric is stored
23                                without any changes of relevant metric context attributes (e.g., scales, labels). PM-
24                                Segment objects are contained in a PM-Store object and are not directly accessible by
25                                management services.”
26   Superclass:                  Top
27   Subclasses:                  --
28   Name Binding:                Instance Number (object not directly manageable; instance number unique within a single
29                                PM-Store instance)
30   Registered As:               MDC_MOC_PM_SEGMENT

31   6.3.13.1 Attributes

32   The PM-Segment class defines the attributes in Table 28.

33                             Table 28 —PM-Segment class attributes
       Attribute name           Attribute ID          Attribute type                  Remark                    Qualifier
      Instance-Number      MDC_ATTR_ID_              InstNumber                                                 M
                           INSTNO
      Metric-Id            MDC_ATTR_ID_              OID-Type            ID of stored metric (from              M
                           PHYSIO                                        VMO::Type or Metric-IdPartition
                                                                         partition).
      Metric-Id-Ext        MDC_ATTR_ID_              ExtNomenRef         Dynamic identification of the          O
                           MSMT_EXT                                      metric in a different nomenclature
                                                                         or dictionary. Use of this attribute
                                                                         severely limits interoperability of
                                                                         applications.
      Vmo-Global-          MDC_ATTR_VMO_             GLB-HANDLE          Reference to stored Metric object.     O
      Reference            REF_GLB


                                                              97
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name           Attribute ID           Attribute type                   Remark                    Qualifier
      Segment-Start-      MDC_ATTR_TIME_              AbsoluteTime        Start time of segment.                 O
      Abs-Time            START_SEG
      Segment-End-        MDC_ATTR_TIME_              AbsoluteTime        End time of segment.                   O
      Abs-Time            END_SEG
      Segment-Usage-      MDC_ATTR_SEG_               INT-U32             Actual (i.e., current) number of       O
      Count               USAGE_CNT                                       stored values.
      Segment-Data-       MDC_ATTR_SEG_               SegDataGen          Segment data stored in a format as     C
      Gen                 DATA_GEN                                        specified in the PM-Store object.
                                                                          Exactly one of the following
                                                                          attributes shall be implemented for
                                                                          any PM-Segment object: Segment-
                                                                          Data-Gen, Segment-Data-Nu-Opt,
                                                                          Segment-Data-Rtsa-Opt.
      Segment-Data-       MDC_ATTR_SEG_               SegDataNuOpt        Segment data stored in a format as     C
      Nu-Opt              DATA_NU_OPT                                     specified in the PM-Store object.
                                                                          Exactly one of the following
                                                                          attributes shall be implemented for
                                                                          any PM-Segment object: Segment-
                                                                          Data-Gen, Segment-Data-Nu-Opt,
                                                                          Segment-Data-Rtsa-Opt.
      Segment-Data-       MDC_ATTR_SEG_               SegDataRtsaOpt      Segment data stored in a format as     C
      Rtsa-Opt            DATA_RTSA_OPT                                   specified in the PM-Store object.
                                                                          Exactly one of the following
                                                                          attributes shall be implemented for
                                                                          any PM-Segment object: Segment-
                                                                          Data-Gen, Segment-Data-Nu-Opt,
                                                                          Segment-Data-Rtsa-Opt.
      Context             As defined for Metric       Any attribute       Metric context attributes are
      Attributes          derived objects             from Metric-        allowed in this object without
                                                      derived objects     container. Attributes are identified
                                                      that is member      by their OID. This reference to
                                                      of either the       attributes is an editorial
                                                      VMO Static          convenience. There is no need to
                                                      Context Group       copy all attributes from the various
                                                      or the VMO          objects to the PM-Segment object.
                                                      Dynamic             Copying attributes is not a hidden
                                                      Context Group       form of inheritance.
1
2    The PM-Segment class defines no attribute groups.

3    The following ASN.1 data type definitions apply:
4     --
5     -- General segment data format; each stored value is one attribute list
6     -- NOTE--This format may be very storage-intensive
7     --
8     SegDataGen ::= SEQUENCE OF AttributeList

 9    --
10    -- Optimized Numeric object format for periodically acquired numerics; only the actual value is stored
11    --
12    SegDataNuOpt ::= SEQUENCE OF FLOAT-Type

13    --
14    -- Optimized RealTimeSampleArray object format; a consecutive array of samples
15    --

                                                              98
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1     SegDataRtsaOpt ::= OCTET STRING

 2   6.3.13.2 Behavior

 3   The PM-Segment class does not define any special methods.
 4   6.3.13.3 Notifications

 5   The PM-Segment class does not generate any special notifications.

 6   6.4 Alert package

 7   6.4.1 Alert class

 8   Class:                          Alert
 9   Description:                    “An Alert object stands for the status of a simple alert condition check. As such, it
10                                   represents a single alert condition only. The alert condition can be either a physiological
11                                   alarm or a technical alarm condition of a related object (e.g., MDS, VMD, Metric).”
12   Superclass:                     VMO
13   Subclasses:                     --
14   Name Binding:                   Handle
15   Registered As:                  MDC_MOC_VMO_AL

16   6.4.1.1 Attributes

17   The Alert class defines the attributes in Table 29.

18                                      Table 29 —Alert class attributes
       Attribute name            Attribute ID            Attribute type                   Remark                   Qualifier
      Alert-Condition      MDC_ATTR_AL_                 AlertCondition                                             M
                           COND
      Limit-               MDC_ATTR_AL_                 LimitSpecEntry       Relevant for limit alarms only.       O
      Specification        LIMIT
      Vmo-Reference        MDC_ATTR_VMO_                HANDLE                                                     O
                           REF
19
20   NOTE—The VMO inherited type field defines if the Alert represents a technical or physiological alarm.

21   The Alert class defines in Table 30 the attribute groups or extensions to inherited attribute
22   groups.

23                               Table 30 —Alert class attribute groups
24
             Attribute group                      Attribute group ID                           Group elements
      VMO Static Context Group            MDC_ATTR_GRP_VMO_STATIC                 from VMO:
      (extensible attribute group)                                                Type, Handle
                                                                                  from Alert:
                                                                                  Vmo-Reference
      VMO Dynamic Context                 MDC_ATTR_GRP_VMO_DYN                    from VMO:
      Group                                                                       Label-String
      (extensible attribute group)                                                from Alert:
                                                                                  Limit-Specification

                                                               99
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



             Attribute group                      Attribute group ID                             Group elements
      Alert Group                        MDC_ATTR_GRP_AL                           from Alert:
                                                                                   Alert-Condition
1
2    The following ASN.1 data type definitions apply:
 3     --
 4     -- Alert-Condition attribute is the status output of the process that is detecting the alert
 5     --
 6     AlertCondition ::= SEQUENCE {
 7          obj-reference                      HANDLE,
 8          controls                           AlertControls,
 9          alert-flags                        AlertFlags,          -- supporting flags
10          alert-source                       OID-Type,            -- from metric or object-oriented nomenclature
11                                                                  -- partition
12          alert-code                         OID-Type,            -- from events nomenclature partition
13          alert-type                         AlertType,           -- defines type and severity of condition
14          alert-info-id                      PrivateOid,          -- specific information can be appended; 0 if not used
15          alert-info                         ANY DEFINED BY alert-info-id
16     }

17   NOTE—The alert-code value is a code that comes from the events nomenclature partition. Entries (i.e., codes) in this
18   partition are even. The last bit of the code is used to determine whether the alert-source comes from the metric
19   nomenclature partition or the object-oriented nomenclature partition. If the last bit of the alert-code value is 0, the alert-
20   source comes from the metric nomenclature partition. If the last bit is 1 (1 is added to the base code in the events
21   nomenclature), the alert-source comes from the object-oriented nomenclature partition.
22     --
23     -- Alert controls define flags to communicate status information relevant for alert processor; this structure is
24     -- reused in the AlertStatus class
25     --
26     AlertControls ::= BITS-16 {
27           ac-obj-off(0),                  -- the object supervised by the alert is off
28           ac-chan-off(1),                 -- channel is off
29           ac-all-obj-al-off(3),           -- all alerts supervising the referenced objects are off
30           ac-alert-off(4),                -- this alert supervisor process is off
31           ac-alert-muted(5)               -- this alert is temporarily muted by the user (e.g. on ventilators to allow
32                                           -- physiotherapy or suction)
33     }

34     --
35     -- Alert flags give additional support information on how to process the condition; this structure is used by
36     -- AlertStatus objects as well
37     --
38     AlertFlags ::= BITS-16 {
39          local-audible(1),                 -- indicates that the condition is audible at the local system
40          remote-audible(2),                -- condition can be audible at remote (i.e., not suppressed)
41          visual-latching(3),               -- visible latching of the condition is allowed
42          audible-latching(4),              -- audio latching of the condition is allowed
43          derived(6),
44          record-inhibit(8)                 -- do not start alarm recording
45     }

46     --
47     -- Alert type is used to distinguish severity of technical and physiological alarms
48     --
49     AlertType ::= INT-U16 {
50          no-alert(0),
51          low-pri-t-al(1),                   -- low-priority technical alarm
52          med-pri-t-al(2),                   -- medium-priority technical alarm

                                                                100
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1           hi-pri-t-al(4),                  -- high-priority technical alarm
2           low-pri-p-al(256),               -- awareness condition
3           med-pri-p-al(512),               -- prompt response required (i.e., abnormal condition)
4           hi-pri-p-al(1024)                -- immediate response required (i.e., emergency condition)
5      }

 6     --
 7     -- Limit-Specification attribute specifies the supervised limit range
 8     --
 9     LimitSpecEntry ::= SEQUENCE {
10          object-handle                     HANDLE,
11          al-source-id                      OID-Type,            -- typically the metric ID of the measurement
12          unit-code                         OID-Type,            -- from DIM partition
13          lim-al-stat                       CurLimAlStat,        -- see 6.6.8.1 for definition
14          lim-al-val                        CurLimAlVal          -- see 6.6.8.1 for definition
15                                                                 -- for definition
16     }

17   6.4.1.2 Behavior

18   The Alert class does not define any special methods.

19   6.4.1.3 Notifications

20   The Alert class does not generate any special notifications.
21   6.4.2 AlertStatus class

22   Class:                        AlertStatus
23   Description:                  “An AlertStatus object represents the output of an alarm process that considers all alert
24                                 conditions in a scope that spans one or more objects. In contrast to an Alert object, an
25                                 AlertStatus object collects all alert conditions related to a VMD object hierarchy or
26                                 multiple alert conditions related to an MDS object and provides this information in list-
27                                 structured attributes.”
28   Superclass:                   VMO
29   Subclasses:                   --
30   Name Binding:                 Handle
31   Registered As:                MDC_MOC_VMO_AL_STAT

32   6.4.2.1 Attributes

33   The AlertStatus class defines the attributes in Table 31.

34                               Table 31 —AlertStatus class attributes
       Attribute name            Attribute ID          Attribute type                   Remark                     Qualifier
      Alert-Capab-List     MDC_ATTR_AL_               AlertCapabList       Capabilities of the AlertStatus         M
                           STAT_AL_C_LIST                                  object.
      Tech-Alert-List      MDC_ATTR_                  AlertList            List of technical alert information.    O
                           ALSTAT_AL_T_LIST
      Physio-Alert-List    MDC_ATTR_                  AlertList            List of physiological alert             O
                           ALSTAT_AL_P_LIST                                information.
      Limit-Spec-List      MDC_ATTR_AL_               LimitSpecList        List of limit alarm ranges.             O
                           LIMIT_SPEC_LIST
35


                                                               101
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1    The AlertStatus class defines in Table 32 the attribute groups or extensions to inherited
2    attribute groups.

3                            Table 32 —AlertStatus class attribute groups
             Attribute group                      Attribute group ID                             Group elements
      VMO Static Context Group           MDC_ATTR_GRP_VMO_STATIC                   from VMO:
      (extensible attribute group)                                                 Type, Handle
                                                                                   from AlertStatus:
                                                                                   Alert-Capab-List
      VMO Dynamic Context                MDC_ATTR_GRP_VMO_DYN                      from VMO:
      Group                                                                        Label-String
      (extensible attribute group)                                                 from AlertStatus:
                                                                                   Limit-Spec-List
      AlertStatus Group                  MDC_ATTR_GRP_AL_STAT                      from AlertStatus:
                                                                                   Tech-Alert-List, Physio-Alert-List
4
5    The following ASN.1 data type definitions apply:
6      --
7      -- The alert list is used to communicate alert conditions derived by the AlertStatus object
8      --
9      AlertList ::= SEQUENCE OF AlertEntry

10     AlertEntry ::= SEQUENCE {
11          obj-reference                     HANDLE,
12          instance                          InstNumber,          -- to support multiple alarms of one object
13          controls                          AlertControls,
14          alert-source                      OID-Type,            -- from metric or object-oriented nomenclature
15                                                                 -- partition
16          alert-code                        OID-Type,            -- from alerts nomenclature partition
17          alert-type                        AlertType,
18          alert-info-id                     PrivateOid,
19          alert-info                        ANY DEFINED BY alert-info-id
20     }

21   NOTE— The alert-code value is a code that comes from the events nomenclature partition. Entries (i.e., codes) in this
22   partition are even. The last bit of the code is used to determine whether the alert-source comes from the metric
23   nomenclature partition or the object-oriented nomenclature partition. If the last bit of the alert-code value is 0, the alert-
24   source comes from the metric nomenclature partition. If the last bit is 1 (1 is added to the base code in the events
25   nomenclature), the alert-source comes from the object-oriented nomenclature partition.
26     --
27     -- AlertStatus object provides a capability list with entries for each supervised object in its scope
28     --
29     AlertCapabList ::= SEQUENCE OF AlertCapabEntry

30     AlertCapabEntry ::= SEQUENCE {
31          obj-reference             HANDLE,
32          obj-class                 OID-Type,
33          alert-group               OID-Type,                    -- allows grouping of Alert objects so that a processor
34                                                                 -- can select to display only one from a given group
35                                                                 -- (metric ID)
36          al-rep-flags                      AlertRepFlags,       -- defines how multiple alarms are communicated
37          max-t-severity                    AlertType,           -- most severe technical alarm
38          max-t-obj-al                      INT-U16,             -- maximum number of parallel technical alarms for
39                                                                 -- this object
40          max-p-severity                    AlertType,           -- most severe physiological alarm
41          max-p-obj-al                      INT-U16              -- maximum number of parallel physiological alarms

                                                                102
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1                                                               -- for this object
 2     }

 3     AlertRepFlags ::= BITS-16 {
 4          dyn-inst-contents(1),
 5          rep-all-inst(2)
 6     }

 7     --
 8     -- Limit-Spec-List attributed specifies the supervised limit ranges
 9     --
10     LimitSpecList ::= SEQUENCE OF LimitSpecEntry

11   6.4.2.2 Behavior

12   The AlertStatus class does not define any special methods.
13   6.4.2.3 Notifications

14   The AlertStatus class does not generate any special notifications.

15   6.4.3 AlertMonitor class

16   Class:                        AlertMonitor
17   Description:                  “An AlertMonitor object represents the output of a medical device system or system alert
18                                 processor. As such, it represents the overall device or system alert condition and provides
19                                 a list of all alert conditions of the system in its scope. This list includes global state
20                                 information and individual alarm state information that allows the implementation of a
21                                 safety standard-compliant alarm display on a remote system.”
22   Superclass:                   VMO
23   Subclasses:                   --
24   Name Binding:                 Handle
25   Registered As:                MDC_MOC_VMO_AL_MON

26   6.4.3.1 Attributes

27   The AlertMonitor class defines the attributes in Table 33.

28                              Table 33 —AlertMonitor class attributes
       Attribute name           Attribute ID            Attribute type                   Remark                  Qualifier
      Device-Alert-        MDC_ATTR_DEV_              DevAlertCondition      Global device alert status.         M
      Condition            AL_COND
      Device-P-Alarm-      MDC_ATTR_AL_              DevAlarmList            Active physiological alarm list.    M
      List                 MON_P_AL_LIST
      Device-T-Alarm-      MDC_ATTR_AL_               DevAlarmList           Active technical alarm list.        M
      List                 MON_T_AL_LIST
      Device-Sup-          MDC_ATTR_AL_              DevAlarmList            Suppressed physiological alarm      O
      Alarm-List           MON_S_AL_LIST                                     list.
      Limit-Spec-List      MDC_ATTR_AL_               LimitSpecList          List of limit alarm ranges.         O
                           LIMIT_SPEC_LIST
      Suspension-          MDC_ATTR_TIME_             RelativeTime           Remaining alarm suspend time.       O
      Period               PD_AL_SUSP
29


                                                               103
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1    The AlertMonitor class defines in Table 34 the attribute groups or extensions to inherited
2    attribute groups.

 3                          Table 34 —AlertMonitor class attribute groups
            Attribute group                    Attribute group ID                             Group elements
      VMO Static Context Group          MDC_ATTR_GRP_VMO_STATIC                 from VMO:
      (extensible attribute group)                                              Type, Handle
      VMO Dynamic Context               MDC_ATTR_GRP_VMO_DYN                    from VMO:
      Group                                                                     Label-String
      (extensible attribute group)                                              from AlertMonitor:
                                                                                Limit-Spec-List
      AlertMonitor Group                MDC_ATTR_GRP_AL_MON                     from AlertMonitor :
                                                                                Device-Alert-Condition, Device-P-Alarm-
                                                                                List, Device-T-Alarm-List, Device-Sup-
                                                                                Alarm-List, Suspension-Period
4
5    The following ASN.1 data type definitions apply:
 6    --
 7    -- Device-Alert-Condition attribute describes the global MDS alarm status
 8    --
 9    DevAlertCondition ::= SEQUENCE {
10         device-alert-state              AlertState,
11         al-stat-chg-cnt                 AlStatChgCnt,        -- change counter marks state or active alerts change
12         max-p-alarm                     AlertType,
13         max-t-alarm                     AlertType,
14         max-aud-alarm                   AlertType            -- maximum severity of audible alarm
15    }

16    AlertState ::= BITS-16 {
17         al-inhibited(0),                 -- off
18         al-suspended(1),                 -- alert(ing) inactivated temporarily; alert condition acknowledged
19         al-latched(2),                   -- specific alert is latched (or AlMon latches alert conditions)
20         al-silenced-reset(3),            -- (transition only); alert indication stopped, but alarming re-enabled
21         al-dev-in-test-mode(5),          -- device is in test mode; the alarms are not real patient alarms
22         al-dev-in-standby-mode(6),       -- device is in standby mode
23         al-dev-in-demo-mode(7)           -- device is in demonstration mode, the alarms are not real patient alarms
24    }

25    AlStatChgCnt ::= SEQUENCE {
26        al-new-chg-cnt                    INT-U8,             -- Device-Alert-Condition attribute changed
27        al-stack-chg-cnt                  INT-U8              -- alert stack (active alarm list attributes) changed
28    }

29    --
30    -- Device alarm list
31    --
32    DevAlarmList ::= SEQUENCE OF DevAlarmEntry

33    DevAlarmEntry ::= SEQUENCE {
34       al-source                 OID-Type,                    -- from metric or object-oriented nomenclature
35                                                              -- partition
36          al-code                         OID-Type,           -- from events nomenclature partition
37          al-type                         AlertType,
38          al-state                        AlertState,
39          object                          ManagedObjectId,
40          alert-info-id                   PrivateOid,

                                                               104
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1           alert-info                        ANY DEFINED BY alert-info-id
2      }

 3   NOTE— The al-code value is a code that comes from the events nomenclature partition. Entries (i.e., codes) in this
 4   partition are even. The last bit of the code is used to determine whether the al-source comes from the metric nomenclature
 5   partition or the object-oriented nomenclature partition. If the last bit of the al-code value is 0, the al-source comes from
 6   the metric nomenclature partition. If the last bit is 1 (1 is added to the base code in the events nomenclature), the al-
 7   source comes from the object-oriented nomenclature partition.

 8   6.4.3.2 Behavior

 9   The AlertMonitor class does not define any special methods.

10   6.4.3.3 Notifications

11   The AlertMonitor class does not generate any special notifications.

12   6.5 System package

13   6.5.1 VMS class

14   Class:                        VMS
15   Description:                  “The VMS class is the abstract base class for all System Package classes in this model. It
16                                 provides consistent naming and identification of system-related objects.”
17   Superclass:                   Top
18   Subclasses:                   MDS
19   Name Binding:                 Handle
20   Registered As:                MDC_MOC_VMS

21   6.5.1.1 Attributes

22   The VMS class defines the attributes in Table 35.

23                                     Table 35 —VMS class attributes
       Attribute name            Attribute ID             Attribute type                    Remark                  Qualifier
      Handle                MDC_ATTR_ID_               HANDLE                    Name binding attribute.            M
                            HANDLE
      System-Type           MDC_ATTR_SYS_              TYPE                      Examples: ventilator, monitor      M
                            TYPE                                                 as defined in nomenclature
      System-Model          MDC_ATTR_ID_               SystemModel               Model describes manufacturer       C
                            MODEL                                                and model number.
      System-Id             MDC_ATTR_SYS_              OCTET STRING              Unique system ID, e.g., serial     C
                            ID                                                   number.
      Compatibility-Id      MDC_ATTR_ID_               INT-U32                   For manufacturer use.              O
                            COMPAT
      Nomenclature-         MDC_ATTR_NOM_              NomenclatureVersion       Version ISO/IEEE 11073 part        C
      Version               VERS                                                 10101 used by the system.
      System-               MDC_ATTR_SYS_              SystemCapability          Set of supported features;         O
      Capability            CAPAB                                                system specific.
      System-               MDC_ATTR_SYS_              SystemSpec                Defines functional                 O
      Specification         SPECN                                                components.
      Production-           MDC_ATTR_ID_               ProductionSpec            Component revisions, serial        O
      Specification         PROD_SPECN                                           numbers, etc.

                                                                105
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



       Attribute name          Attribute ID             Attribute type                    Remark                 Qualifier
      Udi                  MDC_ATTR_ID_UDI           UdiSpec                  This attribute defines the         O
                                                                              UDI(s) under which this
                                                                              product is listed with an
                                                                              authority such as the US FDA.
      Ext-Obj-            MDC_ATTR_EXT_              ExtObjRelationList       Relations to objects that are      O
      Relations           OBJ_REL ATION                                       not defined in the DIM.
1
2    The conditional (C) VMS attributes are mandatory for the top-level VMS object instance (i.e., root object
3    instance of the containment tree); they are optional otherwise.
4    The VMS class defines in Table 36 the attribute groups or extensions to inherited attribute
5    groups.

 6                               Table 36 —VMS class attribute groups
             Attribute group                   Attribute group ID                           Group elements
      System Identification Attribute    MDC_ATTR_GRP_SYS_ID                  from VMS:
      Group                                                                   System-Type, System-Model, System-Id,
      (extensible attribute group)                                            Compatibility-Id, Nomenclature-Version
      System Application Attribute       MDC_ATTR_GRP_SYS_APPL                from VMS:
      Group                                                                   System-Capability, System-Specification
      (extensible attribute group)
      System Production Attribute        MDC_ATTR_GRP_SYS_PROD                from VMS:
      Group                                                                   Production-Specification, Udi
      (extensible attribute group)
7
8    NOTE—The Relationship Attribute Group is not shown again in the definitions of derived classes.

9    The following ASN.1 data type definitions apply:
10     --
11     -- System-Model attribute is specified by manufacturer and manufacturer-specific model number
12     --
13     SystemModel ::= SEQUENCE {
14          manufacturer                     OCTET STRING,
15          model-number                     OCTET STRING
16     }

17     --
18     -- System-Capability attribute is a top-level specification of implemented functions; (the following is an example
19     -- only)
20     --
21     SystemCapability ::= BITS-32 {
22          sc-multiple-context(0),           -- indicates that system uses multiple naming contexts
23          sc-dyn-configuration(1),          -- containment tree changes dynamically
24          sc-dyn-scanner-create(2),         -- system allows host to create Scanner objects dynamically
25          sc-auto-init-scan-list(3),        -- CfgScanner object supports automatic scan list initialization
26          sc-auto-updt-scan-list(4)         -- CfgScanner object supports automatic scan list update
27     }

28     --
29     -- System-Specification attribute allows specific entries for system functional components
30     --
31     SystemSpec ::= SEQUENCE OF SystemSpecEntry



                                                               106
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1     SystemSpecEntry ::= SEQUENCE {
 2          component-capab-id        PrivateOid,
 3          component-spec            ANY DEFINED BY component-capab-id
 4     }

 5     --
 6     -- Production-Specification attribute deals with serial numbers, part numbers, revisions, etc.; note that a device
 7     -- may have multiple components so the Production-Specification attribute should be a printable string defining
 8     -- the component and the "number"
 9     --
10     ProductionSpec ::= SEQUENCE OF ProdSpecEntry

11     ProdSpecEntry ::= SEQUENCE {
12         spec-type                         ProdSpecType,
13         component-id                      PrivateOid,
14         prod-spec                         OCTET STRING
15     }

16     ProdSpecType ::= INT-U16 {
17         unspecified(0),
18         serial-number(1),
19         part-number(2),
20         hw-revision(3),
21         sw-revision(4),
22         fw-revision(5),
23         protocol-revision(6),
24         prod-spec-gmdn(7),                -- Global Medical Device Nomenclature 7
25         device-identifier(8),             -- component of UDi.
26         manufacture-date(9),              -- component of UDI. ISO 8601 formatted date with optional hour.
27         expiry-date(10),                  -- component of UDI. ISO 8601 formatted date with optional hour.
28         lot-number(11)                    -- component of UDI.
29     }

30     --
31     -- UdiSpec supports the encoding of a unique device identitifier such as the US FDA UDI.
32     --
33     UdiSpec ::= SEQUENCE OF UdiSpecification

34     UdiSpecification ::= SEQUENCE {
35         udi-authority               UdiAuthority,
36         udi-issuer                  UdiIssuer,
37         udi-label                   UdiLabel
38     }
39
40     --

41     -- Identifies the regulatory agency having jurisdiction over the creation of the UDI, such as the US FDA.
42     -- The ITU OID for US FDA is 2.16.840.1.113883.3.24
43     UdiAuthority ::= ITU-OID;
44
45
46     -- Organization that is charged with issuing UDIs for devices.
47     -- For example, the US FDA issuers include:
48     -- GS1(2.51), HIBCC(1.0.15961.13.10) and ICCBBA(2.16.840.1.113883.6.18)
49     -- An ITU OID length of 0 should be used if the issuer is unknown or not recorded in the
50     -- device.
51     UdiIssuer ::= ITU-OID;



     7
       The Global Medical Device Nomenclature (GMDN) is based on ISO 15225 and was developed under the auspices of CEN TC257
     SC1

                                                               107
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1
 2     --
 3     -- An ITU OID can be used as an unique identifier for an organization
 4     -- ITU OID trees are maintained by registration authorities with ITU-T and ISO at the top;
 5     -- HL7 manages an OID tree;
 6     -- see http://oid-info.com/index.htm
 7     --
 8     ITU-OID ::= OCTET STRING
 9
10     -- Full text label on the human readable string
11     -- Matches the human readable UDI string that is part of the labeling of the device
12     UdiLabel ::= OCTET STRING
13
14     --
15     -- Nomenclature-Version attribute contains a part of the major version field (i.e., basic compatibility) and the
16     -- minor version (used to identified the latest used update); the major version part is coded as a bit field so that
17     -- systems supporting multiple versions can negotiate the version used within an association
18     --
19     NomenclatureVersion ::= SEQUENCE {
20           nom-major-version                NomenclatureMajorVersion,                -- major version identifier
21           nom-minor-version                INT-U16                                  -- counter to identify minor updates
22     }

23     NomenclatureMajorVersion ::= BITS-16 {
24        majorVersion1(0),
25        majorVersion2(1),
26        majorVersion3(2),
27        majorVersion4(3)
28     }

29   6.5.1.2 Behavior

30   The VMS class does not define any special methods.

31   6.5.1.3 Notifications

32   The VMS class does not generate any special notifications.
33   6.5.2 MDS class

34   Class:                        MDS
35   Description:                  "The MDS class is an abstraction of a device that provides medical information in the form
36                                 of instances of classes that are defined in the Medical Package of the DIM. Further
37                                 specializations of this class are used to represent differences in complexity and scope. As
38                                 a base class, the MDS object cannot be instantiated."
39   Superclass:                   VMS
40   Subclasses:                   CompositeMultipleBedMDS, SinglePatientMDS
41   Name Binding:                 Handle
42   Registered As:                MDC_MOC_VMS_MDS

43   6.5.2.1 Attributes

44   The MDS class defines the attributes in Table 37.




                                                               108
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



1                              Table 37 —MDS class attributes
    Attribute name      Attribute IDa          Attribute type                    Remark                  Qualifierb
    Mds-Status        MDC_ATTR_VMS_         MDSStatus                Device state according to MDS       C
                      MDS_STAT                                       FSM.
    Bed-Label         MDC_ATTR_ID_          OCTET STRING             Printable string identifying        O
                      BED_LABEL                                      system location.
    Soft-Id           MDC_ATTR_ID_          OCTET STRING             Settable, e.g., hospital            O
                      SOFT                                           inventory number.
    Operating-Mode    MDC_ATTR_             PrivateOid                                                   O
                      MODE_OP
    Application-      MDC_ATTR_             ApplicationArea                                              O
    Area              AREA_APPL
    Patient-Type      MDC_ATTR_PT_          PatientType              May control algorithms, see         Oac
                      TYPE                                           7.10.1.1 for definition of type.
    Date-And-Time     MDC_ATTR_             AbsoluteTime             MDS maintains device time.          O
                      TIME_ABS
    Relative-Time     MDC_ATTR_             RelativeTime                                                 O
                      TIME_REL
    Hires-Relative-   MDC_ATTR_             HighResRelativeTime                                          O
    Time              TIME_REL_HI_
                      RES
    Power-Status      MDC_ATTR_             PowerStatus              Either onBattery or onMains.        Obd
                      POWER_STAT
    Altitude          MDC_ATTR_             INT-I16                  Meters above or below sea           O
                      ALTITUDE                                       level.
    Battery-Level     MDC_ATTR_             INT-U16                  In % of capacity; undefined if      O
                      VALBAT_CHARGE                                  value > 100.
    Remaining-        MDC_ATTR_             BatMeasure               See 7.5.9.1 for the definition of   O
    Battery-Time      TIME_BATT_                                     type; minutes are the
                      REMAIN                                         recommended measurement
                                                                     unit.
    Line-Frequency    MDC_ATTR_LINE_        LineFrequency            Frequency of mains; implicitly      O
                      FREQ                                           in hertz (typically either 50 Hz
                                                                     or 60 Hz)
    Association-      MDC_ATTR_ID_          INT-U16                  Counter for number of               O
    Invoke-Id         ASSOC_NO                                       associations on a given
                                                                     communications port;
                                                                     Incremented with each
                                                                     association control service
                                                                     element (ACSE) association
    Locale            MDC_ATTR_             Locale                   Defines charset and language        C
                      LOCALE                                         of printable string attributes in
                                                                     this MDS and contained
                                                                     objects. Contained MDS or
                                                                     VMD objects may define
                                                                     different Locale attributes for
                                                                     their scope. The top-level MDS
                                                                     shall support this attribute.
    a
2     Some of the VMS and MDS attributes need to be exchanged during association as user
3   information fields in the ACSE protocol. The ACSE user information fields should
4   contain only VMS or MDS attributes.


                                                        109
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



      b
 1       The conditional (C) MDS attributes are mandatory for the top-level MDS object
 2    instance (i.e., root object instance of the containment tree); they are optional otherwise.
      c
 3     If MDS supports the PatientDemographics object, the MDS object should not contain
 4    this attribute to avoid conflicts
      d
 5      If more information for battery-powered devices about the battery is needed (especially
 6    if the battery is manageable), a special Battery object should be used.
 7
 8   The MDS class defines in Table 38 the attribute groups or extensions to inherited attribute
 9   groups.

10                              Table 38 —MDS class attribute groups
             Attribute group                  Attribute group ID                         Group elements
      System Identification Attribute    MDC_ATTR_GRP_SYS_ID               from VMS:
      Group                                                                System-Type, System-Model, System-Id,
      (extensible attribute group)                                         Compatibility-Id, Nomenclature-Version
                                                                           from MDS:
                                                                           Soft-Id, Association-Invoke-Id, Locale
      System Application Attribute       MDC_ATTR_GRP_SYS_APPL             from VMS:
      Group                                                                System-Capability, System-Specification
      (extensible attribute group)                                         from MDS:
                                                                           Mds-Status, Bed-Label, Operating-Mode,
                                                                           Application-Area, Patient-Type, Date-And-
                                                                           Time, Relative-Time, Hires-Relative-Time,
                                                                           Power-Status, Altitude, Battery-Level,
                                                                           Remaining-Battery-Time, Line-Frequency
      System Production Attribute        MDC_ATTR_GRP_SYS_PROD             from VMS:
      Group                                                                Production-Specification
      (extensible attribute group)
11
12   The following ASN.1 data type definitions apply:
13    --
14    -- MDS state of one association/connection according to FSM
15    --
16    MDSStatus ::= INT-U16 {
17        disconnected(0),
18        unassociated(1),
19        associating(2),
20        associated(3),
21        configuring(4),
22        configured(5),
23        operating(6),
24        re-initializing(7),
25        terminating(8),
26        disassociating(9),
27        disassociated(10),
28        re-configuring(11)
29    }

30    --
31    -- Application-Area attribute
32    --
33    ApplicationArea ::= INT-U16 {
34         area-unspec(0),
35         area-operating-room(1),

                                                              110
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1          area-intensive-care(2)
 2     }

 3     --
 4     -- Power-Status attribute defines whether the device is on battery or on mains; upper bits define the charging state
 5     --
 6     PowerStatus ::= BITS-16 {
 7          onMains(0),                     -- Power source is mains, feed instance agnostic.
 8          onBattery(1),                   -- Power source is battery, battery instance agnostic.
 9          deviceOff(4),                   -- Device is off, condition detected by an external device interface
10                                          -- or other means.
11          standby(5),                     -- Device is in standby mode, typically at a lower power consumption
12                                          -- level and typically after the power on self-test. Device is
13                                          -- immediately available for use.
14          chargingFull(8),                -- Indicates fully charged, battery instance agnostic.
15          chargingTrickle(9),             -- Indicates at least one charging in trickle state, battery instance
16                                          -- agnostic.
17          chargingOff(10)                 -- Indicates all charging is off, battery instance agnostic.
18     }

19     --
20     -- Line-Frequency attribute
21     --
22     LineFrequency ::= INT-U16 {
23          line-f-unspec(0),
24          line-f-50hz(1),
25          line-f-60hz(2)
26     }

27   6.5.2.2 Behavior

28   The MDS class defines the methods in Table 39.

29                                   Table 39 —MDS instance methods
           Action             Mode                    Action ID                Action parameter             Action result
      Mds-Set-Status     Confirmed            MDC_ACT_SET_MDS_              MdsSetStateInvoke            MdsSetStateResult
                                              STATE
30
31   The following ASN.1 data type definitions apply:
32     --
33     -- MDS-Set-State method permits modification of the state of the MDS state machine e.g., to trigger a reset (if
34     -- supported by a device)
35     -- NOTE--Usage of the authorization type is implementation-specific, especially given the security and operational
36     -- coordination issues involved
37     --
38     MdsSetStateInvoke ::= SEQUENCE {
39          new-state                      MDSStatus,
40          authorization                  INT-U32
41     }

42     MdsSetStateResult ::= MDSStatus

43   6.5.2.3 Notifications

44   The MDS class defines the events in Table 40.


                                                               111
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1                                           Table 40 —MDS events
              Event                  Mode                 Event ID               Event parameter               Event result
      System-Error               Unconfirmed       MDC_NOTI_SYS_              MdsErrorInfo                 —
                                                   ERR
      Mds-Create-                Confirmed         MDC_NOTI_MDS_              MdsCreateInfo                —
      Notification                                 CREAT
      Mds-Attribute-Update       Confirmed         MDC_NOTI_MDS_              MdsAttributeChangeInfo       —
                                                   ATTR_UPDT
 2
 3   The following ASN.1 data type definitions apply:
 4     --
 5     -- System-Error notification in case of system errors
 6     --
 7     MdsErrorInfo ::= SEQUENCE {
 8          error-type PrivateOid,
 9          error-info ANY DEFINED BY error-type
10     }

11     --
12     -- Mds-Create-Notification event is sent after association is established
13     --
14     MdsCreateInfo ::= SEQUENCE {
15         class-id                          ManagedObjectId,
16         attribute-list                    AttributeList        -- attributes from the System Identification Attribute
17                                                                -- Group and System Application Attribute Group
18     }

19     --
20     -- MDS may report changes of attribute values
21     --
22     MdsAttributeChangeInfo ::= AttributeList

23   6.5.3 CompositeMultipleBedMDS class

24   Class:                        CompositeMultipleBedMDS
25   Description:                  "The CompositeMultipleBedMDS class represents a device that contains multiple MDS
26                                 objects at multiple locations (i.e., multiple beds)."
27   Superclass:                   MDS
28   Subclasses:                   --
29   Name Binding:                 Handle
30   Registered As:                MDC_MOC_VMS_MDS_COMPOS_MULTI_BED

31   The CompositeMultipleBedMDS class does not define any attributes, methods,
32   or notifications.

33   6.5.4 SinglePatientMDS class

34   Class:                        SinglePatientMDS
35   Description:                  "The SinglePatientMDS is an abstract class that models a medical device that is associated
36                                 with a single patient."
37   Superclass:                   MDS
38   Subclasses:                   CompositeSingleBedMDS, SingleSystemMDS
39   Name Binding:                 Handle
40   Registered As:                N/A



                                                               112
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   The SinglePatientMDS class does not define any attributes, methods, or notifications.
 2   6.5.5 CompositeSingleBedMDS class

 3   Class:                  CompositeSingleBedMDS
 4   Description:            "The CompositeSingleBedMDS class models a device that contains one or more
 5                           SimpleMDS or HydraMDS objects at one location (i.e., a bed)."
 6   Superclass:             SinglePatientMDS
 7   Subclasses:             --
 8   Name Binding:           Handle
 9   Registered As:          MDC_MOC_VMS_MDS_COMPOS_SINGLE_BED

10   The CompositeSingleBedMDS class does not define any attributes, methods,
11   or notifications.

12   6.5.6 SingleSystemMDS class

13   Class:                  SingleSystemMDS
14   Description:            "The SingleSystemMDS class models a medical device that contains VMD objects and
15                           that may be contained by a CompositeMDS object."
16   Superclass:             SinglePatientMDS
17   Subclasses:             SimpleMDS, HydraMDS
18   Name Binding:           Handle
19   Registered As:          N/A

20   The SingleSystemMDS class does not define any attributes, methods, or notifications.
21   6.5.7 SimpleMDS class

22   Class:                  SimpleMDS
23   Description:            "The SimpleMDS class models a medical device that contains a single VMD instance only
24                           (i.e., a single-purpose device)."
25   Superclass:             SingleSystemMDS
26   Subclasses:             --
27   Name Binding:           Handle
28   Registered As:          MDC_MOC_VMS_MDS_SIMP

29   The SimpleMDS class does not define any attributes, methods, or notifications.
30   6.5.8 HydraMDS class

31   Class:                  HydraMDS
32   Description:            "The HydraMDS class models a device that contains multiple VMD instances (i.e., a
33                           multipurpose device)."
34   Superclass:             SingleSystemMDS
35   Subclasses:             --
36   Name Binding:           Handle
37   Registered As:          MDC_MOC_VMS_MDS_HYD

38   The HydraMDS class does not define any attributes, methods, or notifications.

39   6.5.9 Log class

40   Class:                  Log
41   Description:            "A Log object is a storage container for important local system notifications and events.
42                           Further specializations define specific event types that are stored in the Log object. The
43                           Log class is an abstract base class and cannot be instantiated."

                                                        113
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   Superclass:                  Top
 2   Subclasses:                  EventLog
 3   Name Binding:                Handle
 4   Registered As:               MDC_MOC_LOG

 5   6.5.9.1 Attributes

 6   The Log class defines the attributes in Table 41.

 7                                    Table 41 —Log class attributes
       Attribute name           Attribute ID          Attribute type                   Remark                    Qualifier
      Handle               MDC_ATTR_ID_               HANDLE              Name binding attribute.               M
                           HANDLE
      Max-Log-Entries      MDC_ATTR_LOG_              INT-U32             Maximum capacity of the Log           M
                           ENTRIES_MAX                                    object; GET service used to
                                                                          retrieve this attribute.
      Current-Log-         MDC_ATTR_LOG_              INT-U32             Current used capacity of the Log      M
      Entries              ENTRIES_CURR                                   object; GET service used to
                                                                          retrieve this attribute.
      Log-Change-          MDC_ATTR_LOG_              INT-U16             Incremented when log contents         O
      Count                CHANGE_COUNT                                   change.
 8
 9   NOTE—It is assumed that Log object entries are indexed from 0 to the Current-Log-Entries attribute value.

10   The Log class does not define any attribute groups.

11   6.5.9.2 Behavior

12   The Log class defines the methods in Table 42.

13                                  Table 42 —Log instance methods
          Action             Mode                 Action ID                Action parameter               Action result
      Clear-Log         Confirmed          MDC_ACT_CLEAR_              ClearLogRangeInvoke           ClearLogRangeResult
                                           LOG                                                       (optional)
14
15   The following ASN.1 data type definitions apply:
16     --
17     -- Range of log entries to be deleted; if the parameter is not appended to the Clear-Log method, the complete log
18     -- shall be cleared unconditionally
19     --
20     ClearLogRangeInvoke ::= SEQUENCE {
21          clear-log-option                  ClearLogOptions,
22          log-change-count                  INT-U16,                                 -- 0 if unconditional clear
23          from-log-entry-index              INT-U32,
24          to-log-entry-index                INT-U32
25     }

26     ClearLogRangeResult ::= SEQUENCE {
27         clear-log-result           ClearLogResult,
28         log-change-count           INT-U16,                  -- current change count after clear
29         from-log-entry-index       INT-U32,                  -- do not care if not successful
30         to-log-entry-index         INT-U32,                  -- do not care if not successful
31         current-log-entries        INT-U32                   -- updated number of entries in the log

                                                               114
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1      }

2      --
3      -- Options that control the clear command
4      --
5      ClearLogOptions ::= BITS-16 {
6           log-clear-if-unchanged(1)        -- only perform this action if the log has not been changed; in other words,
7                                            -- the evlog-change-count in the request is still current
8      }

 9     --
10     -- Result of the clear log function
11     --
12     ClearLogResult ::= INT-U16 {
13          log-range-cleared(0),                                -- successful operation
14          log-changed-clear-error(1),                          -- the change count was wrong (i.e., log has been
15                                                               -- modified)
16           log-change-counter-not-supported(2)                 -- log does not support a change counter
17     }

18   6.5.9.3 Notifications

19   The Log class does not generate any special notifications.

20   6.5.10 EventLog class

21   Class:                        EventLog
22   Description:                  "An EventLog object is a general Log object that stores system events in a free-text or in a
23                                 binary representation."
24   Superclass:                   Log
25   Subclasses:                   --
26   Name Binding:                 Handle
27   Registered As:                MDC_MOC_LOG_EVENT

28   6.5.10.1 Attributes

29   The EventLog class defines the attributes in Table 43.

30                                 Table 43 —EventLog class attributes
      Attribute name            Attribute ID           Attribute type                    Remark                   Qualifier
      Type                 MDC_ATTR_ID_              TYPE                   Further specification of log entry    O
                           TYPE                                             format.
      Event-Log-           MDC_ATTR_                 EventLogEntryList      Event entries; can be retrieved       M
      Entry-List           EVENT_LOG_                                       with GET service.
                           ENTRY_LIST
      Event-Log-Info       MDC_ATTR_                 EventLogInfo           Static and dynamic                    O
                           EVENT_LOG_INFO                                   specifications.
31
32   The EventLog class does not define any attribute groups.

33   The following ASN.1 data type definitions apply:
34     --
35     -- Event-Log-Entry-List attribute
36     --
37     EventLogEntryList ::= SEQUENCE OF EventLogEntry

                                                                115
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1     EventLogEntry ::= SEQUENCE {
2         entry-number                         INT-U32,                                    -- entry counter independent of the
3                                                                                          -- index number that is used for
4                                                                                          -- access
5           abs-time                           AbsoluteTime,                               -- event time
6           event-entry                        OCTET STRING                                -- free text or binary event
7                                                                                          -- information; structure defined by
8                                                                                          -- the Type attribute
9     }

10    --
11    -- Event-Log-Info attribute
12    -- Bits 0 to 15 are reserved for static information; bits 16 to 31 are dynamically updated to reflect log status
13    -- changes
14    -- If this attribute is not present, all bits are implicitly assumed 0
15    --
16    EventLogInfo ::= BITS-32 {
17           ev-log-clear-range-sup(0),          -- supports to clear specified ranges (not just the entire log)
18           ev-log-get-act-sup(1),              -- supports retrieving individual entries using the Get-Event-Log method
19                                               -- (not just a simple GET service)
20           ev-log-binary-entries(8),           -- log entries are binary, not free text
21           ev-log-full(16),                    -- log is full; cleared as soon as the log contains at least 1 free entry as a
22                                               -- result of a clear action
23           ev-log-wrap-detect(17)              -- set when the log is full and the first old entry is overwritten; cleared as
24                                               -- soon as the log contains at least 1 free entry as a result of a clear action
25    }

26   6.5.10.2 Behavior

27   The EventLog class defines the methods in Table 44.

28                               Table 44 —EventLog instance methods
          Action            Mode                  Action ID                 Action parameter                    Action result
      Get-Event-       Confirmed            MDC_ACT_GET_                GetEventLogEntryInvoke           GetEventLogEntryResult
      Log-Entries                           EVENT_LOG_
                                            ENTRIES
29
30   The following ASN.1 data type definitions apply:
31    --
32    -- Range of log entries to be retrieved
33    --
34    GetEventLogEntryInvoke ::= SEQUENCE {
35         from-log-entry-index              INT-U32,
36         to-log-entry-index                INT-U32
37    }

38    --
39    -- Reply containing the requested entries; depending on agent restrictions, the reply may contain only a part of the
40    -- requested entries; this situation must be checked by the manager
41    --
42    GetEventLogEntryResult ::= SEQUENCE {
43          log-change-count                 INT-U16,                                -- current log change counter (0 if
44                                                                                   -- not supported)
45          from-log-entry-index             INT-U32,
46          to-log-entry-index               INT-U32,
47          entry-list                       EventLogEntryList
48    }

                                                                116
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   6.5.10.3 Notifications

 2   The EventLog class does not generate any special notifications.

 3   6.5.11 Battery class

 4   Class:                    Battery
 5   Description:              "For battery-powered devices, some battery information is contained in the MDS object in
 6                             the form of attributes. If the battery subsystem is either capable of providing more
 7                             information (i.e., smart battery) or manageable, then a special Battery object is provided."
 8   Superclass:               Top
 9   Subclasses:               --
10   Name Binding:             Handle
11   Registered As:            MDC_MOC_BATT

12   6.5.11.1 Attributes

13   The Battery class defines the attributes in Table 45.

14                               Table 45 —Battery class attributes
       Attribute name         Attribute ID         Attribute type                   Remark                    Qualifier
      Handle            MDC_ATTR_ID_              HANDLE               Name binding attribute.                M
                        HANDLE
      Battery-Status    MDC_ATTR_BATT_            BatteryStatus                                               M
                        STAT
      Production-       MDC_ATTR_ID_              ProductionSpec       A smart battery system may have        O
      Specification     PROD_SPECN                                     a serial number or version.
      Capacity-         MDC_ATTR_                 BatMeasure           Remaining capacity at current load     O
      Remaining         CAPAC_BATT_                                    (e.g., in milliAmperehours).
                        REMAIN
      Capacity-Full-    MDC_ATTR_                 BatMeasure           Battery capacity after a full          O
      Charge            CAPAC_BATT_                                    charge.
                        FULL
      Capacity-         MDC_ATTR_                 BatMeasure           Specified capacity of new battery.     O
      Specified         CAPAC_BATT_
                        SPECN
      Remaining-        MDC_ATTR_TIME_            BatMeasure                                                  O
      Battery-Time      BATT_REMAIN
      Voltage           MDC_ATTR_BATT_            BatMeasure           Present battery voltage                O
                        VOLTAGE
      Voltage-          MDC_ATTR_BATT_            BatMeasure           Specified battery voltage.             O
      Specified         VOLTAGE_SPECN
      Current           MDC_ATTR_BATT_            BatMeasure           Present current delivered by/to        O
                        CURR                                           battery; negative if battery is
                                                                       charge.
      Battery-          MDC_ATTR_TEMP_            BatMeasure                                                  O
      Temperature       BATT
      Charge-Cycles     MDC_ATTR_BATT_            INT-U32              Number of charge/discharge             O
                        CHARGE_CYCLES                                  cycles.
15
16   The Battery class defines in Table 46 the attribute groups or extensions to inherited
17   attribute groups.

                                                            117
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1                              Table 46 —Battery class attribute groups
             Attribute group                  Attribute group ID                          Group elements
      Battery Attribute Group             MDC_ATTR_GRP_BATT                 from Battery:
                                                                            Handle, Battery-Status, Production-
                                                                            Specification, Capacity-Remaining,
                                                                            Capacity-Full-Charge, Capacity-Specified,
                                                                            Remaining-Battery-Time, Voltage, Voltage-
                                                                            Specified, Current, Battery-Temperature,
                                                                            Charge-Cycles
 2
 3   The following ASN.1 data type definitions apply:
 4     --
 5     -- Battery Status bit field
 6     --
 7     BatteryStatus ::= BITS-16 {
 8          batt-discharged(0),
 9          batt-full(1),                   -- > 95% of capacity
10          batt-discharging(2),
11          batt-chargingFull(8),
12          batt-chargingTrickle(9),
13          batt-malfunction(12),
14          batt-needs-conditioning(13)     -- battery needs conditioning
15     }

16     --
17     -- All measures about the battery are values with their dimensions
18     --
19     BatMeasure ::= SEQUENCE {
20          value       FLOAT-Type,
21          unit        OID-Type             -- from dimensions nomenclature partition
22     }

23   6.5.11.2 Behavior

24   The Battery class does not define any special methods.

25   6.5.11.3 Notifications

26   The Battery class does not generate any special notifications.

27   6.5.12 Clock class

28   Class:                       Clock
29   Description:                 "The Clock class provides additional date/time capability and status information beyond
30                                the information provided by the basic MDS class’s time-related attributes. The Clock class
31                                does not imply any specific hardware or software support."
32   Superclass:                  Top
33   Subclasses:                  --
34   Name Binding:                Handle
35   Registered As:               MDC_MOC_CLOCK

36   6.5.12.1 Attributes

37   The Clock class defines the attributes in Table 47.


                                                               118
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



1                             Table 47 —Clock class attributes
       Attribute        Attribute ID             Attribute type                    Remark                Qualifier
        name
    Handle            MDC_ATTR_ID_         HANDLE                        Name binding attribute.         M
                      HANDLE
    Time-Support      MDC_ATTR_            TimeSupport                   Indicates the time services     M
                      TIME_SUPPORT                                       provided by the device.
    Date-Time-        MDC_ATTR_            DateTimeStatus                General information about       C
    Status            DATE_TIME_                                         the functioning of time-
                      STATUS                                             support services. Mandatory
                                                                         if remote sync services are
                                                                         supported by the device
                                                                         [e.g., Simple Network Time
                                                                         Protocol (SNTP)]; optional
                                                                         otherwise.
    Date-And-Time     MDC_ATTR_            AbsoluteTime                  Current date/time setting.      O
                      TIME_ABS
    ISO-Date-And-     MDC_ATTR_            AbsoluteTimeISO               Date and time string            O
    Time              TIME_ABS_ISO                                       formatted in accordance
                                                                         with ISO 8601; provides for
                                                                         international coordinated
                                                                         universal time (UTC)
                                                                         coordination. Attribute is in
                                                                         wide use by computing
                                                                         systems; however, it is
                                                                         ASCIIbased and thus less
                                                                         efficient than absolute time.
    Relative-Time     MDC_ATTR_            RelativeTime                  Relative time (in 8 kHz         O
                      TIME_REL                                           ticks).
    Hires-Relative-   MDC_ATTR_            HighResRelativeTime           High-resolution relative        O
    Time              TIME_REL_HI_                                       time (in 1 MHz ticks).
                      RES
    Ext-Time-         MDC_ATTR_            ExtTimeStampList              Extended timestamp (which       O
    Stamp-List        TIME_STAMP_                                        may be used individually
                      LIST_EXT                                           elsewhere in data
                                                                         structures).
    Absolute-         MDC_ATTR_            AbsoluteRelativeTimeSync      Provides a means of             O
    Relative-Sync     TIME_ABS_REL_                                      correlating between
                      SYNC                                               absolute time and relative
                                                                         time values.a
    Time-Zone         MDC_ATTR_            UTCTimeZone                   Identifies the UTC local        O
                      TIME_ZONE                                          time zone offset [from
                                                                         Greenwich mean time
                                                                         (GMT)] and label.
    Daylight-         MDC_ATTR_            DaylightSavingsTransition     Provides the settings for the   O
    Savings-          TIME_                                              next daylight savings time
    Transition        DAYLIGHT_                                          transition.
                      SAVINGS_TRANS
    Cumulative-       MDC_ATTR_            INT-U32                       Cumulative leap-seconds         O
    Leap-Seconds      CUM_LEAP_                                          relative to January 1, 1900,
                      SECONDS                                            00:00:00.00. Format is +nn.
                                                                         For the entire year 2001,
                                                                         this value is +32.b




                                                         119
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



        Attribute             Attribute ID              Attribute type                      Remark                 Qualifier
         name
      Next-Leap-         MDC_ATTR_                LeapSecondsTransition           Specifies the settings for       O
      Seconds            NEXT_LEAP_                                               when the next leap-seconds
                         SECOND                                                   transition shall occur and
                                                                                  the next value.
       a
 1      This attribute is periodically updated internally (e.g., once per minute) and thus does not
 2     reflect the actual time when read (e.g., using a GET service). The error between relative
 3     and absolute time should be as small as possible given system limitations (e.g., an atomic
 4     operation should be used if possible). The attribute should be updated frequently enough
 5     to minimize the error between the reported mapping and should be updated at a minimum
 6     of every 6 days, namely when the relative time would roll over to 0.
       b
 7       When subtracted from SNTP seconds yields UTC seconds.
 8
 9   The Clock class defines in Table 48 the attribute groups or extensions to inherited attribute
10   groups.

11                              Table 48 —Clock class attribute groups
             Attribute group                   Attribute group ID                            Group elements
      Clock Attribute Group              MDC_ATTR_GRP_CLOCK                  from Clock:
                                                                             Handle, Time-Support, Date-Time-Status,
                                                                             Date-And-Time, ISO-Date-And-Time,
                                                                             Relative-Time, Hires-Relative-Time, Ext-
                                                                             Time-Stamp-List, Absolute-Relative-Sync,
                                                                             Time-Zone, Daylight-Savings-Transition,
                                                                             Cumulative-Leap-Seconds, Next-Leap-
                                                                             Seconds
12
13   The following ASN.1 data type definitions apply:
14    --
15    -- Time-Support attribute provides general information about time-related services that are provided by the device
16    -- Some of this information could be determined by examining the presence/absence of various attributes in a
17    -- containment tree; however, its presence here simplifies time management for device managers
18    --
19    -- NOTES
20    -- 1-- If remote date/time synchronization is supported (e.g., SNTP), then either the Date-And-Time or ISO-Date-
21    --     And-Time attribute must also be supported
22    -- 2-- If the device is also a server of time information (e.g., an SNTP server), this fact should be indicated in the
23    --     time protocol IDs
24    --
25    TimeSupport ::= SEQUENCE {
26          time-capability                     TimeCapability,                        -- Flags indicating general time
27                                                                                     -- support
28          relative-resolution                 INT-U32,                               -- Time between actual ticks in
29                                                                                     -- microseconds; set to
30                                                                                     -- 0xFFFFFFFF if not defined or
31                                                                                     -- specified
32          time-protocols                      TimeProtocolIdList                     -- List of external time protocols
33                                                                                     -- supported (e.g., SNTP)
34    }

35    TimeProtocolIdList ::= SEQUENCE OF TimeProtocolId



                                                               120
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1   NOTE—The relative-resolution type provides a means of correlating the 8 kHz frequency reported by the relative time
 2   value to the device’s time sources from which it is being derived. For example, if the device’s timer updates at 100 Hz
 3   or 18.2 Hz [as is the case in older personal computers (PCs)], then the resolution and accuracy of the relative time would
 4   reflect this time source resolution and accuracy.
 5     --
 6     -- Time capability
 7     --
 8     TimeCapability ::= BITS-32 {
 9          time-capab-real-time-clock(0),                       -- the device includes hardware support for time
10                                                               -- (including battery power)
11          time-capab-ebww(1),                                  -- time can be set locally/manually ("eyeball and
12                                                               -- wristwatch" or "EBWW")
13          time-capab-leap-second-aware(2),                     -- supports adjustment of time for leap-seconds (SNTP-
14                                                               -- related)
15          time-capab-time-zone-aware(3),                       -- supports time zone-related attributes
16          time-capab-internal-only(4),                         -- date/time is used only internally to the device; not
17                                                               -- displayed to operator
18          time-capab-time-displayed(5),                        -- date/time can be displayed continually on the device
19                                                               -- versus in a menu
20          time-capab-patient-care(6),                          -- date/time is used in critical patient care
21                                                               -- algorithms/protocols
22          time-capab-rtsa-time-sync-annotations(7),            -- timestamp annotations supported for real-time
23                                                               -- waveform data (RealTimeSampleArray objects)
24          time-capab-rtsa-time-sync-high-precision(8),         -- RealTimeSampleArray objects support attributes
25                                                               -- for high precision sample timestamps
26          time-capab-set-time-action-sup(16),                  -- Clock object supports the set time action
27          time-capab-set-time-zone-action-sup(17),             -- Clock object supports the set time zone action
28          time-capab-set-leap-sec-action-sup(18),              -- Clock object supports the set leap-seconds action
29          time-capab-set-time-iso-sup(19)                      -- Clock object supports the set time ISO action
30     }

31     --
32     -- Time protocol ID indicates the time protocols that are supported/used by the device
33     -- OID-Types from the infrastructure nomenclature partition
34     --
35     TimeProtocolId ::= OID-Type

36     --
37     -- Timestamp ID (e.g., for SNTP timestamps)
38     -- OID-Types from the infrastructure nomenclature partition
39     --
40     TimeStampId ::= OID-Type

41     --
42     -- Extended timestamp (e.g., SNTP timestamp value)
43     --
44     ExtTimeStamp ::= SEQUENCE {
45          time-stamp-id                  TimeStampId,
46          time-stamp                     ANY DEFINED BY time-stamp-id
47     }

48     ExtTimeStampList ::= SEQUENCE OF ExtTimeStamp

49     --
50     -- Date-Time-Status attribute defines the current/active usage status for date and time in the device
51     --
52     DateTimeStatus ::= SEQUENCE {
53          usage-status                     DateTimeUsage, -- flags indicating dynamic time usage
54          clock-last-set                   AbsoluteTime,        -- time the absolute time was last set
55          clock-accuracy                   FLOAT-Type,          -- decimal number indicating the accuracy or
56                                                                -- maximum error of the absolute time relative to a

                                                               121
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1                                                                  -- primary reference clock source (in seconds)
2           active-sync-protocol              TimeProtocolId       -- protocol that is actively being used for time
3                                                                  -- synchronization
4      }

 5   NOTE 1—If a time synchronization protocol is used that changes the time and date at a high frequency, the clock-last-
 6   set type value should be updated at a lower periodicity (e.g., once every 10 min or once an hour), so that communications
 7   bandwidth is not consumed unnecessarily.
 8   NOTE 2—In systems where time synchronization is not used (i.e., EBWW is source), the clock-accuracy type should be
 9   initialized to 2 or 3 min when the clock time is set and should be incremented periodically to reflect drift from an absolute
10   external reference source. If NTP is used, clock-accuracy type initialization is equivalent to Root Dispersion + ½ Root
11   Delay.
12     --
13     -- Date/time usage flags indicate dynamic usage status for date and time in the device; no bits set indicates
14     -- unknown/indeterminate status
15     --
16     DateTimeUsage ::= BITS-16 {
17          dt-use-remote-sync(0),           -- date/time is synchronized to an external source
18          dt-use-operator-set(1),          -- date/time set by operator (i.e., EBWW)
19          dt-use-rtc-synced(2),            -- date/time in the RTC has been synchronized to a remote time source
20          dt-use-critical-use(3),          -- date/time is actively being used in care delivery algorithms/protocols
21          dt-use-displayed(4)              -- date/time is actively being displayed to the operator
22     }

23     --
24     -- ISO-Date-and-Time attribute is an ASCII string that can provide additional information beyond the basic
25     -- date/time setting (e.g., UTC offset or device-local time zone indication); this attribute can be set using the SET
26     -- service (as can the Date-And-Time attribute)
27     -- Note that if both AbsoluteTime and AbsoluteTimeISO types are concurrently supported, they shall reflect the
28     -- same time (relative to their accuracy and resolution limitations)
29     -- Although not mandatory, it is highly recommended that all optional fields be included in the string
30     -- To simplify processing, the following constraints shall apply:
31     -- (a) Only complete representations shall be used
32     -- (b) Only extended formats shall be used
33     -- (c) "Week date" and “ordinal "day of the year" representations shall not be used; only calendar dates
34     -- (d) Decimal fractions shall be used only for partial seconds (e.g., not fractional hours)
35     -- (e) Per ISO 8601:2000(E), the representation of decimal fractions shall be in accordance with Section 5.3.1.3
36     -- (f) If known, UTC shall be communicated as the offset between local and
37     -- GMT/UTC time. If the local time zone offset is unknown, i.e. NTP is used, then UTC timeshall be specified
38     -- using Zulu (or Z) formatby adding a time offset of -0000. +0000 shall be used to indicate GMT.
39     -- (g) Specification of time intervals and recurring periods is beyond the use of this data type and shall require a
40     -- definition of a new data type if used (e.g., ISOTimeInterval ::= OCTET STRING); for example: November 24,
41     -- 2001, 3:45:32.65 P.M. in San Diego, California, USA, shall be represented by the following string: 2001-11-
42     -- 24T15:45:32,65-08:00
43     --
44     -- ASCII text string that adheres to ISO 8601 format
45     --
46     AbsoluteTimeISO ::= OCTET STRING

47     --
48     -- SNTPTimeStamp, a 64-bit timestamp value that is provided by an SNTP time synchronization service
49     --
50     SNTPTimeStamp ::= SEQUENCE {
51          seconds  INT-U32,            -- Seconds since January 1, 1900 00:00
52          fraction INT-U32             -- Binary fraction of a second
53     }

54     --
55     -- Absolute-Relative-Sync attribute provides a means for correlating relative timestamps to the device's date/time
56     -- setting

                                                                 122
                                              Copyright © 2018 IEEE. All rights reserved.
                                   This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1   -- NOTE--This attribute needs to be updated only periodically to account for drift between the various time
 2   -- sources (e.g., once a minute)
 3   --
 4   AbsoluteRelativeTimeSync ::= SEQUENCE {
 5        absolute-time-mark              AbsoluteTime,                           -- use of this data type limits
 6                                                                                -- resolution to 1/100 second
 7        relative-time-mark              RelativeTime,                           -- UHVROXWLRQOLPLWHGE\ȝVWLFN
 8                                                                                -- and resolution/accuracy settings
 9                                                                                -- for relative time service
10        relative-rollovers              INT-U16,                                -- number of times the relative time
11                                                                                -- has "rolled over" from its
12                                                                                -- maximum value to 0
13                                                                                -- NOTE--The relative time will
14                                                                                -- roll over every 6.2 days
15        hires-time-mark                 HighResRelativeTime,                    -- defaults to 0x00000000 if not
16                                                                                -- supported
17        ext-time-marks                  ExtTimeStampList                        -- list is empty if no extended
18                                                                                -- timestamps are supported
19   }

20   --
21   -- Time-Zone attribute supports time zone information for UTC
22   --
23   UTCTimeZone ::= SEQUENCE {
24        time-zone-offset-hours          INT-I8,                                   -- device's local time zone (i.e., at
25                                                                                  -- the point of care), relative to
26                                                                                  -- UTC
27                                                                                  -- format is +hh for time zones east
28                                                                                  -- of GMT and -hh for locations
29                                                                                  -- west of GMT
30        time-zone-offset-minutes         INT-U8,                                  -- minutes offset from GMT (if
31                                                                                  -- specified); format conventions
32                                                                                  -- are the same as the conventions
33                                                                                  -- for hours, only they are not
34                                                                                  -- signed (shall always be a positive
35                                                                                  -- value); default is NULL
36        time-zone-label                  OCTET STRING                             -- device's local time zone label,
37                                                                                  -- e.g., PST or PDT; see device's
38                                                                                  -- Locale attribute for string
39                                                                                  -- encoding
40   }

41   --
42   -- Daylight-Savings-Transition attribute specifies the settings for the next transition to/from daylight savings time
43   --
44   DaylightSavingsTransition ::= SEQUENCE {
45        transition-date                  AbsoluteTime,         -- device’s local date/time when the daylight savings
46                                                               -- transition will occur
47        next-offset                      UTCTimeZone           -- new local time zone offset and label after transition
48                                                               -- date
49                                                               -- NOTE--May be same as previous value
50   }

51   --
52   -- Next-Leap-Seconds attribute specifies the settings for the next leap-seconds transition
53   --
54   LeapSecondsTransition ::= SEQUENCE {
55        transition-date                 Date,                 -- device's local date when the transition will occur;
56                                                              -- adjustment occurs at the end (i.e., 23:59:59Z) of the
57                                                              -- specified date
58        next-cum-leap-seconds           INT-U32               -- next cumulative leap-seconds value (see Cumulative-
59                                                              -- Leap-Seconds in Clock class attributes table)

                                                             123
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



1                                                              -- NOTE--May be same as previous value
2     }

 3   6.5.12.2 Behavior

 4   The Clock class defines the methods in Table 49.

 5                               Table 49 —Clock instance methods
          Action               Mode                      Action ID                 Action parameter               Action
                                                                                                                  result
      Set-Time          Confirmed             MDC_ACT_SET_TIME                 SetTimeInvoke                  —
      Set-Time-Zone     Confirmed             MDC_ACT_SET_TIME_                SetTimeZoneInvoke              —
                                              ZONE
      Set-Leap-         Confirmed             MDC_ACT_SET_LEAP_                SetLeapSecondsInvoke           —
      Seconds                                 SECONDS
      Set-Time-ISO      Confirmed             MDC_ACT_SET_TIME_                AbsoluteTimeISO                —
                                              ISO
 6
 7   When setting the time with either Set-Time or Set-Time-ISO methods, all supported
 8   absolute timestamp attributes (i.e., Date-and-Time, ISO-Date-and-Time and possibly Ext-
 9   Time-Stamp-List) shall be updated consistently.

10   The following ASN.1 data type definitions apply:
11    --
12    -- Date/time to be set
13    --
14    SetTimeInvoke ::= SEQUENCE {
15         date-time AbsoluteTime,
16         accuracy FLOAT-Type            -- accounts for manually set time (e.g., 2 min error); value is defined in
17                                        -- seconds
18    }

19    --
20    -- Time zone information to be set
21    --
22    SetTimeZoneInvoke ::= SEQUENCE {
23         time-zone                     UTCTimeZone,                              -- current time zone to be used by
24                                                                                 -- device
25         next-time-zone                 DaylightSavingsTransition                -- information for the next
26                                                                                 -- transition to/from daylight
27                                                                                 -- savings time
28    }

29    --
30    -- Cumulative leap-seconds information to be set
31    --
32    SetLeapSecondsInvoke ::= SEQUENCE {
33         leap-seconds-cum               INT-I32,                                 -- cumulative leap-seconds, which
34                                                                                 -- when subtracted from S/NTP
35                                                                                 -- seconds yields UTC seconds
36         next-leap-seconds              LeapSecondsTransition                    -- date of transition from previous
37                                                                                 -- to new cumulative leap-second
38                                                                                 -- value + new value
39    }


                                                             124
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1   6.5.12.3 Notifications

 2   The Clock class defines the events in Table 50.

 3                                          Table 50 —Clock events
              Event                  Mode                 Event ID                Event parameter              Event result
      Clock-Date-Time-           Unconfirmed      MDC_NOTI_DATE_               ClockStatusUpdateInfo       —
      Status- Changed                             TIME_CHANGED
 4
 5   The following ASN.1 data type definitions apply:
 6     --
 7     -- Clock status update information is sent, for example, when the relative time setting rolls over to 0 or when the
 8     -- time is changed by the device operator
 9     --
10     ClockStatusUpdateInfo ::= SEQUENCE {
11           date-time-status                DateTimeStatus,                          -- current clock/time usage status
12           time-sync                       AbsoluteRelativeTimeSync                 -- current time synchronization
13                                                                                    -- values
14     }


15   6.6 Control package

16   6.6.1 SCO class

17   Class:                        SCO
18   Description:                  "The SCO is responsible for managing all remote control capabilities that are supported by
19                                 a medical device. The SCO is the primary access point for invoking remote control
20                                 functions. It contains all Operation objects and provides a means for transaction processing.
21                                 All Operation object invoke commands shall be done through the SCO."
22   Superclass:                   VMO
23   Subclasses:                   --
24   Name Binding:                 Handle (VMO inherited)
25   Registered As:                MDC_MOC_CNTRL_SCO

26   6.6.1.1 Attributes

27   The SCO class defines the attributes in Table 51.

28                                    Table 51 —SCO class attributes
      Attribute name           Attribute ID             Attribute type                     Remark                   Qualifier
      Sco-Capability      MDC_ATTR_SCO_              ScoCapability            Static option flag field.            M
                          CAPAB
      Sco-Help-Text-      MDC_ATTR_SCO_              OCTET STRING             Help text.                           O
      String              HELP_TEXT_
                          STRING
      Vmo-Reference       MDC_ATTR_VMO_              HANDLE                   Reference to controlled item, if     O
                          REF                                                 not the VMD.
      Activity-           MDC_ATTR_                  ScoActivityIndicator     Can be set by remote system to       O
      Indicator           INDIC_ACTIV                                         give feedback that system is
                                                                              under remote control.
      Lock-State          MDC_ATTR_STAT_             AdministrativeState      If locked, no operation can be       M
                          LOCK                                                invoked.

                                                               125
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name           Attribute ID             Attribute type                    Remark                  Qualifier
      Invoke-Cookie       MDC_ATTR_ID_               INT-U32                 Transaction ID assigned by           M
                          INVOK_COOKIE                                       invoke command.
 1
 2   The SCO class defines in Table 52 the attribute groups or extensions to inherited attribute
 3   groups.

 4                               Table 52 —SCO class attribute groups
           Attribute group                        Attribute group ID                             Group elements
      VMO Static Context             MDC_ATTR_GRP_VMO_STATIC                          from VMO:
      Group                                                                           Type, Handle
      (extensible attribute group)                                                    from SCO:
                                                                                      Sco-Capability, Sco-Help-Text-String
      VMO Dynamic Context            MDC_ATTR_GRP_VMO_DYN                             from VMO:
      Group                                                                           Label-String
      (extensible attribute group)                                                    from SCO:
                                                                                      Vmo-Reference, Activity-Indicator
      SCO Transaction Group          MDC_ATTR_GRP_SCO_TRANSACTION                     from SCO:
                                                                                      Lock-State, Invoke-Cookie
 5
 6   The following ASN.1 data type definitions apply:
 7    --
 8    -- Activity-Indicator attribute can be set by a remote system to indicate that remote control is active
 9    --
10    ScoActivityIndicator ::= INT-U16 {
11         act-ind-off(0),
12         act-ind-on(1),
13         act-ind-blinking(2)
14    }

15    --
16    -- Sco-Capability bits
17    --
18    ScoCapability ::= BITS-16 {
19         act-indicator(0),                  -- supports activity indicator
20         sco-locks(1),                      -- at least one operation sets the SCO lock flag
21         sco-ctxt-help(8)                   -- SCO supports context-dependent dynamic help
22    }

23   6.6.1.2 Behavior

24   In addition to the SET service, which can be used to modify the Activity-Indicator attribute,
25   the SCO defines the methods in Table 53.

26                                   Table 53 —SCO instance methods
          Action              Mode                  Action ID               Action parameter              Action result
      Operation-         Confirmed            MDC_ACT_SCO_OP_            OperationInvoke             OperationInvokeResult
      Invoke                                  INVOKE
      Get-Ctxt-Help      Confirmed            MDC_ACT_GET_               CtxtHelpRequest             CtxtHelpResult
                                              CTXT_HELP
27

                                                               126
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1    The following ASN.1 data type definitions apply:
2      --
3      -- Operation-Invoke method has an additional security mechanism
4      --
5      OperationInvoke ::= SEQUENCE {
6           checksum                      INT-I16,             -- 16-bit twos complement
7           invoke-cookie                 INT-U32,             -- arbitrary ID mirrored back in resulting updates
8           op-elem-list                  OpInvokeList
9      }

10   NOTE—If check-summing is not used, the checksum field shall be 0. If calculated checksum is 0, the checksum field
11   shall be –1. Checksum calculation is the 16-bit twos-complement sum of 16-bit words in the message starting at the
12   address after the checksum field.
13     OpInvokeList ::= SEQUENCE OF OpInvokeElement

14     OpInvokeElement ::= SEQUENCE {
15         op-class-id                OID-Type,                 -- from object-oriented nomenclature partition
16         op-instance-no             InstNumber,
17         op-mod-type                OpModType,
18         attributes                 AttributeList
19     }

20     OpModType ::= INT-U16 {
21        op-replace(0),                    -- normally replace value of virtual attribute
22        op-setToDefault(3),               -- set to default value if this is supported
23        op-invokeAction(10),              -- needed for singular action type of operations
24        op-invokeActionWithArgs(15)       -- action with arguments
25     }

26     --
27     -- Result confirms reception (and execution) of operations
28     -- Updated attributes are communicated via normal update method (e.g., scanner) to avoid inconsistencies
29     --
30     OperationInvokeResult ::= SEQUENCE {
31          invoke-cookie                   INT-U32,
32          result                          OpInvResult
33     }

34     OpInvResult ::= INT-U16 {
35         op-successful(0),
36         op-failure(1)
37     }

38     --
39     -- The following types allow the retrieval of dynamic help information that is SCO or Operation object context-
40     -- dependent (i.e., state-dependent)
41     --
42     CtxtHelpRequest ::= SEQUENCE {
43          type                             OID-Type,          -- either Operation object class ID or SCO class ID
44          op-instance-no                   InstNumber         -- operation instance number (0 if SCO is addressed)
45     }

46     CtxtHelpResult ::= SEQUENCE {
47         type                             OID-Type,           -- either Operation object class ID or SCO class ID
48         op-instance-no                   InstNumber,
49         hold-time                        RelativeTime,       -- how long to display help; 0 if not applicable
50         help                             CtxtHelp
51     }


                                                              127
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1     CtxtHelp ::= CHOICE {
 2         text-string [1] OCTET STRING,
 3         oid         [8] OID-Type
 4     }

 5   6.6.1.3 Notifications

 6   The SCO class defines the events in Table 54.

 7                                         Table 54 —SCO events
             Event                    Mode                     Event ID             Event parameter           Event result
      SCO-Operating-         Confirmed/Unconfirmed       MDC_NOTI_SCO_             ScoOperReqSpec           —
      Request                                            OP_ REQ
      SCO-Operation-         Confirmed/Unconfirmed       MDC_NOTI_SCO_             ScoOperInvokeError       —
      Invoke- Error                                      OP_ INVOK_ERR
 8
 9   The following ASN.1 data type definitions apply:
10     --
11     -- An operating request may append additional information
12     --
13     ScoOperReqSpec ::= SEQUENCE {
14          op-req-id PrivateOid,          -- device-or manufacturer-specific
15          op-req-info ANY DEFINED BY op-req-id
16     }

17     --
18     -- SCO-Operation-Invoke-Error notification
19     --
20     ScoOperInvokeError ::= SEQUENCE {
21          invoke-cookie                 INT-U32,
22          op-error                      OpErrorType,
23          failed-operation-list         InstNumberList
24     }

25     OpErrorType ::= INT-U16 {
26        op-err-unspec(0),
27        checksum-error(1),
28        sco-lock-violation(2),
29        unknown-operation(3),
30        invalid-value(4),
31        invalid-mod-type(5)
32     }

33     InstNumberList ::= SEQUENCE OF InstNumber

34   6.6.2 Operation class

35   Class:                      Operation
36   Description:                "The Operation class is the abstract base class for classes that represent remote controllable
37                               items."
38   Superclass:                 Top
39   Subclasses:                 ActivateOperation, LimitAlertOperation, SelectItemOperation, SetRangeOperation,
40                               SetStringOperation, SetValueOperation, ToggleFlagOperation
41   Name Binding:               Instance-Number (not directly accessible by object management services; unique within a
42                               single SCO instance)
43   Registered As:              MDC_MOC_CNTRL_OP

                                                              128
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



1    6.6.2.1 Attributes

2    The Operation class defines the attributes in Table 55.

 3                                   Table 55 —Operation class attributes
       Attribute name            Attribute ID           Attribute type                    Remark                    Qualifier
      Instance-Number       MDC_ATTR_ID_                InstNumber          Unique within SCO for operation         M
                            INSTNO                                          identification.
      Operation-Spec        MDC_ATTR_OP_                OperSpec            Structure defining operation types      M
                            SPEC                                            and properties.
      Operation-Text-       MDC_ATTR_OP_                OperTextStrings     Static description of operation.        O
      Strings               TEXT_STRING
      Operation-Text-       MDC_ATTR_OP_                OperTextStrings     Dynamic description of operation.       O
      Strings-Dyn           TEXT_STRING_DYN
      Vmo-Reference         MDC_ATTR_VMO_               HANDLE              Reference to an object.                 O
                            REF
      Operational-State     MDC_ATTR_OP_                OperationalState    Specifies whether operation is          O
                            STAT                                            accessible.
4
5    The Operation class defines in Table 56 the attribute groups or extensions to inherited
6    attribute groups.

7                            Table 56 —Operation class attribute groups
            Attribute group                       Attribute group ID                             Group elements
      Operation Static Context         MDC_ATTR_GRP_OP_STATIC_CTXT                   from Operation:
      Group                                                                          Operation-Spec, Operation-Text-
      (extensible attribute group)                                                   Strings
      Operation Dynamic Context        MDC_ATTR_GRP_OP_DYN_CTXT                      from Operation:
      Group                                                                          Vmo-Reference, Operational-State
      (extensible attribute group)
8
9    The following ASN.1 data type definitions apply:
10     --
11     -- Operation-Spec attribute indicates what this operation really does
12     --
13     OperSpec ::= SEQUENCE {
14          vattr-id    OID-Type,            -- ID of the virtual attribute that is changed by operation
15          op-target OID-Type,              -- from metric or object-oriented nomenclature partition
16          options     OpOptions,           -- special options
17          level       OpLevel,             -- range of importance
18          grouping OpGrouping              -- to describe relations between operations
19     }

20   NOTE—The vattr-id code comes from the virtual attribute nomenclature partition. Entries (i.e., codes) in this partition
21   are even. The last bit of the code is used to define from which nomenclature partition the op-target code comes. If the
22   last bit is 0, the op-target code comes from the metric nomenclature partition. If the last bit is 1 (1 is added to the base
23   code in the virtual attribute nomenclature), the op-target code comes from the object-oriented nomenclature partition.
24     --
25     -- Operation texts
26     --
27     OperTextStrings ::= SEQUENCE {


                                                                129
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1           label        OCTET STRING,                             -- the label string indicates the meaning of the
2                                                                  -- operation
3           help         OCTET STRING,                             -- the help string may contain additional help for the
4                                                                  -- user
5           confirm      OCTET STRING                              -- the confirm string is shown by manager to a user to
6                                                                  -- reconfirm the operation (e.g., "do you really want to
7                                                                  -- shut down?")
8      }

 9     --
10     -- Operation options
11     --
12     OpOptions ::= BITS-16 {
13          needs-confirmation(0),
14          supports-default(1),              -- a default value is supported for the virtual attributes
15          sets-sco-lock(2),                 -- needs transaction processing to avoid side effects
16          is-setting(3),                    -- value preserved over system power fail
17          op-dependency(6),                 -- operation has dependencies to others (always set if sets-sco-lock bit is set)
18          op-auto-repeat(7),                -- supports auto repeat
19          op-ctxt-help(8)                   -- provides context-dependent help via SCO action
20     }

21     --
22     -- Level
23     --
24     OpLevel ::= BITS-16 {
25          op-level-basic(0),                -- a normal operation
26          op-level-advanced(1),             -- an advanced operation
27          op-level-professional(2),
28          op-item-normal(8),                -- operation modifies a normal user item
29          op-item-config(9),                -- operation modifies a configuration item
30          op-item-service(10)               -- operation modifies a service item (not used by regular operator)
31     }

32     --
33     -- Field for grouping operations (i.e., defines logical relations); can be used to organize operations in a useful
34     -- sequence on an operator interface (i.e., display)
35     --
36     OpGrouping ::= SEQUENCE {
37           group       INT-U8,
38           priority    INT-U8
39     }

40   6.6.2.2 Behavior

41   The Operation class does not define any special methods.

42   6.6.2.3 Notifications

43   The Operation class does not generate any special notifications.
44   6.6.3 SelectItemOperation class

45   Class:                        SelectItemOperation
46   Description:                  "The SelectItemOperation class allows selection of one item out of a given list. The list can
47                                 have different types."
48   Superclass:                   Operation
49   Subclasses:                   --
50   Name Binding:                 Instance-Number (not directly accessible by object management services)
51   Registered As:                MDC_MOC_CNTRL_OP_SEL_IT

                                                                130
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   6.6.3.1 Attributes

 2   The SelectItemOperation class defines the attributes in Table 57.

 3                        Table 57 —SelectItemOperation class attributes
      Attribute name             Attribute ID              Attribute type                 Remark                     Qualifier
      Selected-Item-        MDC_ATTR_INDEX_                INT-U16          Index of current selection.              M
      Index                 SEL
      Nom-Partition         MDC_ATTR_ID_                   NomPartition     If entries in list are OIDs, specifies   C
                            NOM_PARTITION                                   the nomenclature partition that is
                                                                            used.
      Select-List           MDC_ATTR_LIST_                 SelectList       List of possible choices.                M
                            SEL
 4
 5   The SelectItemOperation class defines in Table 58 the attribute groups or extensions to
 6   inherited attribute groups.

 7                   Table 58 —SelectItemOperation class attribute groups
           Attribute group                        Attribute group ID                             Group elements
      Operation Static Context        MDC_ATTR_GRP_OP_STATIC_CTXT                   from Operation:
      Group                                                                         Operation-Spec, Operation-Text-Strings
      (extensible attribute group)                                                  from SelectItemOperation:
                                                                                    Nom-Partition
      Operation Dynamic               MDC_ATTR_GRP_OP_DYN_CTXT                      from Operation:
      Context Group                                                                 Vmo-Reference, Operational-State
      (extensible attribute group)                                                  from SelectItemOperation:
                                                                                    Selected-Item-Index, Select-List
 8
 9   The following ASN.1 data type definitions apply:
10     --
11     -- Select-List attribute defines valid selections
12     --
13     SelectList ::= CHOICE {
14          oid-list       [1] OID-TypeList,
15          value-list [3] FLOAT-TypeList,
16          value-u-list [4] SelectUValueEntryList,
17          string-list [5] OCTET-STRING-List
18     }

19     OID-TypeList ::= SEQUENCE OF OID-Type

20     FLOAT-TypeList ::= SEQUENCE OF FLOAT-Type

21     SelectUValueEntryList ::= SEQUENCE OF SelectUValueEntry

22     --
23     -- Value with a unit/dimension code
24     --
25     SelectUValueEntry ::= SEQUENCE {
26          value       FLOAT-Type,
27          m-units     OID-Type           -- from dimensions nomenclature partition
28     }


                                                                131
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1     OCTET-STRING-List ::= SEQUENCE OF OCTET STRING

 2   6.6.3.2 Behavior

 3   The SelectItemOperation class does not define any special methods.
 4   6.6.3.3 Notifications

 5   The SelectItemOperation class does not generate any special notifications.
 6   6.6.4 SetValueOperation class

 7   Class:                          SetValueOperation
 8   Description:                    "The SetValueOperation class allows the system to adjust a value within a given range with
 9                                   a given resolution."
10   Superclass:                     Operation
11   Subclasses:                     --
12   Name Binding:                   Instance-Number (not directly accessible by object management services)
13   Registered As:                  MDC_MOC_CNTRL_OP_SEL_VAL

14   6.6.4.1 Attributes

15   The SetValueOperation class defines the attributes in Table 59.

16                         Table 59 —SetValueOperation class attributes
      Attribute name            Attribute ID             Attribute type                  Remark                    Qualifier
      Current-Value        MDC_ATTR_VAL_               FLOAT-Type            Current value.                       M
                           CURR
      Set-Value-Range      MDC_ATTR_VAL_               OpSetValueRange       Range of legal values.               M
                           RANGE
      Step-Width           MDC_ATTR_VAL_               OpValStepWidth        Allowed step width.                  O
                           STEP_WIDTH
      Unit-Code            MDC_ATTR_UNIT_              OID-Type              From dimensions nomenclature         O
                           CODE                                              partition.
17
18   The SetValueOperation class defines in Table 60 the attribute groups or extensions to
19   inherited attribute groups.

20                    Table 60 —SetValueOperation class attribute groups
            Attribute group                       Attribute group ID                            Group elements
      Operation Static Context         MDC_ATTR_GRP_OP_STATIC_CTXT                  from Operation:
      Group                                                                         Operation-Spec, Operation-Text-Strings
      (extensible attribute group)
      Operation Dynamic                MDC_ATTR_GRP_OP_DYN_CTXT                     from Operation:
      Context Group                                                                 Vmo-Reference, Operational-State
      (extensible attribute group)                                                  from SetValueOperation:
                                                                                    Current-Value, Set-Value-Range, Step-
                                                                                    Width, Unit-Code
21
22   The following ASN.1 data type definitions apply:
23     --

                                                               132
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1      -- Set-Value-Range attribute defines range and minimum resolution
2      --
3      OpSetValueRange ::= SEQUENCE {
4           minimum FLOAT-Type,
5           maximum FLOAT-Type,
6           resolution FLOAT-Type
7      }

 8     --
 9     -- Step-Width attribute is an ordered (in ascending order) array of ranges and corresponding minimum step
10     -- widths; the lower edge is defined in the minimum value of the range specification
11     --
12     OpValStepWidth ::= SEQUENCE OF StepWidthEntry

13     StepWidthEntry ::= SEQUENCE {
14         upper-edge FLOAT-Type,
15         step-width FLOAT-Type
16     }

17   6.6.4.2 Behavior

18   The SetValueOperation class does not define any special methods.

19   6.6.4.3 Notifications

20   The SetValueOperation class does not generate any special notifications.

21   6.6.5 SetStringOperation class

22   Class:                       SetStringOperation
23   Description:                 "The SetStringOperation class is used to set the contents of a string type virtual attribute."
24   Superclass:                  Operation
25   Subclasses:                  --
26   Name Binding:                Instance-Number (not directly accessible by object management services)
27   Registered As:               MDC_MOC_CNTRL_OP_SET_STRING

28   6.6.5.1 Attributes

29   The SetStringOperation class defines the attributes in Table 61.

30                       Table 61 —SetStringOperation class attributes
       Attribute name          Attribute ID            Attribute type                   Remark                     Qualifier
      Current-String      MDC_ATTR_                   OCTET                Current value of the string type        Ca
                          STRING_CURR                 STRING               virtual attribute.
      Set-String-Spec     MDC_ATTR_SET_               SetStringSpec        Properties of the string type virtual   M
                          STRING_SPEC                                      attribute.
       a
31      The Current-String attribute is out of the scope of this standard if the setstr-hidden-val
32     flag is set in the specification attribute; it is mandatory otherwise.
33
34   The SetStringOperation class defines in Table 62 the attribute groups or extensions to
35   inherited attribute groups.




                                                              133
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1                    Table 62 —SetStringOperation class attribute groups
           Attribute group                       Attribute group ID                               Group elements
      Operation Static Context         MDC_ATTR_GRP_OP_STATIC_CTXT                     from Operation:
      Group                                                                            Operation-Spec, Operation-Text-Strings
      (extensible attribute group)
      Operation Dynamic                MDC_ATTR_GRP_OP_DYN_CTXT                        from Operation:
      Context Group                                                                    Vmo-Reference, Operational-State
      (extensible attribute group)                                                     from SetStringOperation:
                                                                                       Current-String, Set-String-Spec
 2
 3   The following ASN.1 data type definitions apply:
 4     --
 5     -- Set-String-Spec attribute
 6     --
 7     SetStringSpec ::= SEQUENCE {
 8          max-str-len INT-U16,              -- maximum supported string length
 9          char-size INT-U16,                -- character size in bits, e.g. 7, 8 or 16
10          set-str-opt SetStrOpt             -- special option bits
11     }

12     --
13     -- Options for the string
14     --
15     SetStrOpt ::= BITS-16 {
16          setstr-null-terminated(0),        -- string is terminated with NULL character
17          setstr-displayable(1),            -- string is displayable
18          setstr-var-length(2),             -- string has variable length (up to maximum)
19          setstr-hidden-val(3)              -- actual contents is hidden, e.g., for password entry
20     }

21   6.6.5.2 Behavior

22   The SetStringOperation class does not define any special methods.
23   6.6.5.3 Notifications

24   The SetStringOperation class does not generate any special notifications.
25   6.6.6 ToggleFlagOperation class

26   Class:                          ToggleFlagOperation
27   Description:                    "The ToggleFlagOperation class allows a switch to be toggled (with two states, e.g.,
28                                   on/off)."
29   Superclass:                     Operation
30   Subclasses:                     --
31   Name Binding:                   Instance-Number (not directly accessible by object management services)
32   Registered As:                  MDC_MOC_CNTRL_OP_TOG

33   6.6.6.1 Attributes

34   The ToggleFlagOperation class defines the attributes in Table 63.




                                                               134
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                       IEEE P11073-10201/D2.1.109, September October 2018



 1                       Table 63 —ToggleFlagOperation class attributes
      Attribute name           Attribute ID               Attribute type                    Remark                    Qualifier
      Toggle-State         MDC_ATTR_STAT_               ToggleState             Current state of toggle.              M
                           OP_TOG
      Toggle-Label-        MDC_ATTR_TOG_                ToggleLabelStrings                                            M
      Strings              LABELS_STRING
 2
 3   The ToggleFlagOperation class defines in Table 64 the attribute groups or extensions to
 4   inherited attribute groups.

 5                   Table 64 —ToggleFlagOperation class attribute groups
           Attribute group                        Attribute group ID                              Group elements
      Operation Static Context         MDC_ATTR_GRP_OP_STATIC_CTXT                    from Operation:
      Group                                                                           Operation-Spec, Operation-Text-Strings
      (extensible attribute group)
      Operation Dynamic                MDC_ATTR_GRP_OP_DYN_CTXT                       from Operation:
      Context Group                                                                   Vmo-Reference, Operational-State
      (extensible attribute group)                                                    from ToggleFlagOperation:
                                                                                      Toggle-State, Toggle-Label-Strings
 6
 7   The following ASN.1 data type definitions apply:
 8     --
 9     -- Toggle-State attribute
10     --
11     ToggleState ::= INT-U16 {
12          tog-state0(0),
13          tog-state1(1)
14     }

15     --
16     -- Each state has a label
17     --
18     ToggleLabelStrings ::= SEQUENCE {
19          lbl-state0 OCTET STRING,
20          lbl-state1 OCTET STRING
21     }

22   6.6.6.2 Behavior

23   The ToggleFlagOperation class does not define any special methods.

24   6.6.6.3 Notifications

25   The ToggleFlagOperation class does not generate any special notifications.

26   6.6.7 ActivateOperation class

27   Class:                          ActivateOperation
28   Description:                    "The ActivateOperation class allows a defined activity to be started (e.g., a zero pressure)."
29   Superclass:                     Operation
30   Subclasses:                     --
31   Name Binding:                   Instance-Number (not directly accessible by object management services)
32   Registered As:                  MDC_MOC_CNTRL_OP_ACTIV

                                                               135
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   6.6.7.1 Attributes

 2   The ActivateOperation class does not define any additional attributes.

 3   The ActivateOperation class defines in Table 65 the attribute groups or extensions to
 4   inherited attribute groups.

 5                     Table 65 —ActivateOperation class attribute groups
           Attribute group                        Attribute group ID                            Group elements
      Operation Static Context          MDC_ATTR_GRP_OP_STATIC_CTXT                 from Operation:
      Group                                                                         Operation-Spec, Operation-Text-
      (extensible attribute group)                                                  Strings
      Operation Dynamic Context         MDC_ATTR_GRP_OP_DYN_CTXT                    from Operation:
      Group                                                                         Vmo-Reference, Operational-State
      (extensible attribute group)
 6

 7   6.6.7.2 Behavior

 8   The ActivateOperation class does not define any special methods.
 9   6.6.7.3 Notifications

10   The ActivateOperation class does not generate any special notifications.

11   6.6.8 LimitAlertOperation class

12   Class:                          LimitAlertOperation
13   Description:                    "The LimitAlertOperation class allows the limits of a limit alarm detector to be adjusted
14                                   and the limit alarm to be switched on or off."
15   Superclass:                     Operation
16   Subclasses:                     --
17   Name Binding:                   Instance-Number (not directly accessible by object management services)
18   Registered As:                  MDC_MOC_CNTRL_OP_LIM

19   6.6.8.1 Attributes

20   The LimitAlertOperation class defines the attributes in Table 66.

21                        Table 66 —LimitAlertOperation class attributes
      Attribute name            Attribute ID             Attribute type                   Remark                   Qualifier
      Alert-Op-            MDC_ATTR_AL_                AlOpCapab             Indicates what can be switched        M
      Capability           OP_CAPAB                                          on or off.
      Alert-Op-State       MDC_ATTR_AL_                CurLimAlStat          Current on/off state; can be set by   M
                           OP_STAT                                           Operation-Invoke method.
      Current-Limits       MDC_ATTR_                   CurLimAlVal           Current alarm limits; can be set      M
                           LIMIT_CURR                                        by Operation-Invoke method.
      Alert-Op-Text-       MDC_ATTR_AL_                AlertOpTextString     Individual text for upper and         O
      String               OP_TEXT_STRING                                    lower limit.
      Set-Value-Range      MDC_ATTR_VAL_               OpSetValueRange       Allowed range for limits.             M
                           RANGE


                                                               136
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name            Attribute ID             Attribute type                      Remark                  Qualifier
      Unit-Code            MDC_ATTR_UNIT_              OID-Type                Dimension of values.                  M
                           CODE
      Metric-Id            MDC_ATTR_ID_                OID-Type                Measurement (i.e., Numeric            M
                           PHYSIO                                              object) to which the limit applies,
                                                                               from metric nomenclature
                                                                               partition.
1
2    The LimitAlertOperation class defines in Table 67 the attribute groups or extensions to
3    inherited attribute groups.

 4                   Table 67 —LimitAlertOperation class attribute groups
           Attribute group                        Attribute group ID                                Group elements
      Operation Static Context        MDC_ATTR_GRP_OP_STATIC_CTXT                      from Operation:
      Group                                                                            Operation-Spec, Operation-Text-Strings
      (extensible attribute group)                                                     from LimitAlertOperation:
                                                                                       Alert-Op-Capability, Alert-Op-Text-
                                                                                       String
      Operation Dynamic               MDC_ATTR_GRP_OP_DYN_CTXT                         from Operation:
      Context Group                                                                    Vmo-Reference, Operational-State
      (extensible attribute group)                                                     from LimitAlertOperation:
                                                                                       Alert-Op-State, Current-Limits, Set-
                                                                                       Value-
                                                                                       Range, Unit-Code, Metric-Id
5
6    The following ASN.1 data type definitions apply:
 7    --
 8    -- Alert operation static flags indicate which on/off flags are supported
 9    --
10    AlOpCapab ::= BITS-16 {
11         low-limit-sup(1),                  -- supports low limit
12         high-limit-sup(2),                 -- supports high limit
13         auto-limit-sup(5),                 -- supports automatic limits
14         low-lim-on-off-sup(8),             -- supports to switch on/off low limit
15         high-lim-on-off-sup(9),            -- supports to switch on/off high limit
16         lim-on-off-sup(10)                 -- supports to switch on/off the complete alarm
17    }

18    --
19    -- Alert-Op-State attribute defines the current limit alert state
20    -- NOTE--The bits refer to the limit alarm only, not to the global alert state of the metric
21    --
22    CurLimAlStat ::= BITS-16 {
23         lim-alert-off(0),                 -- if this bit is set, all alerts (both high and low) are off
24         lim-low-off(1),                   -- low-limit violation detection is off
25         lim-high-off(2)                   -- high-limit violation detection is off
26    }

27    --
28    -- Current-Limits attribute
29    --
30    CurLimAlVal ::= SEQUENCE {
31         lower       FLOAT-Type,
32         upper       FLOAT-Type
33    }

                                                                137
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1     --
 2     -- Alert-Op-Text-String attribute assigns individual labels to upper and lower alarm limit
 3     --
 4     AlertOpTextString ::= SEQUENCE {
 5          lower-text OCTET STRING,
 6          upper-text OCTET STRING
 7     }

 8   6.6.8.2 Behavior

 9   The LimitAlertOperation class does not define any special methods.
10   6.6.8.3 Notifications

11   The LimitAlertOperation class does not generate any special notifications.

12   6.6.9 SetRangeOperation class

13   Class:                          SetRangeOperation
14   Description:                    "The SetRangeOperation class allows the system to adjust low and high values (i.e., a value
15                                   range) within defined boundaries."
16   Superclass:                     Operation
17   Subclasses:                     --
18   Name Binding:                   Instance-Number (not directly accessible by object management services)
19   Registered As:                  MDC_MOC_CNTRL_OP_SET_RANGE

20   6.6.9.1 Attributes

21   The SetRangeOperation class defines the attributes in Table 68.

22                        Table 68 —SetRangeOperation class attributes
      Attribute name            Attribute ID             Attribute type                   Remark                   Qualifier
      Current-Range        MDC_ATTR_                   CurrentRange          Current value.                        M
                           RANGE_CURR
      Range-Op-Text        MDC_ATTR_                   RangeOpText           Static attribute to define            O
                           RANGE_OP_TEXT_                                    individual texts for upper and
                           STRING                                            lower boundaries.
      Set-Value-Range      MDC_ATTR_VAL_               OpSetValueRange       Range of legal values.                M
                           RANGE
      Step-Width           MDC_ATTR_VAL_               OpValStepWidth        Allowed step width.                   O
                           STEP_WIDTH
      Unit-Code            MDC_ATTR_UNIT_              OID-Type              From dimensions nomenclature          O
                           CODE                                              partition.
23
24   The SetRangeOperation class defines in Table 69 the attribute groups or extensions to
25   inherited attribute groups.

26                    Table 69 —SetRangeOperation class attribute groups
           Attribute group                        Attribute group ID                             Group elements
      Operation Static Context         MDC_ATTR_GRP_OP_STATIC_CTXT                  from Operation:
      Group                                                                         Operation-Spec, Operation-Text-Strings
      (extensible attribute group)                                                  from SetRangeOperation:
                                                                                    Range-Op-Text

                                                               138
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                                       IEEE P11073-10201/D2.1.109, September October 2018



           Attribute group                        Attribute group ID                              Group elements
      Operation Dynamic                MDC_ATTR_GRP_OP_DYN_CTXT                      from Operation:
      Context Group                                                                  Vmo-Reference, Operational-State
      (extensible attribute group)                                                   from SetRangeOperation:
                                                                                     Current-Range, Set-Value-Range, Step-
                                                                                     Width, Unit-Code
 1
 2   The following ASN.1 data type definitions apply:
3      --
4      -- Current-Range attribute defines the current upper and lower range values
5      --
6      CurrentRange ::= SEQUENCE {
7           lower       FLOAT-Type,
8           upper       FLOAT-Type
9      }

10     --
11     -- Range-Op-Text attribute assigns labels to the upper and lower boundaries
12     --
13     RangeOpText ::= SEQUENCE {
14          low-text  OCTET STRING,                              -- printable label text for low value
15          high-text OCTET STRING                               -- printable label text for high value
16     }

17   6.6.9.2 Behavior

18   The SetRangeOperation class does not define any special methods.
19   6.6.9.3 Notifications

20   The SetRangeOperation class does not generate any special notifications.

21   6.7 ExtendedServices package

22   6.7.1 Scanner class

23   Class:                          Scanner
24   Description:                    "A Scanner object is an observer and 'summarizer' of attribute values. It observes attributes
25                                   of managed medical objects and generates summaries in the form of notification event
26                                   reports. The Scanner object class is an abstract class, it cannot be instantiated."
27   Superclass:                     Top
28   Subclasses:                     CfgScanner, UcfgScanner
29   Name Binding:                   Handle
30   Registered As:                  MDC_MOC_SCAN

31   6.7.1.1 Attributes

32   The Scanner class defines the attributes in Table 70.

33                                   Table 70 —Scanner class attributes
       Attribute name            Attribute ID             Attribute type                   Remark                    Qualifier
      Handle               MDC_ATTR_ID_                  HANDLE              Scanners are identified by              M
                           HANDLE                                            handles.


                                                               139
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name             Attribute ID            Attribute type                    Remark                     Qualifier
      Instance-Number       MDC_ATTR_ID_                InstNumber            Shall be used when dynamic              C
                            INSTNO                                            creation of scanner instances is
                                                                              allowed.
      Operational-State     MDC_ATTR_OP_                OperationalState      Defines if scanner is active; can       M
                            STAT                                              be set.
 1
 2   The Scanner class defines in Table 71 the attribute groups or extensions to inherited
 3   attribute groups.

 4                             Table 71 —Scanner class attribute groups
              Attribute group                    Attribute group ID                             Group elements
      Scanner Attribute Group              MDC_ATTR_GRP_SCAN                    from Scanner:
      (extensible attribute group)                                              Handle, Instance-Number, Operational-
                                                                                State
 5
 6   6.7.1.2 Behavior

 7   The Scanner class does not define any special methods.

 8   Scanner subclasses use the following ASN.1 data type definitions:
 9     --
10     -- List of objects for which scanned attributes are refreshed
11     -- If list is empty, all objects in the scan list are refreshed
12     -- If scanned-attribute is 0 (NOS), all attributes of that object that are scanned are refreshed
13     -- If the object-glb-handle is 0 (in all components), the specified attribute ID is refreshed for all objects in the scan
14     -- list
15     --
16     RefreshObjList ::= SEQUENCE OF RefreshObjEntry

17     RefreshObjEntry ::= SEQUENCE {
18          object-glb-handle         GLB-HANDLE,
19          scanned-attribute         OID-Type                     -- attribute ID from object-oriented nomenclature
20                                                                 -- partition
21     }

22   6.7.1.3 Notifications

23   Events are defined in Scanner subclasses.

24   Most Scanner subclasses share a common event report data structure that is defined as
25   follows:
26     --
27     -- A scanner may scan objects from multiple device contexts. For efficiency, scanned data that belongs to a single
28     -- device context are grouped together
29     --
30     ScanReportInfo ::= SEQUENCE {
31          scan-report-no                  INT-U16,                                -- counter for detection of missing
32                                                                                  -- events
33          glb-scan-info                   SingleCtxtScanList
34     }

                                                                140
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1     SingleCtxtScanList ::= SEQUENCE OF SingleCtxtScan

2      SingleCtxtScan ::= SEQUENCE {
3           context-id MdsContext,
4           scan-info ObservationScanList
5      }

 6     ObservationScanList ::= SEQUENCE OF ObservationScan

 7     ObservationScan ::= SEQUENCE {
 8         obj-handle HANDLE,
 9         attributes AttributeList
10     }

11   6.7.2 CfgScanner class

12   Class:                       CfgScanner
13   Description:                 "The CfgScanner class defines a special attribute (i.e., the Scan-List attribute) that is used
14                                to configure which of an object’s attributes of an object are scanned. A CfgScanner object
15                                has the following properties:
16                                     — It scans VMO-derived objects (mostly Metric, Channel, and VMD objects).
17                                     — It contains a list of scanned objects/attributes that can be modified. The
18                                          CfgScanner object is an abstract class; it cannot be instantiated."
19   Superclass:                  Scanner
20   Subclasses:                  EpiCfgScanner, PeriCfgScanner
21   Name Binding:                Handle
22   Registered As:               MDC_MOC_SCAN_CFG

23   6.7.2.1 Attributes

24   The CfgScanner class defines the attributes in Table 72.

25                              Table 72 —CfgScanner class attributes
       Attribute name           Attribute ID           Attribute type                    Remark                    Qualifier
      Scan-List           MDC_ATTR_SCAN_              ScanList             List of scanned objects and             M
                          LIST                                             attributes; can be set.
      Confirm-Mode        MDC_ATTR_                   ConfirmMode          Determines whether confirmed            M
                          CONFIRM_MODE                                     event reports are used.
      Confirm-            MDC_ATTR_                   RelativeTime         Determines when a confirmed             C
      Timeout             CONFIRM_                                         event report is resent in case of a
                          TIMEOUT                                          missing response.
      Transmit-           MDC_ATTR_TX_                INT-U16              Maximum number of not-yet-              C
      Window              WIND                                             acknowledged event reports at
                                                                           one time.
      Scan-Config-        MDC_ATTR_SCAN_              ScanConfigLimit      Even a configurable scanner may         O
      Limit               CFG_LIMIT                                        restrict the way it can be
                                                                           configured.
26
27   The CfgScanner class defines in Table 73 the attribute groups or extensions to inherited
28   attribute groups.

29                        Table 73 —CfgScanner class attribute groups
             Attribute group                   Attribute group ID                            Group elements
      Scanner Attribute Group            MDC_ATTR_GRP_SCAN                   from Scanner:

                                                              141
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                       IEEE P11073-10201/D2.1.109, September October 2018



             Attribute group                      Attribute group ID                            Group elements
      (extensible attribute group)                                               Handle, Instance-Number, Operational-
                                                                                 State
                                                                                 from CfgScanner:
                                                                                 Scan-List, Confirm-Mode, Confirm-
                                                                                 Timeout, Transmit-Window, Scan-Config-
                                                                                 Limit
 1
 2   The following ASN.1 data type definitions apply:
 3     --
 4     -- Scan-List attribute determines which of an object’s attributes of an object are observedscanned
 5     -- NOTES
 6     -- 1--If the scan list is empty, an episodic scanner has to send empty event reports
 7     -- 2--The scan list will typically contain attribute group IDs for specific objects
 8     --
 9     ScanList ::= SEQUENCE OF ScanEntry

10     ScanEntry ::= SEQUENCE {
11         object-glb-handle                   GLB-HANDLE,          -- works for all objects with name binding handle
12         scanned-attribute                   OID-Type             -- could also be attribute group ID
13     }

14     --
15     -- Confirm-Mode attribute defines if confirmed event reports or unconfirmed event reports are used
16     --
17     ConfirmMode ::= INT-U16 {
18          unconfirmed(0),
19          confirmed(1)
20     }

21     --
22     -- Even a configurable scanner may restrict the way it can be configured
23     -- If Scan-Config-Limit attribute is absent, the scanner is fully configurable
24     --
25     ScanConfigLimit ::= BITS-16 {
26           no-scan-delete(0),               -- scanner cannot be deleted
27           no-scan-list-mod(1),             -- scan list cannot be dynamically modified
28           auto-init-scan-list(3),          -- scan list is automatically initialized after scanner create
29           auto-updt-scan-list(4)           -- scan list is automatically updated in case of configuration change
30     }

31   6.7.2.2 Behavior

32   The CfgScanner class does not define any special methods.
33   6.7.2.3 Notifications

34   The CfgScanner class does not generate any special notifications.
35   6.7.3 EpiCfgScanner class

36   Class:                          EpiCfgScanner
37   Description:                    "An EpiCfgScanner object is responsible for scanning attributes or attribute groups of
38                                   objects and for reporting these attributes in episodic, unbuffered (i.e., on change only) event
39                                   reports."
40   Superclass:                     CfgScanner
41   Subclasses:                     --

                                                               142
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                       Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                        Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   Name Binding:                  Handle
 2   Registered As:                 MDC_MOC_SCAN_CFG_EPI

 3   6.7.3.1 Attributes

 4   The EpiCfgScanner class does not define attributes other than the attributes inherited from
 5   the CfgScanner class.

 6   The EpiCfgScanner class uses the Scanner Attribute Group that is inherited from the
 7   CfgScanner class.

 8   6.7.3.2 Behavior

 9   The EpiCfgScanner class defines the methods in Table 74.

10                           Table 74 —EpiCfgScanner instance methods
           Action                 Mode                       Action ID                   Action parameter               Action
                                                                                                                        result
      Refresh-              Confirmed              MDC_ACT_REFR_EPI_                 RefreshObjList                 —
      Episodic-Data                                DATA
11
12   The Refresh-Episodic-Data method triggers a refresh of all scanned attributes.
13   6.7.3.3 Notifications

14   The EpiCfgScanner class defines the events in Table 75.

15                                    Table 75 —EpiCfgScanner events
              Event                       Mode                      Event ID             Event parameter          Event result
      Unbuf-Scan-Report         Confirmed/Unconfirmed         MDC_NOTI_                  ScanReportInfo         —
                                                              UNBUF_SCAN_RPT
16
17   NOTE 1—If the EpiCfgScanner scans attribute groups of an object and one or more of the attribute values in the group
18   change, then the scanner reports all values of attributes in the group, even those that did not change their value. This is
19   important so that attributes that are dynamically deleted from an object instance can be detected without a special
20   notification.
21   NOTE 2—If no attribute of an object changes its value, then no data of this object are included in the scan report (unless
22   an explicit refresh phase was triggered).
23   NOTE 3—Because an episodic scanner does not buffer any changes and does not have an update period specification
24   attribute (which is not needed because updates are sent on value changes), attribute change notifications should be sent
25   at a rate that ensures no data loss. For example, in order to ensure that no metric value changes more than once between
26   scans of dynamic attribute groups, the episodic scanner should check for changes at a rate at least as fast as the the shortest
27   MetricSpec::update-period of the metric instances in the scanner’s scan list.
28   NOTE 4—After instantiation of the scanner, all attribute values are considered changed so that the first scan report
29   contains all attribute values of all objects.

30   6.7.4 PeriCfgScanner class

31   Class:                         PeriCfgScanner
32   Description:                   "A PeriCfgScanner object is responsible for scanning attributes and attribute groups of
33                                  objects and for reporting these attributes in periodic event reports."

                                                                 143
                                              Copyright © 2018 IEEE. All rights reserved.
                                   This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1   Superclass:                     CfgScanner
 2   Subclasses:                     FastPeriCfgScanner
 3   Name Binding:                   Handle
 4   Registered As:                  MDC_MOC_SCAN_CFG_PERI

 5   6.7.4.1 Attributes

 6   The PeriCfgScanner class defines the attributes in Table 76.

 7                           Table 76 —PeriCfgScanner class attributes
       Attribute name            Attribute ID          Attribute type                   Remark                    Qualifier
      Scan-                MDC_ATTR_SCAN_              ScanExtend          Default is extensive.                  M
      Extensibility        EXTEND
      Reporting-           MDC_ATTR_SCAN_              RelativeTime        Period of reports.                     M
      Interval             REP_PD
 8
 9   The PeriCfgScanner class defines in Table 77 the attribute groups or extensions to inherited
10   attribute groups.

11                      Table 77 —PeriCfgScanner class attribute groups
             Attribute group                    Attribute group ID                          Group elements
      Scanner Attribute Group             MDC_ATTR_GRP_SCAN                  from Scanner:
      (extensible attribute group)                                           Handle, Instance-Number, Operational-
                                                                             State
                                                                             from CfgScanner:
                                                                             Scan-List, Confirm-Mode, Confirm-
                                                                             Timeout, Transmit-Window, Scan-Config-
                                                                             Limit
                                                                             from PeriCfgScanner:
                                                                             Scan-Extensibility, Reporting-Interval
12
13   The following ASN.1 data type definitions apply:
14     --
15     -- Scan-Extensibility attribute defines if the scanner includes all observations in the ScanReportInfo event
16     -- parameter or if it includes just the latest observation (i.e., superpositive)
17     --
18     ScanExtend ::= INT-U16 {
19          extensive(0),                       -- all attribute changes in the scan period are included
20          superpositive(1),                   -- only the last attribute change is included
21          superpositive-avg(2)                -- superpositive, but all values in period are averaged
22     }

23   6.7.4.2 Behavior

24   The PeriCfgScanner class does not define any special methods.
25   6.7.4.3 Notifications

26   The PeriCfgScanner class defines the events in Table 78.




                                                               144
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



 1                                Table 78 —PeriCfgScanner events
             Event                    Mode                     Event ID           Event parameter         Event result
      Buf-Scan-Report        Confirmed/Unconfirmed       MDC_NOTI_BUF_            ScanReportInfo        —
                                                         SCAN_RPT
 2
 3   6.7.5 FastPeriCfgScanner class

 4   Class:                      FastPeriCfgScanner
 5   Description:                "The FastPeriCfgScanner class is a specialized class for scanning the observed value
 6                               attribute of a RealTimeSampleArray object. This special Scanner class is further optimized
 7                               for low-latency reporting and efficient communication bandwidth utilization, which is
 8                               required to access real-time waveform data."
 9   Superclass:                 PeriCfgScanner
10   Subclasses:                 --
11   Name Binding:               Handle
12   Registered As:              MDC_MOC_SCAN_CFG_PERI_FAST

13   6.7.5.1 Attributes

14   The FastPeriCfgScanner class does not define any addtional attributes.

15   6.7.5.2 Behavior

16   The FastPeriCfgScanner class does not define any special methods.
17   6.7.5.3 Notifications

18   The FastPeriCfgScanner class defines the events in Table 79.

19                             Table 79 —FastPeriCfgScanner events
             Event                   Mode                     Event ID            Event parameter         Event result
      Fast-Buf-Scan-        Confirmed/Unconfirmed       MDC_NOTI_FAST_           FastScanReportInfo     —
      Report                                            BUF_SCAN_RPT
20
21   The following ASN.1 data type definitions apply:
22     --
23     -- Event report contains the observed values of scanned RealTimeSampleArray objects
24     --
25     FastScanReportInfo ::= SEQUENCE {
26          scan-report-no                   INT-U16,
27          glb-scan-info                    SingleCtxtFastScanList
28     }

29     SingleCtxtFastScanList ::= SEQUENCE OF SingleCtxtFastScan

30     SingleCtxtFastScan ::= SEQUENCE {
31          context-id MdsContext,
32          scan-info RtsaObservationScanList
33     }

34     RtsaObservationScanList ::= SEQUENCE OF RtsaObservationScan


                                                             145
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



1      RtsaObservationScan ::= SEQUENCE {
2          handle                     HANDLE,
3          observation                SaObsValue
4      }

 5   A FastPeriCfgScanner object is a dedicated scanner for RealTimeSampleArray objects. For
 6   performance reasons, the sample arrays do not carry a separate timestamp in each
 7   observation scan structure. For time synchronization and timestamping of specific samples,
 8   two different methods can be supported:

 9       a) The default method assumes that the timestamp provided by the EVENT REPORT
10          service    is   the    time     of   the    first   sample     value    in     each
11          RtsaObservationScan::SaObsValue data structure
12       b) For higher precision time synchronization, RealTimeSampleArray objects may
13          support the Average-Reporting-Delay and Sample-Time-Sync attributes. The
14          support for this method is signaled by the presence of the Time-Support::time-
15          capability-time-capab-rtsa-time-sync-highprecision flag in the Clock object. If this
16          method is used, the individual sample times are determined by these attributes and
17          they are independent of the timestamp provided by the EVENT REPORT service.

18   6.7.6 UcfgScanner class

19   Class:                   UcfgScanner
20   Description:             "A UcfgScanner object scans a predefined set of managed medical objects that cannot be
21                            modified. In other words, a UcfgScanner object typically is a reporting object that is
22                            specialized for one specific purpose. It has the following properties:
23                                 — Scanner event reports are typically used in confirmed mode because the data they
24                                      contain are not stateless.
25                                 — The list of scanned objects/attributes is fixed (i.e., cannot be configured).The
26                                      UcfgScanner object is an abstract class; it cannot be instantiated."
27   Superclass:              Scanner
28   Subclasses:              AlertScanner, ContextScanner, OperatingScanner
29   Name Binding:            Handle
30   Registered As:           MDC_MOC_SCAN_UCFG

31   6.7.6.1 Attributes

32   The UcfgScanner class defines the attributes in Table 80.

33                          Table 80 —UcfgScanner class attributes
       Attribute name        Attribute ID         Attribute type                  Remark                   Qualifier
      Confirm-Mode        MDC_ATTR_              ConfirmMode         Default is confirmed mode.            O
                          CONFIRM_MODE
      Confirm-            MDC_ATTR_              RelativeTime        Determines when a confirmed           O
      Timeout             CONFIRM_                                   event report is resent in case of a
                          TIMEOUT                                    missing response.
      Transmit-           MDC_ATTR_TX_           INT-U16             Maximum number of not-yet-            O
      Window              WIND                                       acknowledged event reports at one
                                                                     time.
34
35   The UcfgScanner class defines in Table 81 the attribute groups or extensions to inherited
36   attribute groups.

                                                           146
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1                        Table 81 —UcfgScanner class attribute groups
             Attribute group                     Attribute group ID                         Group elements
      Scanner Attribute Group               MDC_ATTR_GRP_SCAN                 from Scanner:
      (extensible attribute group)                                            Handle, Instance-Number, Operational-
                                                                              State
                                                                              from UcfgScanner:
                                                                              Confirm-Mode, Confirm-Timeout,
                                                                              Transmit-Window
 2

 3   6.7.6.2 Behavior

 4   The UcfgScanner class does not define any special methods.

 5   6.7.6.3 Notifications

 6   The UcfgScanner class does not generate any special notifications.

 7   6.7.7 ContextScanner class

 8   Class:                          ContextScanner
 9   Description:                    "ContextScanner objects are responsible for observing device configuration changes. After
10                                   instantiation, a ContextScanner object is responsible for announcing the object instances
11                                   in the device's MDIB. The scanner provides the object instance containment hierarchy and
12                                   static attribute values. In case of dynamic configuration changes, the ContextScanner
13                                   object sends notifications about new object instances or deleted object instances."
14   Superclass:                     UcfgScanner
15   Subclasses:                     --
16   Name Binding:                   Handle
17   Registered As:                  MDC_MOC_SCAN_UCFG_CTXT

18   6.7.7.1 Attributes

19   The ContextScanner class defines the attributes in Table 82.

20                           Table 82 —ContextScanner class attributes
       Attribute name           Attribute ID             Attribute type                 Remark                    Qualifier
      Context-Mode         MDC_ATTR_SCAN_               ContextMode        Default is dynamic.                   M
                           CTXT_MODE
21
22   The ContextScanner class uses the Scanner Attribute Group that is defined by the Scanner
23   class.

24   The following ASN.1 data type definitions apply:
25     --
26     -- Context-Mode attribute determines if the context scanner sends create notifications for the maximum set of
27     -- object instances in the MDIB (and requires no delete notifications) or for active objects only
28     --
29     ContextMode ::= INT-U16 {
30          static-mode(0),
31          dynamic-mode(1)
32     }


                                                               147
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   6.7.7.2 Behavior

 2   The ContextScanner class defines the methods in Table 83.

 3                         Table 83 —ContextScanner instance methods
          Action                Mode                    Action ID                  Action parameter           Action result
      Refresh-Context     Confirmed             MDC_ACT_REFR_CTXT              RefreshObjList                 ObjCreateInfo
                                                                                                              (scan report
                                                                                                              no is 0)
 4
 5   The Refresh-Context method returns configuration information for all object instances
 6   currently in the MDIB.

 7   6.7.7.3 Notifications

 8   The ContextScanner class defines the events in Table 84.

 9                                  Table 84 —ContextScanner events
              Event                      Mode                     Event ID                Event             Event result
                                                                                        parameter
      Object-Create-           Confirmed/Unconfirmed        MDC_NOTI_OBJ_            ObjCreateInfo        —
      Notification                                          CREAT
      Object-Delete-           Confirmed                    MDC_NOTI_OBJ_            ObjDeleteInfo        —
      Notification                                          DEL
10
11   The following ASN.1 data type definitions apply:
12     --
13     -- Object-Create-Notification event contains type, ID, and attribute information about new object instances in the
14     -- MDIB
15     --
16     ObjCreateInfo ::= SEQUENCE {
17          scan-report-no                  INT-U16,
18          scan-report-info                CreateEntryList
19     }

20     CreateEntryList ::= SEQUENCE OF CreateEntry

21     --
22     -- A single new entry for one parent object, necessary to construct hierarchy in MDIB
23     --
24     CreateEntry ::= SEQUENCE {
25          superior-object                  ManagedObjectId,
26          created-object                   CreatedObjectList
27     }

28     CreatedObjectList ::= SEQUENCE OF CreatedObject

29     --
30     -- Now finally the new object itself
31     --
32     CreatedObject ::= SEQUENCE {
33          class-id     ManagedObjectId,
34          attributes AttributeList

                                                               148
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



1      }

2      --
3      -- Object-Delete-Notification event implicitly deletes all child objects as well
4      --
5      ObjDeleteInfo ::= SEQUENCE {
6           scan-report-no                  INT-U16,
7           object-list                     ManagedObjectIdList
8      }

 9     ManagedObjectIdList ::= SEQUENCE OF ManagedObjectId

10   6.7.8 AlertScanner class

11   Class:                        AlertScanner
12   Description:                  "An AlertScanner object is responsible for observing the alert-related attribute groups of
13                                 objects defined in the Alert Package. As alarming in general is security-sensitive, the
14                                 scanner is not configurable (i.e., all or no Alert objects are scanned). An AlertScanner
15                                 object sends event reports periodically so that timeout conditions can be checked."
16   Superclass:                   UcfgScanner
17   Subclasses:                   --
18   Name Binding:                 Handle
19   Registered As:                MDC_MOC_SCAN_UCFG_ALSTAT

20   6.7.8.1 Attributes

21   The AlertScanner class defines the attributes in Table 85.

22                              Table 85 —AlertScanner class attributes
       Attribute name            Attribute ID           Attribute type                     Remark                Qualifier
      Reporting-           MDC_ATTR_SCAN_              RelativeTime         Period of reports.                  M
      Interval             REP_PD
23
24   The AlertScanner class uses the Scanner Attribute Group that is defined by the Scanner
25   class.
26   6.7.8.2 Behavior

27   The AlertScanner class does not define any special methods.
28   6.7.8.3 Notifications

29   The AlertScanner class defines the events in Table 86.

30                                     Table 86 —AlertScanner events
              Event                      Mode                     Event ID            Event parameter       Event result
      Alert-Scan-Report        Confirmed/Unconfirmed        MDC_NOTI_AL_                  ScanReportInfo   —
                                                            STAT_ SCAN_RPT
31
32   6.7.9 OperatingScanner class

33   Class:                        OperatingScanner


                                                               149
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   Description:              "The OperatingScanner class is responsible for providing all information about the
 2                             operating and control system of the medical device. This information mainly includes
 3                             SCO-contained Operation objects, which are considered SCO properties, not separate
 4                             managed medical objects. The operating scanner
 5                                 — Sends CREATE events for Operation object instances
 6                                 — Scans Operation attributes together with attributes of the SCO Transaction Group
 7                                       (see6.6.1.1)
 8                                 — Provides a refresh mechanism for Operation attributes."
 9   Superclass:               UcfgScanner
10   Subclasses:               --
11   Name Binding:             Handle
12   Registered As:            MDC_MOC_SCAN_UCFG_OP

13   6.7.9.1 Attributes

14   The OperatingScanner class does not define any additional attributes.

15   The OperatingScanner class uses the Scanner Attribute Group that is defined by the
16   Scanner class.

17   6.7.9.2 Behavior

18   The OperatingScanner class defines the methods in Table 87.

19                      Table 87 —OperatingScanner instance methods
            Action           Mode                    Action ID              Action parameter          Action result
      Refresh-          Confirmed           MDC_ACT_REFR_OP_               RefreshObjList         OpCreateInfo
      Operation-                            CTXT                                                  (scan report no is 0)
      Context
      Refresh-          Confirmed           MDC_ACT_REFR_OP_               RefreshObjList         —
      Operation-                            ATTR
      Attributes
20
21   NOTE—The RefreshObjList action parameter for the Refresh-Operation-Attributes method may identify both SCO
22   attributes and Operation attributes.

23   6.7.9.3 Notifications

24   The OperatingScanner class defines the events in Table 88.

25                             Table 88 —OperatingScanner events
              Event                  Mode                     Event ID          Event parameter         Event result
      Oper-Create-           Confirmed/Unconfirmed      MDC_NOTI_OP_            OpCreateInfo          —
      Notification                                      CREAT
      Oper-Delete-           Confirmed                  MDC_NOTI_OP_            OpDeleteInfo          —
      Notification                                      DEL
      Oper-Attribute-        Confirmed/Unconfirmed      MDC_NOTI_OP_            OpAttributeInfo       —
      Update                                            ATTR _UPDT
26
27   The following ASN.1 data type definitions apply:
28     --

                                                            150
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



1    -- Support data types
2    --
3    OpElemAttr ::= SEQUENCE {
4         op-class-id                      OID-Type,
5         op-instance-no                   InstNumber,
6         attributes                       AttributeList
7    }

 8   OpElemAttrList ::= SEQUENCE OF OpElemAttr

 9   --
10   -- Create and delete operations
11   --
12   OpCreateInfo ::= SEQUENCE {
13        scan-report-no                   INT-U16,
14        scan-info                        OpCreateEntryList
15   }

16   OpCreateEntryList ::= SEQUENCE OF OpCreateEntry

17   OpCreateEntry ::= SEQUENCE {
18      sco-glb-handle                     GLB-HANDLE,
19      created-op-list                    OpElemAttrList
20   }

21   OpDeleteInfo ::= SEQUENCE {
22      scan-report-no                     INT-U16,
23      deleted-op-list                    OpDeleteEntryList
24   }

25   OpDeleteEntryList ::= SEQUENCE OF OpDeleteEntry

26   OpDeleteEntry ::= SEQUENCE {
27      sco-glb-handle                     GLB-HANDLE,
28      deleted-op-list                    OpElemList
29   }

30   OpElemList ::= SEQUENCE OF OpElem

31   OpElem ::= SEQUENCE {
32       op-class-id                       OID-Type,
33       op-instance-no                    InstNumber
34   }

35   --
36   -- Report of Operation attributes (from multiple contexts, if necessary)
37   --
38   OpAttributeInfo ::= SEQUENCE {
39        scan-report-no                   INT-U16,
40        glb-scan-info                    SingleCtxtOperScanList
41   }

42   SingleCtxtOperScanList ::= SEQUENCE OF SingleCtxtOperScan

43   SingleCtxtOperScan ::= SEQUENCE {
44        context-id MdsContext,
45        scan-info OpAttributeScanList
46   }

47   OpAttributeScanList ::= SEQUENCE OF OpAttributeScan

                                                             151
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



1      --
2      -- The scanned information contains SCO transaction attributes and Operation attributes
3      --
4      OpAttributeScan ::= SEQUENCE {
5           sco-handle                     HANDLE,
6           invoke-cookie                  INT-U32,
7           lock-state                     AdministrativeState,
8           op-elem-updt-list              OpElemAttrList
9      }


10   6.8 Communication package

11   6.8.1 CommunicationController class

12   Class:                       CommunicationController
13   Description:                 "The CommunicationController class represents the upper layer and lower layer
14                                communication profile (i.e., the application profile, the format profile, and the transport
15                                profile) and provides access methods for obtaining management information related to data
16                                communications."
17   Superclass:                  Top
18   Subclasses:                  BCC, DCC
19   Name Binding:                Handle
20   Registered As:               MDC_MOC_CC (from object-oriented nomenclature partition)

21   6.8.1.1 Attributes

22   The CommunicationController class defines the attributes in Table 89.

23                    Table 89 —CommunicationController class attributes
       Attribute name          Attribute ID          Attribute type                    Remark                   Qualifier
      Handle              MDC_ATTR_ID_              HANDLE               ID for referencing the object          M
                          HANDLE
      Capability          MDC_ATTR_CC_              CcCapability         Bit field indicating specific          M
                          CAPAB                                          capabilities of the
                                                                         CommunicationController
                                                                         implementation.
      Cc-Type             MDC_ATTR_CC_              CC-Oid               Could be used to specify variants,     O
                          TYPE                                           e.g., ISO/IEEE 11073, local area
                                                                         network (LAN), combinations.
      Number-Of-Difs      MDC_ATTR_CC_              INT-U16              Number of device interfaces;           O
                          NUM_DIFS                                       defaults to 1 if not present.
                                                                         DeviceInterface objects are
                                                                         identified by their index. The
                                                                         index is a 16-bit number between
                                                                         1 and the Number-OfDifs attribute
                                                                         value. The list is statically
                                                                         configured at
                                                                         CommunicationController
                                                                         configuration time.
      This-               MDC_ATTR_CC_              INT-U16              Device interface used for the          O
      Connection-Dif-     THIS_DIF_INDEX                                 current connection. 0 or not
      Index                                                              present if this cannot be
                                                                         determined/specified by the
                                                                         implementation.




                                                              152
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name            Attribute ID           Attribute type                    Remark                     Qualifier
      Cc-Ext-Mgmt-         MDC_ATTR_CC_              CcExtMgmtProto        Specifies ID for an external            O
      Proto-Id             EXT_MNG_PROT                                    management protocol, e.g., Simple
                                                                           Network Management Protocol
                                                                           (SNMP) or Common Management
                                                                           Information Protocol (CMIP).
 1
 2   The CommunicationController class defines in Table 90 the attribute groups or extensions
 3   to inherited attribute groups.

4              Table 90 —CommunicationController class attribute groups
              Attribute group                   Attribute group ID                           Group elements
      CommunicationController             MDC_ATTR_GRP_CC                     from CommunicationController:
      Attribute Group                                                         Handle, Capability, Cc-Type, Number-Of-
      (extensible attribute group)                                            Difs, This-Connection-Dif-Index, Cc-Ext-
                                                                              Mgmt-Proto-Id
 5
 6   The following ASN.1 data type definitions apply:
 7    --
 8    -- Capability attribute specifies the CommunicationController object
 9    --
10    CcCapability ::= BITS-32 {
11         cc-sup-ext-mgmt-protocol(0) -- CommunicationController object supports an external management
12                                           -- protocol (e.g., SNMP); if this bit is set, then the presence of the CC-Ext-
13                                           -- Mgmt-Proto-Id attribute is required
14    }

15    --
16    -- CC-OID data type is a regular 16-bit OID from the infrastructure elements nomenclature partition
17    --
18    CC-Oid ::= OID-Type

19    --
20    -- The following is a list of network management protocols; the value range from 32768 to 65535 is reserved for
21    -- manufacturer-specific protocols
22    --
23    CcExtMgmtProto ::= INT-U16 {
24         mgmt-proto-snmp-v1(1),            -- Simple Network Management Protocol Version 1
25         mgmt-proto-snmp-v2(2),            -- Simple Network Management Protocol Version 2
26         mgmt-proto-snmp-v3(3),            -- Simple Network Management Protocol Version 3
27         mgmt-proto-cmip(16)               -- Common Management Information Protocol
28    }

29   6.8.1.2 Behavior

30   The AlertScanner CommunicationController class defines the events in Table 91.

31                 Table 91 —CommunicationController instance methods
          Action               Mode                   Action ID                 Action parameter             Action result
      Get-Mib-Data       Confirmed             MDC_ACT_GET_MIB_             GetMibDataRequest              GetMibDataResult
                                               DATA
32
33   The following ASN.1 data type definitions apply:
                                                               153
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1     --
 2     -- Data type for the ACTION service
 3     -- One request can retrieve data for one device interface only
 4     --
 5     -- NOTE--If the mib-id-list type is empty, no MibElement data are returned in the response; valid entries in the
 6     -- mib-id-list type are defined in the Mib-Element-List attribute of the DeviceInterfaceMibElement object
 7     --
 8     GetMibDataRequest ::= SEQUENCE {
 9          dif-index INT-U16,
10          mib-id-list MibIdList
11     }

12     MibIdList ::= SEQUENCE OF CC-Oid

13     --
14     -- Data type for the ACTION service result
15     --
16     GetMibDataResult ::= SEQUENCE {
17          dif-index                      INT-U16,
18          mib-data-list                  MibDataList
19     }

20     MibDataList ::= SEQUENCE OF MibDataEntry

21     MibDataEntry ::= SEQUENCE {
22        mib-id                            CC-Oid,
23        mib-attributes                    AttributeList
24     }

25   6.8.1.3 Notifications

26   The CommunicationController class does not generate any special notifications.

27   6.8.2 DCC class

28   Class:                       DCC
29   Description:                 "The DCC class is a CommunicationController class used by medical devices operating as
30                                agent systems (i.e., association responders)."
31   Superclass:                  CommunicationController
32   Subclasses:                  --
33   Name Binding:                Handle
34   Registered As:               MDC_MOC_DCC (from object-oriented nomenclature partition)

35   The DCC class does not define any attributes, methods, or notifications.
36   6.8.3 BCC class

37   Class:                       BCC
38   Description:                 "The BCC class is a CommunicationController class used by medical devices operating as
39                                manager systems (i.e., association requestors)."
40   Superclass:                  CommunicationController
41   Subclasses:                  --
42   Name Binding:                Handle
43   Registered As:               MDC_MOC_BCC (from object-oriented nomenclature partition)

44   The BCC class does not define any attributes, methods, or notifications.



                                                               154
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1   6.8.4 DeviceInterface class

 2   Class:                   DeviceInterface
 3   Description:             "A DeviceInterface object represents a BCC or DCC communication port that is an end
 4                            point of a single association for which (e.g., statistical) data are independently collected by
 5                            the CommunicationController object. DeviceInterface objects are not accessible by
 6                            CMDISE services."
 7   Superclass:              --
 8   Subclasses:              --
 9   Name Binding:            -
10   Registered As:           MDC_CC_DIF (from infrastructure nomenclature partition)

11   6.8.4.1 Attributes

12   The DeviceInterface class does not define any attributes. All its properties are captured in
13   the DeviceInterfaceMibElement class. A MibElement instance is mandatory for each
14   instance of DeviceInterface that is supported by a device's CommunicationController
15   instance.
16   6.8.4.2 Behavior

17   The DeviceInterface class does not define any special methods.

18   6.8.4.3 Notifications

19   The DeviceInterface class does not generate any special notifications.

20   6.8.5 MibElement class

21   Class:                   MibElement
22   Description:             "A MibElement object represents management information about a specific physical or
23                            logical port of a DeviceInterface object. The MibElement class is an abstract base class
24                            only."
25   Superclass:              --
26   Subclasses:              DeviceInterfaceMibElement, GeneralCommunicationStatisticsMibElement
27   Name Binding:            -
28   Registered As:           MDC_CC_MIB_ELEM (from infrastructure nomenclature partition)

29   6.8.5.1 Attributes

30   The MibElement class defines the attributes in Table 92.

31                           Table 92 —MibElement class attributes
       Attribute name        Attribute ID          Attribute type                    Remark                     Qualifier
      Mib-Ext-Oid         MDC_CC_MIB_             OCTET                The OCTET STRING contains a             O
                          DATA_EXT_OID            STRING               registered ISO OID that is fully
                                                                       encoded by basic encoding rules
                                                                       (BER) if the MibElement is a
                                                                       registered concept. The size of the
                                                                       OCTET STRING shall be even
                                                                       and may require a padding byte.
                                                                       This attribute allows the inclusion
                                                                       of management information base
                                                                       (MIB) definitions from other
                                                                       standards here.


                                                           155
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1
 2   The attributes can only be retrieved by the Get-Mib-Data method defined on the
 3   CommunicationController class.

 4   The MibElement class does not define any attribute groups.

 5   6.8.5.2 Behavior

 6   The MibElement class does not define any special methods.
 7   6.8.5.3 Notifications

 8   The MibElement class does not generate any special notifications.

 9   6.8.6 DeviceInterfaceMibElement class

10   Class:                   DeviceInterfaceMibElement
11   Description:             "A DeviceInterfaceMibElement object describes the properties of a DeviceInterface object.
12                            This MibElement object is mandatory for each DeviceInterface object of the
13                            CommunicationController object."
14   Superclass:              MibElement
15   Subclasses:              --
16   Name Binding:            -
17   Registered As:           MDC_CC_MIB_ELEM_DIF (from infrastructure nomenclature partition)

18   6.8.6.1 Attributes

19   The DeviceInterfaceMibElement class defines the attributes in Table 93.

20                  Table 93 —DeviceInterfaceMibElement class attributes
      Attribute name      Attribute ID           Attribute type                   Remark                   Qualifier
      Dif-Id            MDC_CC_MIB_           INT-U16                 Between 1 and the Number-            M
                        DATA_DIF_ID                                   OfDifs attribute value in the
                                                                      CommunicationController object.
      Port-State        MDC_CC_MIB_           DifMibPortState         State information about the port.    M
                        DATA_DIF_PORT_
                        ST
      Port-Number       MDC_CC_MIB_           INT-U16                 Logical port number of this          O
                        DATA_DIF_PORT_                                device interface.
                        NO
      Dif-Type          MDC_CC_MIB_           CC-Oid                  Assumes entries in infrastructure    O
                        DATA_DIF_TYPE                                 nomenclature partition.
      Active-Profile    MDC_CC_MIB_           OID-Type                This ID should contain the Profile   O
                        DATA_PROFILE_                                 Support Attribute ID (see
                        ID                                            ISO/IEEE 11073-20101) as used
                                                                      in the ACSE user information
                                                                      structure that was negotiated in
                                                                      the association phase for the
                                                                      active profile. If no profile is
                                                                      active, the field should be set to
                                                                      0.
      Supported-        MDC_CC_MIB_           SupportedProfileList    See below                            O
      Profiles          DATA_SUPP_
                        PROFILES

                                                           156
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name           Attribute ID             Attribute type                      Remark                    Qualifier
      MTU                  MDC_CC_MIB_               INT-U32                  Maximum transmit unit, in bytes         O
                           DATA_MTU
      Link-Speed           MDC_CC_MIB_               INT-U32                  In bits per second                      O
                           DATA_LINK_
                           SPEED
      Mib-Element-         MDC_CC_MIB_               MibElementList           A list of MibElements supported         M
      List                 DATA_MIB_                                          by the DeviceInterface object (in
                           ELEM_LIST                                          addition to this mandatory
                                                                              MibElement). Assumes that the
                                                                              MibElements are registered in the
                                                                              nomenclature.
 1
 2   The attributes can only be retrieved by the Get-Mib-Data method defined on the
 3   CommunicationController class.

 4   The DeviceInterfaceMibElement class does not define any attribute groups.

 5   The following ASN.1 data type definitions apply:
 6     --
 7     -- Supported-Profiles attribute defines which profiles are supported by the DeviceInterface object; entries in the
 8     -- list are Profile Support Attribute IDs as used in the ACSE user information structure used for negotiating the
 9     -- active profile (see definition of application profiles) (entries in the list are from the infrastructure nomenclature
10     -- partition)
11     --
12     SupportedProfileList ::= SEQUENCE OF CC-Oid

13     --
14     -- The Mib-Element-List attribute defines which MibElement objects are supported by the DeviceInterface object
15     -- (entries in the list are from the infrastructure nomenclature partition)
16     --
17     MibElementList ::= SEQUENCE OF CC-Oid

18     --
19     -- State of the communication port
20     --
21     DifMibPortState ::= BITS-16 {
22           difmib-port-enabled(0),
23           difmib-port-connected(1),        -- port physically connected to line/network
24           difmib-port-associated(2),       -- logical connection active on port
25           difmib-port-failure(15)          -- port is in a hardware failure state
26     }

27   6.8.6.2 Behavior

28   The DeviceInterfaceMibElement class does not define any special methods.
29   6.8.6.3 Notifications

30   The DeviceInterfaceMibElement class does not generate any special notifications.

31   6.8.7 GeneralCommunicationStatisticsMibElement class

32   Class:                         GeneralCommunicationStatisticsMibElement


                                                                157
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                             APPROVED DRAFT




                                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                               IEEE P11073-10201/D2.1.109, September October 2018



1    Description:            "The    GeneralCommunicationStatisticsMibElement          class    represents     generic
2                            communication statistics for one device interface."
3    Superclass:             MibElement
4    Subclasses:             --
5    Name Binding:           -
6    Registered As:          MDC_CC_MIB_ELEM_GEN_COMM_STATS                      (from     infrastructure     elements
7                            nomenclature table)

8    6.8.7.1 Attributes

9    The GeneralCommunicationStatisticsMibElement class defines the attributes in Table 94.

10    Table 94 —GeneralCommunicationStatisticsMibElement class attributes
      Attribute name       Attribute ID          Attribute type                   Remark                  Qualifier
      Packets-In        MDC_CC_MIB_            MibCcCounter          The number of packets received.      O
                        DATA_PACK_IN
      Packets-Out       MDC_CC_MIB_            MibCcCounter          The number of packet issued.         O
                        DATA_PACK_OUT
      Octets-In         MDC_CC_MIB_            MibCcCounter          The number of payload bytes          O
                        DATA_OCT_IN                                  received at transport interface
                                                                     (e.g., without framing).
      Octets-Out        MDC_CC_MIB_            MibCcCounter          The number of payload bytes          O
                        DATA_OCT_OUT                                 sent at transport interface (e.g.,
                                                                     without framing).
      Discarded-        MDC_CC_MIB_            MibCcCounter          Received packets not delivered       O
      Packets-In        DATA_DISC_                                   to upper layers.
                        PACK_IN
      Discarded-        MDC_CC_MIB_            MibCcCounter          Packets from upper layers not        O
      Packets-Out       DATA_DISC_                                   sent to network interface.
                        PACK_OUT
      Unknown-          MDC_CC_MIB_            MibCcCounter          Received packets with unknown        O
      Protocol-         DATA_UNK_PROT_                               protocol.
      Packets-In        PACK_IN
      Queue-Len-In      MDC_CC_MIB_            MibCcGauge            Size of output packet queue in       O
                        DATA_QUEUE_                                  bytes.
                        LEN_IN
      Queue-Len-Out     MDC_CC_MIB_            MibCcGauge            Size of input packet queue in        O
                        DATA_QUEUE_                                  bytes.
                        LEN_OUT
      Dif-Admin-        MDC_CC_MIB_            OperationalState      Desired device interface state.      O
      Status            DATA_DIF_STATE
      Dif-Oper-Status   MDC_CC_MIB_            OperationalState      Current device interface status.     O
                        DATA_CUR_DIF_
                        STATE
      Dif-Last-Change   MDC_CC_MIB_            AbsoluteTime          The time when the device             O
                        DATA_TIME_DIF_                               interface last changed state.
                        LAST_CHANGE
      Errors-In         MDC_CC_MIB_            MibCcCounter          Corrupt received packets.            O
                        DATA_ERRS_IN
      Errors-Out        MDC_CC_MIB_            MibCcCounter          Corrupt sent packets.                O
                        DATA_ERRS_OUT




                                                          158
                                       Copyright © 2018 IEEE. All rights reserved.
                            This is an unapproved IEEE Standards Draft, subject to change.
                                 APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name          Attribute ID            Attribute type                  Remark                   Qualifier
      Generic-Mode        MDC_CC_MIB_              MibCcCommMode          The mode of the communication.      O
                          DATA_COMM_
                          MODE
      Average-Speed       MDC_CC_MIB_              INT-U32                In bits per second.                 O
                          DATA_AVG_SPEED
      Maximum-Speed       MDC_CC_MIB_              INT-U32                In bits per second.                 O
                          DATA_MAX_
                          SPEED
 1
 2   The attributes can only be retrieved by the Get-Mib-Data method defined on the
 3   CommunicationController class.

 4   The GeneralCommunicationStatisticsMibElement class does not define any attribute
 5   groups.

 6   The following ASN.1 data type definitions apply:
 7     --
 8     -- The gauge type (from IETF RFC 1155) represents a non-negative integer that may increase or decrease, but that
 9     -- latches at a maximum value
10     --
11     MibCcGauge ::= INT-U32

12     --
13     -- The counter type (from IETF RFC 1155) represents a non-negative integer that monotonically increases until it
14     -- reaches a maximum value, at which time it wraps around and starts increasing again from 0
15     --
16     MibCcCounter ::= INT-U32

17     --
18     -- The communication mode type represents the communication modes that are supported by the device interface.
19     --
20     MibCcCommMode ::= BITS-32 {
21          comm-mode-simplex(0),
22          comm-mode-half-duplex(1),
23          comm-mode-full-duplex(2)
24     }

25   6.8.7.2 Behavior

26   The GeneralCommunicationStatisticsMibElement class does not define any special
27   methods.
28   6.8.7.3 Notifications

29   The GeneralCommunicationStatisticsMibElement class does not generate any special
30   notifications.

31   6.9 Archival package

32   6.9.1 MultiPatientArchive class

33   Class:                       MultiPatientArchive

                                                              159
                                           Copyright © 2018 IEEE. All rights reserved.
                                This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   Description:                 "A MultipatientArchive object groups together one or more PatientArchive objects."
 2   Superclass:                  Top
 3   Subclasses:                  --
 4   Name Binding:                Handle
 5   Registered As:               MDC_MOC_ARCHIVE_MULTI_PT

 6   6.9.1.1 Attributes

 7   The MultiPatientArchive class defines the attributes in Table 95.

 8                       Table 95 —MultiPatientArchive class attributes
       Attribute name            Attribute ID          Attribute type                 Remark                   Qualifier
      Handle               MDC_ATTR_ID_               HANDLE             Name binding attribute.              M
                           HANDLE
      System-Id            MDC_ATTR_SYS_ID            OCTET                                                   M
                                                      STRING
      Location             MDC_ATTR_                  OCTET              Example: name of hospital.           M
                           LOCATION                   STRING
      Study-Name           MDC_ATTR_                  OCTET                                                   M
                           STUDYNAME                  STRING
      Version_dim          MDC_ATTR_                  OCTET              Example: ADS version 1.0.            M
                           ARCHIVE_VERS               STRING
 9
10   The MultiPatientArchive class defines in Table 96 the attribute groups or extensions to
11   inherited attribute groups.

12                    Table 96 —MultiPatientArchive class attribute groups
               Attribute group                  Attribute group ID                        Group elements
      Archival Attribute Group           MDC_ATTR_GRP_ARCHIVE              from MultiPatientArchive:
                                                                           Handle, System-Id, Location, Study-Name,
                                                                           Version_dim
13
14   6.9.1.2 Behavior

15   The MultiPatientArchive class does not define any special methods.

16   6.9.1.3 Notifications

17   The MultiPatientArchive class does not generate any special notifications.
18   6.9.2 PatientArchive class

19   Class:                       PatientArchive
20   Description:                 "A PatientArchive object groups together vital signs and other information about a single
21                                patient."
22   Superclass:                  Top
23   Subclasses:                  --
24   Name Binding:                Handle
25   Registered As:               MDC_MOC_ARCHIVE_PT




                                                               160
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   6.9.2.1 Attributes

 2   The PatientArchive class defines the attributes in Table 97.

 3                           Table 97 —PatientArchive class attributes
       Attribute name            Attribute ID          Attribute type                   Remark                   Qualifier
      Handle               MDC_ATTR_ID_               HANDLE               Name binding attribute.              M
                           HANDLE
      System-Id            MDC_ATTR_SYS_ID            OCTET STRING                                              M
      System-Name          MDC_ATTR_NAME_             OCTET STRING         Example: filename.                   M
                           SYS
      Processing-          MDC_ATTR_PROC_             OCTET STRING         Example: not processed.              M
      History              HIST
      Protection           MDC_ATTR_                  ArchiveProtection    Example: original recording.         M
                           PROTECTION
 4
 5   The PatientArchive class defines in Table 98 the attribute groups or extensions to inherited
 6   attribute groups.

 7                      Table 98 —PatientArchive class attribute groups
               Attribute group                  Attribute group ID                         Group elements
      Archival Attribute Group           MDC_ATTR_GRP_ARCHIVE                from PatientArchive:
                                                                             Handle, System-Id, System-Name,
                                                                             Processing-History, Protection
 8
 9   The following ASN.1 data type definitions apply:
10     --
11     -- Protection attribute defines the mechanism used for access control; this mechanism is vendor-specific or
12     -- implementation-specific
13     --
14     ArchiveProtection ::= SEQUENCE {
15          protection-type                   PrivateOid,
16          protection-key                    ANY DEFINED BY protection-type
17     }

18   6.9.2.2 Behavior

19   The PatientArchive class does not define any special methods.
20   6.9.2.3 Notifications

21   The PatientArchive class does not generate any special notifications.
22   6.9.3 SessionArchive class

23   Class:                        SessionArchive
24   Description:                  "A SessionArchive object contains information on a single patient that is collected during
25                                 one stay or visit."
26   Superclass:                   Top
27   Subclasses:                   --
28   Name Binding:                 Handle

                                                               161
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   Registered As:                MDC_MOC_ARCHIVE_SESSION

 2   6.9.3.1 Attributes

 3   The SessionArchive class defines the attributes in Table 99.

 4                          Table 99 —SessionArchive class attributes
      Attribute name             Attribute ID          Attribute type                  Remark                Qualifier
      Handle              MDC_ATTR_ID_                HANDLE               Name binding attribute.           M
                          HANDLE
      S-Archive-Id        MDC_ATTR_ID_                OCTET STRING                                           M
                          SESS_ARCHIVE
      S-Archive-Name      MDC_ATTR_NAME_              OCTET STRING         Example: study name.              M
                          SESS_ARCHIVE
      S-Archive-          MDC_ATTR_SESS_              OCTET STRING         Example: part one of MSLT test.   O
      Comments            ARCHIVE_
                          COMMENTS
      Start-Time          MDC_ATTR_TIME_              AbsoluteTime                                           M
                          START
      Stop-Time           MDC_ATTR_TIME_              AbsoluteTime                                           M
                          STOP
      Protection          MDC_ATTR_                   ArchiveProtection    Example: original recording.      C
                          PROTECTION
 5
 6   The SessionArchive class defines in Table 100 the attribute groups or extensions to
 7   inherited attribute groups.

 8                    Table 100 —SessionArchive class attribute groups
               Attribute group                  Attribute group ID                        Group elements
      Archival Attribute Group           MDC_ATTR_GRP_ARCHIVE               from SessionArchive:
                                                                            Handle, S-Archive-Id, S-Archive-Name, S-
                                                                            Archive-Comments, Start-Time, Stop-
                                                                            Time, Protection
 9
10   6.9.3.2 Behavior

11   The SessionArchive class does not define any special methods.
12   6.9.3.3 Notifications

13   The SessionArchive class does not generate any special notifications.
14   6.9.4 Physician class

15   Class:                        Physician
16   Description:                  "The Physician class represents a physician."
17   Superclass:                   Top
18   Subclasses:                   --
19   Name Binding:                 Handle
20   Registered As:                MDC_MOC_PHYSICIAN


                                                               162
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1   6.9.4.1 Attributes

 2   The Physician class defines the attributes in Table 101.

 3                               Table 101 —Physician class attributes
      Attribute name              Attribute ID          Attribute type                  Remark                    Qualifier
      Handle               MDC_ATTR_ID_                HANDLE              Name binding attribute.                M
                           HANDLE
      Physician-Id         MDC_ATTR_ID_                OCTET                                                      M
                           PHYSICIAN                   STRING
      Authorization-       MDC_ATTR_AUTH_              Authorization                                              C
      Level                LEVEL
      Name                 MDC_ATTR_                   OCTET               Unstructured physician name.           O
                           PHYSICIAN_NAME              STRING
      Given-Name           MDC_ATTR_                   OCTET                                                      O
                           PHYSICIAN_NAME_             STRING
                           GIVEN
      Family-Name          MDC_ATTR_                   OCTET                                                      O
                           PHYSICIAN_NAME_             STRING
                           FAMILY
      Middle-Name          MDC_ATTR_                   OCTET                                                      O
                           PHYSICIAN_NAME_             STRING
                           MIDDLE
      Title-Name           MDC_ATTR_                   OCTET               Example: Professor.                    O
                           PHYSICIAN_NAME_             STRING
                           TITLE
 4
 5   The Physician class defines in Table 102 the attribute groups or extensions to inherited
 6   attribute groups.

 7                         Table 102 —Physician class attribute groups
             Attribute group                     Attribute group ID                          Group elements
      Physician Attribute Group          MDC_ATTR_GRP_PHYSICIAN                from Physician:
                                                                               Handle, Physician-Id, Authorization-Level,
                                                                               Name, Given-Name, Family-Name,
                                                                               Middle-Name, Title-Name
 8
 9   The following ASN.1 data type definitions apply:
10     --
11     -- Authorization-Level attribute defines the access rights used for access control; this mechanism is vendor-specific or
12     -- implementation-specific --
13     Authorization ::= SEQUENCE {
14          authorization-type               PrivateOid,
15          authorization-key                ANY DEFINED BY authorization-type
16     }

17   6.9.4.2 Behavior

18   The Physician class does not define any special methods.


                                                                163
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1   6.9.4.3 Notifications

 2   The Physician class does not generate any special notifications.

 3   6.9.5 SessionTest class

 4   Class:                        SessionTest
 5   Description:                  "A SessionTest object contains vital signs information of a single patient that is recorded
 6                                 during a single examination or diagnostic treatment. This object contains vital signs metrics
 7                                 in the form of PM-Store objects. It also may contain information about equipment that was
 8                                 used for recording (in the form of relations to MDS and Ancillary objects)."
 9   Superclass:                   Top
10   Subclasses:                   --
11   Name Binding:                 Handle
12   Registered As:                MDC_MOC_SESSION_TEST

13   6.9.5.1 Attributes

14   The SessionTest class defines the attributes in Table 103.

15                           Table 103 —SessionTest class attributes
       Attribute name            Attribute ID           Attribute type                   Remark                    Qualifier
      Handle              MDC_ATTR_ID_                HANDLE                 Name binding attribute.               M
                          HANDLE
      St-Archive-Id       MDC_ATTR_ID_                OCTET STRING                                                 M
                          SESS_TEST_
                          ARCHIVE
      St-Archive-         MDC_ATTR_NAME_              OCTET STRING           Example: study name.                  M
      Name                SESS_TEST_
                          ARCHIVE
      St-Archive-         MDC_ATTR_SESS_              OCTET STRING                                                 O
      Comments            TEST_ARCHIVE_
                          COMMENTS
      Start-Time          MDC_ATTR_TIME_              AbsoluteTime                                                 M
                          START
      Stop-Time           MDC_ATTR_TIME_              AbsoluteTime                                                 M
                          STOP
      Protection          MDC_ATTR_                   ArchiveProtection                                            C
                          PROTECTION
16
17   The SessionTest class defines in Table 104 the attribute groups or extensions to inherited
18   attribute groups.

19                       Table 104 —SessionTest class attribute groups
               Attribute group                  Attribute group ID                           Group elements
      Archival Attribute Group            MDC_ATTR_GRP_ARCHIVE                from SessionTest:
                                                                              Handle, St-Archive-Id, St-Archive-Name,
                                                                              St-Archive-Comments, Start-Time, Stop-
                                                                              Time, Protection
20



                                                               164
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   6.9.5.2 Behavior

 2   The SessionTest class does not define any special methods.

 3   6.9.5.3 Notifications

 4   The SessionTest class does not generate any special notifications.
 5   6.9.6 SessionNotes class

 6   Class:                    SessionNotes
 7   Description:              "A SessionNotes object contains diagnostic data, patient care details, and treatment-related
 8                             information in the form of textual data."
 9   Superclass:               Top
10   Subclasses:               --
11   Name Binding:             Handle
12   Registered As:            MDC_MOC_SESSION_NOTES

13   6.9.6.1 Attributes

14   The SessionNotes class defines the attributes in Table 105.

15                         Table 105 —SessionNotes class attributes
       Attribute name        Attribute ID           Attribute type                   Remark                   Qualifier
      Handle              MDC_ATTR_ID_            HANDLE                Name binding attribute.               M
                          HANDLE
      Sn-Id               MDC_ATTR_ID_            OCTET STRING                                                M
                          SESS_NOTES_
                          ARCHIVE
      Sn-Name             MDC_ATTR_NAME_          OCTET STRING                                                M
                          SESS_NOTES_
                          ARCHIVE
      Sn-Comments         MDC_ATTR_SESS_          OCTET STRING                                                O
                          NOTES_ARCHIVE_
                          COMMENTS
      Start-Time          MDC_ATTR_TIME_          AbsoluteTime                                                M
                          START
      Stop-Time           MDC_ATTR_TIME_          AbsoluteTime                                                M
                          STOP
      Findings            MDC_ATTR_               OCTET STRING                                                O
                          FINDINGS
      Diagnostic-         MDC_ATTR_CODE_          ExtNomenRefList       Diagnostic codes are specified in     M
      Codes               DIAGNOSTIC                                    a nomenclature scheme not
                                                                        defined in this standard.
      Diagnosis-          MDC_ATTR_DESC_          OCTET STRING                                                O
      Description         DIAGNOSTIC
      Procedure-Code      MDC_ATTR_CODE_          ExtNomenRefList       Procedure codes are specified in      M
                          PROCEDURE                                     a nomenclature scheme not
                                                                        defined in this standard.
      Procedure-          MDC_ATTR_DESC_          OCTET STRING                                                O
      Description         PROCEDURE
      Protection          MDC_ATTR_               ArchiveProtection                                           C
                          PROTECTION

                                                           165
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1
 2   The SessionNotes class defines in Table 106 the attribute groups or extensions to inherited
 3   attribute groups.

 4                      Table 106 —SessionNotes class attribute groups
               Attribute group                  Attribute group ID                        Group elements
      Archival Attribute Group           MDC_ATTR_GRP_ARCHIVE              from SessionNotes:
                                                                           Handle, Sn-Id, Sn-Name, Sn-Comments,
                                                                           Start-Time, Stop-Time, Findings,
                                                                           Diagnostic-Codes, Diagnosis-Description,
                                                                           Procedure-Code, Procedure-Description,
                                                                           Protection
 5
 6   The following ASN.1 data type definitions apply:
 7     ExtNomenRefList ::= SEQUENCE OF ExtNomenRef

 8   6.9.6.2 Behavior

 9   The SessionNotes class does not define any special methods.
10   6.9.6.3 Notifications

11   The SessionNotes class does not generate any special notifications.

12   6.10 Patient package

13   6.10.1 PatientDemographics class

14   Class:                       PatientDemographics
15   Description:                 "A PatientDemographics object contains minimal patient information as required by
16                                medical devices."
17   Superclass:                  Top
18   Subclasses:                  --
19   Name Binding:                Handle
20   Registered As:               MDC_MOC_PT_DEMOG

21   6.10.1.1 Attributes

22   The PatientDemographics class defines the attributes in Table 107.

23                     Table 107 —PatientDemographics class attributes
       Attribute name            Attribute ID          Attribute type                  Remark                 Qualifier
      Handle              MDC_ATTR_ID_                HANDLE              Name binding attribute.             M
                          HANDLE
      Pat-Demo-State      MDC_ATTR_PT_                PatDemoState        As a container, this object has a   M
                          DEMOG_ST                                        state.
      Patient-Id          MDC_ATTR_PT_ID              OCTET STRING                                            O
      Name                MDC_ATTR_PT_                OCTET STRING                                            O
                          NAME



                                                               166
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                       APPROVED DRAFT




                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                         IEEE P11073-10201/D2.1.109, September October 2018



Attribute name        Attribute ID          Attribute type                  Remark                  Qualifier
Given-Name         MDC_ATTR_PT_           OCTET STRING                                              O
                   NAME_GIVEN
Family-Name        MDC_ATTR_PT_           OCTET STRING                                              O
                   NAME_FAMILY
Middle-Name        MDC_ATTR_PT_           OCTET STRING                                              O
                   NAME_MIDDLE
Birth-Name         MDC_ATTR_PT_           OCTET STRING          Maiden name.                        O
                   NAME_BIRTH
Title-Name         MDC_ATTR_PT_           OCTET STRING          Example: Professor.                 O
                   NAME_TITLE
Sex                MDC_ATTR_PT_SEX        PatientSex                                                O
Race               MDC_ATTR_PT_           PatientRace                                               O
                   RACE
Patient-Type       MDC_ATTR_PT_           PatientType                                               O
                   TYPE
Date-Of-Birth      MDC_ATTR_PT_           Date                                                      O
                   DOB
Patient-Gen-Info   MDC_ATTR_PT_           OCTET STRING         Textual patient-related              O
                   GEN_INFO                                    information.
Patient-Age        MDC_ATTR_PT_           PatMeasure           For neonatal, e.g., in hours or in   O
                   AGE                                         weeks.
Gestational-Age    MDC_ATTR_PT_           PatMeasure            For neonatal.                       O
                   AGE_GEST
Patient-Height     MDC_ATTR_PT_           PatMeasure                                                O
                   HEIGHT
Patient-Weight     MDC_ATTR_PT_           PatMeasure                                                O
                   WEIGHT
Patient-Birth-     MDC_ATTR_PT_           PatMeasure            For neonatal.                       O
Length             BIRTH_LENGTH
Patient-Birth-     MDC_ATTR_PT_           PatMeasure            For neonatal.                       O
Weight             BIRTH_WEIGHT
Mother-Patient-    MDC_ATTR_ID_PT_        OCTET STRING         For neonatal.                        O
Id                 MOTHER
Mother-Name        MDC_ATTR_PT_           OCTET STRING         For neonatal.                        O
                   NAME_MOTHER
Patient-Head-      MDC_ATTR_              PatMeasure                                                O
Circumference      CIRCUM_HEAD
Patient-Bsa        MDC_ATTR_PT_           PatMeasure           Body surface area; can be            O
                   BSA                                         calculated.
Patient-Lbm        MDC_ATTR_PT_           PatMeasure           Lean body mass; used for drug        O
                   LBM                                         dosage calculations.
Bed-Id             MDC_ATTR_ID_BED        OCTET STRING                                              O
Diagnostic-Info    MDC_ATTR_              OCTET STRING         Free text for diagnosis.             O
                   DIAGNOSTIC_INFO
Diagnostic-        MDC_ATTR_CODE_         ExtNomenRefList      Diagnostic codes are specified in    O
Codes              DIAGNOSTIC                                  a nomenclature scheme not
                                                               defined in this standard.
Admitting-         MDC_ATTR_              OCTET STRING         For ICU.                             O
Physician          PHYSICIAN_ADMIT


                                                    167
                                 Copyright © 2018 IEEE. All rights reserved.
                      This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                         Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                          Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



      Attribute name           Attribute ID          Attribute type                  Remark                 Qualifier
      Attending-         MDC_ATTR_                  OCTET STRING        For ICU.                            O
      Physician          PHYSICIAN_
                         ATTEND
      Date-Of-           MDC_ATTR_                  Date                For operating room (OR).            O
      Procedure          PROCEDURE_DATE
      Procedure-         MDC_ATTR_DESC_             OCTET STRING        For OR.                             O
      Description        PROCEDURE
      Procedure-Codes    MDC_ATTR_CODE_             ExtNomenRefList     For OR; procedure codes are         O
                         PROCEDURE                                      specified in a nomenclature
                                                                        scheme not defined in this
                                                                        standard.
      Anaesthetist       MDC_ATTR_                  OCTET STRING        For OR.                             O
                         ANAESTHETIST
      Surgeon            MDC_ATTR_                  OCTET STRING        For OR.                             O
                         SURGEON
 1
 2   The PatientDemographics class defines in Table 108 the attribute groups or extensions to
 3   inherited attribute groups.

4                   Table 108 —PatientDemographics class attribute groups
             Attribute group                   Attribute group ID                        Group elements
      PatientDemographics Attribute    MDC_ATTR_GRP_PT_DEMOG               from PatientDemographics:
      Group                                                                Handle, Pat-Demo-State, Patient-Id,
                                                                           Name, Given-Name, Family-Name,
                                                                           Middle-Name, Birth-Name, Title-Name,
                                                                           Sex, Race, Patient-Type, Date-Of-Birth,
                                                                           Patient-Gen-Info, Patient-Age, Gestational-
                                                                           Age, Patient-Height, Patient-Weight,
                                                                           Patient-Birth-Length, Patient-Birth-
                                                                           Weight, Mother-Patient-Id, Mother-Name,
                                                                           Patient-Head-Circumference, Patient-Bsa,
                                                                           Patient-Lbm, Bed-Id, Diagnostic-Info,
                                                                           Diagnostic-Codes, Admitting-Physician,
                                                                           Attending-Physician, Date-Of-Procedure,
                                                                           Procedure-Description, Procedure-Codes,
                                                                           Anaesthetist, Surgeon
 5
 6   The following ASN.1 data type definitions apply:
 7    --
 8    -- State of the PatientDemographics object
 9    --
10    PatDemoState ::= INT-U16 {
11          empty(0),
12          pre-admitted(1),
13          admitted(2),
14          discharged(8)
15    }

16    --
17    -- Patient demographics measured value
18    --
19    PatMeasure ::= SEQUENCE {
20         value       FLOAT-Type,

                                                             168
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



 1         m-unit      OID-Type           -- code for units of measure
 2     }

 3    --
 4    -- Patient sex according to ISO/IEC 5218
 5    --
 6    PatientSex ::= INT-U16 {
 7         sex-unknown(0),
 8         male(1),
 9         female(2),
10         sex-unspecified(9)
11    }

12    --
13    -- Patient-Type attribute
14    --
15    PatientType ::= INT-U16 {
16         pt-unspecified(0),
17         adult(1),
18         pediatric(2),
19         neonatal(3)
20    }

21    --
22    -- Patient race according to the Standard Communications Protocol [for computer-assisted]
23    -- Electrocardiography(SCP ECG) (see CEN EN 1064)
24    --
25    PatientRace ::= INT-U16 {
26         race-unspecified(0),
27         race-caucasian(1),
28         race-black(2),
29         race-oriental(3)
30    }

31   6.10.1.2 Behavior

32   The PatientDemographics class defines the methods in Table 109.

33                    Table 109 —PatientDemographics instance methods
           Action             Mode                    Action ID                 Action parameter   Action result
      Discharge-        Confirmed            MDC_ACT_DISCH_PT                                      PatDemoState
      Patient
      Admit-Patient     Confirmed            MDC_ACT_ADMIT_PT               AdmitPatInfo           PatDemoState
      Pre-Admit-        Confirmed            MDC_ACT_PRE_                   AdmitPatInfo           PatDemoState
      Patient                                ADMIT_PT
34
35   The following ASN.1 data type definitions apply:
36    --
37    -- Admit-Patient method
38    --
39    AdmitPatInfo ::= AttributeList

40   6.10.1.3 Notifications

41   The PatientDemographics class defines the events in Table 110.

                                                             169
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                              Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                               Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1                            Table 110 —PatientDemographics events
               Event                     Mode                    Event ID                Event            Event result
                                                                                       parameter
      Patient-                  Confirmed/Unconfirmed      MDC_NOTI_PT_             AttributeList        —
      Demographics-                                        DEMOG_MOD
      Modified
      Patient-                  Confirmed/Unconfirmed      MDC_NOTI_PT_             AttributeList        —
      Demographics- State-                                 DEMOG_ST_MOD
      Change
 2

 3   7. Service model for communicating systems

 4   7.1 General

 5   This clause defines the basic application layer services provided by communicating
 6   systems that comply with this standard. The services are used by application processes to
 7   exchange vital signs information and commands for device and measurement control.

 8   7.2 Communicating systems

 9   The communication architecture that is assumed here is based on the agent-manager
10   concept found in ISO systems management. It is possible to distinguish three types of
11   systems that communicate and process vital signs information:

12     1. Vital signs information agent (i.e., an agent system that provides vital signs
13        information in the form of managed medical objects)
14     2. Vital signs information manager (i.e., a manager system that consumes and acts upon
15        vital signs information in the form of managed medical objects)
16     3. Vital signs information hybrid system (i.e., a system that both provides and consumes
17        vital signs information)
18   NOTE—The term vital signs refers to the scope of this standard, not to the type or timeliness of information. Archived
19   vital sign information can, for example, be provided on a vital signs information agent to supply manager applications
20   with the requested data using remote database access.

21   A single communication application may consist of two or more of the above-mentioned
22   systems.

23          Example: A central arrhythmia review system may consist of an ECG monitor (i.e., a
24          vital signs information agent), an arrhythmia computer (i.e., a vital signs information
25          hybrid system), and a central display and storage device (i.e., a vital signs information
26          manager).

27   7.3 General service model overview

28   The range of devices, system configurations, and applications in the scope of this standard
29   (i.e., vital signs) is very wide. From a simple device providing a single numerical

                                                               170
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1   measurement to a system that consists of a number of dynamically reconfigurable
 2   measurement and processing devices, there is a large variation in complexity. Over time,
 3   it is likely that new classes providing specific functionality will have to be added to the
 4   DIM to cope with ongoing developments in the field of medical devices and
 5   measurements.Therefore, specialized messages for all possible vital signs and each
 6   possible application cannot be defined without causing penalties for small-scale devices
 7   and difficulties in the future maintenance of this standard and any implementations that are
 8   based on it. These obstacles necessitate the definition of a generalized service model that
 9   is largely independent of the DIM and does not require modification if new classes are
10   needed.
11   NOTE—ISO/IEEE 11073-20601 defines protocols that are an alternative to this standard. ISO/IEEE 11073-20601 is
12   tailored specifically for personal health devices, devices which are typically smaller and simpler than the point-of-care
13   devices with which this standard is primarily concerned.

14   The DIM is strictly based on object-oriented methodology. It defines vital signs
15   information in the form of classes and object containment hierarchies (i.e., managed
16   medical objects). The classes each have identifiers, attributes, and methods.

17   The service model for communicating systems provides access to these managed medical
18   objects by means of basic object management services that are independent of specific
19   information object definitions. Such object management services make it possible to extend
20   the information model by adding additional classes in subsequent standards without
21   affecting the service model.

22   General object management services as defined in this standard are conceptually based on
23   OSI system management in general (i.e., ISO/IEC 10040, the ISO/IEC 10164 family of
24   standards) and specifically on the ISO/IEC common management information service
25   element (CMISE) (i.e., ISO/IEC 9595).
26   NOTE—Classes that provide extended management services as defined in ISO/IEC 10164 family of standards are
27   defined in the DIM, in particular in the ExtendedServices Package. Extended services defined by objects are invoked by
28   the general object management services defined in this clause. Unless otherwise noted, in this clause the term services
29   refers to the application layer services defined here.

30   The services enable the exchange of information about managed medical objects defined
31   in the DIM between two peer entities. In a communicating system, the services are
32   provided by the CMDISE. This name is chosen to make the functional similarity to CMISE
33   obvious, but at the same time leave the definition of a cost-/performance-improved service
34   model implementation to the interoperability work item instead of requiring a ISO/IEC
35   CMIP-conformant implementation.

36   Service calls shall be mapped to a protocol, the Common Medical Device Information
37   Protocol (CMDIP), the definition of which is outside the scope of this standard. The
38   CMDIP is defined in ISO/IEEE 11073-20101.

39   ISO/IEC CMIP (i.e., ISO/IEC 9596-1) is considered a valid protocol implementation of
40   the generalized object management services provided by the CMDISE defined in this
41   standard. Additional (e.g., cost and/or performance optimized) implementations are
42   explicitly not excluded and may be found in dependent standard(s).

                                                               171
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                           APPROVED DRAFT




                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                             IEEE P11073-10201/D2.1.109, September October 2018



 1   7.3.1 Conceptual architecture of communicating systems

 2   The conceptual architecture of communicating devices for which this standard provides
 3   class definitions is expressed in Figure 17. This figure shows how the services provided by
 4   CMDISE relate to class definitions defined in this standard and to applications using these
 5   class definitions.




 6
 7                    —Conceptual communicating systems architecture
 8

 9   The application processes shown in Figure 17 are service users; the CMDISE and the
10   ACSE are service providers.

11   This architectural model shows the following components that are used or referenced in
12   this standard:

13      A CMDISE, which provides the services defined in Clause 7 to application
14       processes. The services are mapped to messages defined by the CMDIP.
15      ACSE, which provides services to establish logical connections between MDSs.
16       ACSE and the corresponding protocol are defined in ISO/IEC 8649 and ISO/IEC
17       8650-1. It provides service primitives for the following:
18        Requesting and accepting an association
19        Releasing an association and accepting the release
20        Association abort in case of a failure
21      A standardized MDIB that contains managed medical object instances as defined in
22       this standard (i.e., in the DIM).
23      A standardized communication system (i.e., communication stack or profile,
24       defining Layer 1 to Layer 6 of the OSI reference model). In addition to basic
25       communication, this system may also provide services for synchronization between
26       multiple devices, fragmentation of large messages, flow control, etc.

                                                        172
                                     Copyright © 2018 IEEE. All rights reserved.
                          This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1   NOTE—The definition of association control and lower layer communication profiles is outside the scope of this
 2   standard. They are shown in Figure 17 for completeness only.

 3   The manager system may use CMDISE services to build and to maintain a local copy of
 4   the agent’s MDIB. As a conceptual illustration, Figure 17 shows a mirror of the agent’s
 5   MDIB in the manager system. Note that object manipulation is always carried out by agent
 6   application processes.

 7   An agent application populates and updates objects and attribute values in the agent MDIB.
 8   Applications running in the manager system may access the local copy of the MDIB in the
 9   manager for efficient data access (but services always act upon object instances in the
10   agent’s MDIB).

11   Objects in the MDIB can be remotely accessed only by using CMDISE services.
12   NOTE—Application access to the MDIB inside a specific system is a local implementation issue and is outside the scope
13   of this standard. The actual implementation of the MDIB is also a local implementation issue and, therefore, outside the
14   scope of this standard.

15   The following groups of services for the management of medical information are defined
16   in this standard:

17     1.   Operational services: This standard defines the following operational services on
18          managed medical objects:
19           1) Retrieve attribute value
20           2) Modify attribute value
21           3) Invoke instance methods
22           4) Create and delete object instances
23     2.   Notification services: This standard defines the following service that makes it
24          possible to convey event notifications between communicating systems:
25           1) Report asynchronous events that occurred within an object
26     3.   Services used by a manager system: The manager system (i.e., client) invokes
27          operational services to determine the agent (i.e., server) configuration, to retrieve
28          medical object attribute values (e.g., measurements), and to control the agent. The
29          manager system responds to notification services, if required, by providing an
30          acknowledgment.
31     4.   Services used by an agent system: The agent system invokes notification services to
32          report the occurrence of defined events. The agent system responds to operational
33          services by providing a result.
34     5.   Services used by a hybrid system: A hybrid system invokes both operational and
35          notification services as appropriate for a particular application. A hybrid system
36          responds to both operational and notification services.

37   7.4 General object management services definition

38   Communicating systems that comply with the definitions in this standard provide or make
39   use of the object management services defined in this subclause. The extent to which these

                                                               173
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



 1   services are used by any particular communicating system depends on its role and its scope.
 2   Classes defined in the DIM specify the extent to which object instances use these services
 3   and the extent to which they can be accessed (i.e., controlled) by these services.

 4   Service parameters defined in this subclause represent minimum requirements for
 5   communicating systems. In other words, an implementation of the service model may add
 6   extended functionality (e.g., authentication, access control, extended object selection) that
 7   requires additional parameters on top of the definitions in this standard. A protocol
 8   definition shall define the actual parameter data types and their usage in protocol messages.

 9   7.4.1 EVENT REPORT service

10   The EVENT REPORT service is used to report an event about a managed object instance.
11   The service may be used in confirmed mode or in unconfirmed mode. In confirmed mode,
12   an EVENT REPORT service call requires a response.

13       Example: An SpO2 monitor (i.e., an agent in a data logger application) may detect a
14       transducer failure. The application process uses the EVENT REPORT service provided
15       by the CMDISE to notify an associated manager of this technical alarm condition.

16   Unlike all other management services, the EVENT REPORT service, as a notification
17   service, is initiated by an agent application process; the manager application process is the
18   receiver and responder.

19   The EVENT REPORT service has the parameters in Table 111.

20                         Table 111 —EVENT REPORT service parameters
              Parameter                                               Description
       Invoke Identifier          Unique ID (e.g., a sequence number) assigned to a specific instance of the service so
                                  that it can be distinguished from other service invocations that a service provider
                                  may have in progress.
       Mode                       Confirmed or unconfirmed; confirmed mode requires a response.
       Object Class               Identifies class of the object that generates the event (with the values defined in
                                  nomenclature/dictionary).
       Object Instance            Identifies instance of the object that generates the event.
       Event Time                 Time the event was generated.
       Event Type                 Identifies the type of event (with the values defined in nomenclature/dictionary).
       Event Information          (Optional) Additional information about the event, as defined by the Event Type
                                  parameter. The Event Information parameter is defined by the object that generates
                                  the event.
21

22   The confirmed EVENT REPORT service returns a response that has the parameters in
23   Table 112.




                                                             174
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                    Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                     Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018



 1                 Table 112 —EVENT REPORT service result parameters
              Parameter                                                      Description
       Invoke Identifier              Returns the unique Invoke Identifier parameter of the EVENT REPORT service so
                                      that the response can be related to the request.
       Object Class                   Same value as in EVENT REPORT service (optional).
       Object Instance                Same value as in EVENT REPORT service (optional).
       Current Time                   (Optional).
       Event Type                     Same value as in EVENT REPORT service (optional).
       Event Reply Information        (Optional) Additional information, as defined by the Event Type parameter.
 2

 3   If the EVENT REPORT service call cannot be processed, an error is returned indicating
 4   the type of failure.
 5   NOTE— Error responses and error values are described in ISO/IEEE 11073-20101.

 6   7.4.2 GET service

 7   The GET service allows the retrieval of attribute data from managed object instances. The
 8   GET service is always used in confirmed mode. The GET service response contains the
 9   requested data (or an error notification).

10       Example: A data storage manager application may use the GET service to retrieve the
11       serial number and revision information from a connected measurement device.

12   A manager process invokes the GET service (i.e., sends a GET service request message)
13   to retrieve one, several, or all attributes of a selected managed object instance in an agent.
14   The GET service result returns a list containing the requested attribute values.

15   The GET service has the parameters in Table 113.

16

17                                 Table 113 —GET service parameters
              Parameter                                                      Description
       Invoke Identifier              Unique ID (e.g., a sequence number) assigned to a specific instance of the service.
       Object Class                   Identifies class of the object that contains the requested attributes (i.e., values defined
                                      in nomenclature/dictionary).
       Object Instance                Identifies instance of the object that contains the requested attributes.
       Attribute Identifier List      List of attribute IDs (i.e., values defined in nomenclature/dictionary) for which
                                      values are to be retrieved.
18

19   The GET service returns a response that has the parameters in Table 114.




                                                                 175
                                              Copyright © 2018 IEEE. All rights reserved.
                                   This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                           Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                            Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1                         Table 114 —GET service result parameters
              Parameter                                              Description
       Invoke Identifier        Returns the unique Invoke Identifier parameter of the GET service.
       Object Class             Same value as in GET service.
       Object Instance          Same value as in GET service.
       Attribute List           A list of attribute ID–attribute value pairs.
 2

 3   If the GET service call cannot be processed, an error is returned indicating the type of
 4   failure.

 5   7.4.3 SET service

 6   The SET service allows the modification of attribute data contained in managed object
 7   instances. The SET service may be used in confirmed mode or in unconfirmed mode. In
 8   confirmed mode, a SET service call requires a response.

 9       Example: A central computer may use the SET service to set the current date and time
10       in a device that has been newly connected to a networkvalue of the Scan-List attribute
11       of a CfgScanner object.

12   The manager process invokes the SET service (i.e., sends a SET service request message)
13   to modify one or several attributes of a selected object instance in an agent. For each
14   attribute that is to be modified, the request contains the attribute ID, a modify operator (to
15   select whether the attribute value should be replaced, added to a list, deleted from a list, or
16   set to a default value), and (optionally) the attribute value.

17   The SET service has the parameters in Table 115.

18                            Table 115 —SET service parameters
              Parameter                                              Description
       Invoke Identifier        Unique ID (e.g., a sequence number) assigned to a specific instance of the service.
       Mode                     Confirmed or unconfirmed.
       Object Class             Identifies class of the object that contains the attributes to be modified (i.e., values
                                defined in nomenclature/dictionary).
       Object Instance          Identifies instance of the object that contains the attributes to be modified.
       Modification List        List of (modify operator - attribute ID - attribute value) records. The modify operator
                                may be replace, addValues, removeValues, setToDefault.
19

20   The confirmed SET service returns a response that has the parameters in Table 116.




                                                           176
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                IEEE P11073-10201/D2.1.109, September October 2018



 1                         Table 116 —SET service result parameters
             Parameter                                                Description
      Invoke Identifier         Returns the unique Invoke Identifier parameter of the SET service.
      Object Class              Same value as in SET service.
      Object Instance           Same value as in SET service.
      Attribute List            A list of attribute ID–attribute value pairs (optional).
 2

 3   If the SET service call cannot be processed, an error is returned indicating the type of
 4   failure.

 5   7.4.4 ACTION service

 6   The ACTION service makes it possible to invoke a predefined method (i.e., procedure) of
 7   a managed medical object. The ACTION service may be used in confirmed mode or in
 8   unconfirmed mode. In confirmed mode, an ACTION service call requires a response.

 9      Example: A monitoring system may use the ACTION service to start a calibration
10      procedure on a measurement deviceA central computer may use the SetTime action
11      service to set the current date and time in a device that has been newly connected to a
12      network.

13   The definition of instance methods and the consequent object behavior are dependent on
14   the specification of the managed object, not on the ACTION service. The class
15   specification in the DIM defines all available instance methods that can be invoked by the
16   ACTION service, along with their specific parameter and result data types.

17   The ACTION service has the parameters in Table 117.

18                          Table 117 —ACTION service parameters
             Parameter                                                Description
      Invoke Identifier         Unique ID (e.g., a sequence number) assigned to a specific instance of the service.
      Mode                      Confirmed or unconfirmed.
      Object Class              Identifies class of the object that should execute the action (with the values defined in
                                nomenclature/dictionary).
      Object Instance           Identifies instance of the object that should execute the action.
      Action Type               Identifies the type of the action (with the values defined in nomenclature/dictionary).
      Action Information        Additional parameters for the action, as defined by the action type.
19

20   The confirmed ACTION service returns a response that has the parameters in Table 118.




                                                           177
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                   APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                     IEEE P11073-10201/D2.1.109, September October 2018



 1                         Table 118 —ACTION service result parameters
              Parameter                                                    Description
       Invoke Identifier             Returns the unique Invoke Identifier parameter of the ACTION service.
       Object Class                  Same value as in ACTION service.
       Object Instance               Same value as in ACTION service.
       Action Type                   Identifies the type of the action; same value as in ACTION service.
       Action Reply                  (Optional) Result of the action, as defined by the action type.
 2

 3   If the ACTION service call cannot be processed, an error is returned indicating the type of
 4   failure.
 5   7.4.5 CREATE service

 6   The CREATE service is used to create a new instance of a managed medical object.
 7   Attributes of the new object can be specified when using this service. The CREATE service
 8   is always used in confirmed mode and requires a response.

 9       Example: A data logger application may use the CREATE service to create an
10       extended service object (e.g., a Scanner object) in a monitoring measurement agent
11       (i.e., the agent system). This scanner processes all numerical measurement data and
12       sends a report (i.e., event report) to the charting application every minute.

13   The CREATE service does not permit the creation of instances of arbitrary objects in the
14   MDIB of the agent system. A system that complies with the definitions in this standard has
15   to specify which object classes can be dynamically created.

16   The CREATE service has the parameters in Table 119.

17                             Table 119 —CREATE service parameters
              Parameter                                                    Description
       Invoke Identifier             Unique ID (e.g., a sequence number) assigned to a specific instance of the service.
       Object Class                  Identifies class of the object that should be created (with the values defined in
                                     nomenclature/dictionary).
       Superior Object Class         Identifies class of the superior (with respect to containment hierarchy) object
                                     instance.
       Superior Object Instance      Identifies instance of the superior (with respect to containment hierarchy) object.
       Attribute List                A list of attribute ID–attribute value pairs (optional) to set the initial values of
                                     attributes.
18

19   The CREATE service returns a response that has the parameters in Table 120.




                                                                178
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                        Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                         Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



1                          Table 120 —CREATE service result parameters
              Parameter                                               Description
       Invoke Identifier          Returns the unique Invoke Identifier parameter of the CREATE service.
       Object Class               Same value as in CREATE service.
       Object Instance            Assigned by CMDISE according to object name binding.
 2

 3   If the CREATE service call cannot be processed, an error is returned indicating the type of
 4   failure.

 5   7.4.6 DELETE service

 6   The DELETE service is used to delete instances of managed objects. The delete service is
 7   always used in confirmed mode and requires a response.

 8       Example: When the data logger application from the previous example no longer needs
 9       the measurement data provided by the agent system, it uses the DELETE service to
10       delete the extended services object (i.e., the Scanner object instance).

11   The DELETE service does not permit the deletion of instances of arbitrary objects in the
12   MDIB of the agent system. A system that complies with the definitions in this standard has
13   to specify which object classes can be dynamically deleted.

14   The DELETE service has the parameters in Table 121.

15   The DELETE service returns a response that has the parameters in Table 122.

16   If the DELETE service call cannot be processed, an error is returned indicating the type of
17   failure.

18                            Table 121 —DELETE service parameters
              Parameter                                               Description
       Invoke Identifier          Unique ID (e.g., a sequence number) assigned to a specific instance of the service.
       Object Class               Identifies class of the object that should be deleted (with the values defined in
                                  nomenclature/dictionary).
       Object Instance            Identifies instance of the object that should be deleted.
19

20                         Table 122 —DELETE service result parameters
              Parameter                                               Description
       Invoke Identifier          Returns the unique Invoke Identifier parameter of the DELETE service.
       Object Class               Same value as in DELETE service.
       Object Instance            Same value as in DELETE service.
21



                                                             179
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                            APPROVED DRAFT




                                                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
                              IEEE P11073-10201/D2.1.109, September October 2018



 1   8. MDIB nomenclature

 2   The set of objects occurring in any device of the communicating system as described in the
 3   DIM forms the MDIB. Each instantiation of a class defined in the DIM needs a unique
 4   identification. The total set of terms forms the MDIB nomenclature or the data dictionary.
 5   Because a large number of instantiations exist, a structured identification scheme, i.e., a
 6   nomenclature, is necessary. The nomenclature for the MDIB comprises several thousand
 7   terms concerning the object-oriented modeling elements, demographic patient data, device
 8   descriptions, measurement values, measurement methods, measurement locations, alarm
 9   information, etc. It is open for extensions due to progress in medicine and technology
10   without the need to change structures and terms within an established set of terms.

11   The nomenclature also supports the development of a dictionary that is language
12   independent with a coding scheme for easy and fast computer access.

13   The MDIB nomenclature(i.e., data dictionary) is presented in ISO/IEEE 11073-10101. It
14   contains the terms (i.e., systematic names), descriptions, and codes for the following target
15   categories:

16      Object-oriented modeling elements resulting from the DIM
17      Medical devices and device systems
18      Units of measurements
19      Metrics (measurements and enumerations)
20      Body sites (i.e., specifications for measurement locations)
21      Alerts
22      External nomenclatures
23   Each of the respective clauses starts with a detailed description on how to build the
24   systematic name for the target category concerned.

25   9. Conformance model

26   9.1 Applicability

27   It is expected that this standard will be used together with other base standards or
28   referenced by other standards in the ISO/IEEE 11073 family of standards to define
29   applications (e.g., for the exchange of vital signs measurement databases) or to define
30   functional communication profiles (e.g., medical device interoperability profiles).

31   Such additional specifications or standards are necessary to fully enable an implementation
32   or a system using this standard.

33   It is possible for an implementation or a system to conform to the following element of this
34   standard, which contains concrete definitions:



                                                         180
                                      Copyright © 2018 IEEE. All rights reserved.
                           This is an unapproved IEEE Standards Draft, subject to change.
                                    APPROVED DRAFT




                                                                                                                                      Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                       Copyrighted and Authorized by IEEE. Restrictions Apply.
                                      IEEE P11073-10201/D2.1.109, September October 2018




 1      DIM class hierarchy and class definitions (i.e., attributes, notifications, methods, and
 2          data type definitions).
 3   However, conformance to this element alone does not provide interoperability of
 4   applications or medical devices.

 5   Standards for specific applications or functional communication profiles are expected to
 6   define an appropriate conformance model that includes specific conformance requirements
 7   for this standard on vital signs representation. They also need to define additional
 8   conformance criteria for semantic and dynamic behavior of the implementation, which are
 9   out of the scope of this standard.

10   Conformance to definitions of this standard is specified at the appropriate application
11   interface or system interface only. Only the behavior at this interface is considered for
12   conformance. Implementation details that cannot be perceived externally are not subject to
13   conformance specification.

14        Example: A communicating medical device uses the classes and type definitions as
15        defined in this standard to distribute data to other devices. It may be compliant to this
16        standard, even if it does not use any object-oriented implementation internally.

17   9.2 Conformance specification

18   This standard on vital signs representation offers a high degree of flexibility in how the
19   model is applied for a certain medical device, particularly in the following areas:

20      Information model of a specific device
21      Use of attributes, value ranges, and access
22      Use of extended communication services (i.e., scanners), scan periods, and scanner
23          configurability
24   To support interoperability of applications and systems, an implementation based on this
25   standard shall provide specific details about the way that the definitions of this standard
26   are applied.

27   These specifications have to be provided in form of a set of implementation conformance
28   statements (ICSs). An ICS is a form of data sheet that discloses details of a specific
29   implementation and specifies which features are provided. Specific applications or
30   functional communication profiles that are based on this standard shall define more specific
31   conformance requirements in addition to or as a replacement of the ICS defined here.
32   NOTE— The ICSs defined in 9.3 provide understanding of the details of an implementation. However, they are not
33   sufficient to provide interoperability of devices or applications. For such interoperability, additional specifications (e.g.,
34   timing, latencies, system loading assumptions) shall be taken into account. These specifications are not within the scope
35   of this standard.




                                                                181
                                             Copyright © 2018 IEEE. All rights reserved.
                                  This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                          Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                           Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



 1   9.3 ICSs

 2   9.3.1 General format

 3   The ICSs have to be supplied in the form of tables. Templates for these ICS tables are given
 4   in 9.3.2 through 9.3.7 The tables have to be filled out and provided as an overall
 5   conformance statement document.

 6   Generally the column headers of an ICS table contain the following information:

 7      Index, which is an identifier (e.g., a number) of a specific feature.
 8      Feature, which briefly describes the characteristic for which a conformance
 9          statement must be made.
10      Reference, which is a reference to the definition of the feature (may be empty).
11      Status, which specifies the conformance requirement (i.e., the requirements for a
12          conforming implementation regarding the feature). In some cases, this standard does
13          not specify conformance requirements, but still wants a definition of the status of a
14          particular feature.
15      Support, which is filled out by the implementer and specifies the characteristics of
16          the feature in the implementation.
17      Comment, which contains additional information provided by the implementer.
18   The value of the Status and Support columns are permitted to range from simple to complex
19   entries. Examples of simple values are as follows:

20    m         mandatory
21    o         optional
22    x         prohibited
23    c         conditional
24    n/a       not applicable

25   More complex expressions or specific lists of items are defined in the specific ICS table.

26   9.3.2 General ICS

27   In a top-level General ICS, the implementer specifies the versions/revisions that are
28   supported by the implementation as well as some high-level system behavior definitions.

29   Table 123 shows the General ICS.

30                                       Table 123 —General ICS
       Index        Feature             Reference               Status                Support   Comment
      GEN-1      Implementation     —                  Identification of the
                 Description                           device/application.
                                                       Description of
                                                       functionality.




                                                            182
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                          APPROVED DRAFT




                                                                                                                  Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                   Copyrighted and Authorized by IEEE. Restrictions Apply.
                          IEEE P11073-10201/D2.1.109, September October 2018



 Index       Feature           Reference                  Status                Support         Comment
GEN-2    Standard            (Standard          (Set of existing            (Set of
         Document            documents)         revisions)                  supported
         Revision                                                           revision)
GEN-3    Conformance         —                  Provides information        (Set of
         Deviation                              about possible deviations   deviations)
                                                from the DIM (e.g.,
                                                nonstandard attributes,
                                                objects)
GEN-4    Object              5.2                Provides object
         Containment                            containment diagram
         Tree                                   showing relations
                                                between object instances
                                                used by the application.
                                                A conforming
                                                implementation uses
                                                object relations only as
                                                defined in the DIM.
GEN-5    Nomenclature        (Standard          (Set of existing            (Set of
         Revision            documents)         revisions)                  supported
                                                                            revision)
GEN-6    Use of other        —                  Are nomenclature codes      Yes/No (If yes:   Note that the
         Nomenclature                           from other standard         list of other     use of other
         Schemes                                coding schemes used in      nomenclatures)    nomenclatures
                                                the implementation?                           severely
                                                                                              impacts
                                                                                              interoperability.
GEN-7    Data Structure      —                  —                           Description of
         Encoding                                                           encoding
                                                                            method for
                                                                            ASN.1 data
                                                                            structures
GEN-8    Dynamic Object      —                  Is the set of object        Static/Dynamic
         Instances                              instances at run-time
                                                static or dynamic?
GEN-9    Use of Private      —                  Does the implementation     Yes/No [If yes:
         Objects                                use objects that are not    explain in DIM
                                                defined in the DIM?         MOC ICS (see
                                                                            9.3.4)]
GEN-10   Use of Private      —                  Does the implementation     Yes/No (If yes:
         Nomenclature                           use private extensions to   explain in the
         Extensions                             the nomenclature?           appropriate
                                                Private nomenclature        ICS)
                                                extensions are allowed
                                                only if the standard
                                                nomenclature does not
                                                include the specific
                                                terms required by the
                                                application.
GEN-11   Communication       —                  Description of
         Profile and                            communication profile
         Hardware                               and hardware
                                                requirements for
                                                interfacing (only
                                                applicable for
                                                communicating devices).




                                                     183
                                  Copyright © 2018 IEEE. All rights reserved.
                       This is an unapproved IEEE Standards Draft, subject to change.
                                APPROVED DRAFT




                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                   IEEE P11073-10201/D2.1.109, September October 2018



       Index         Feature             Reference                Status                Support       Comment
      GEN-12     File Format and     —                  Description of file
                 Storage Media                          formats used for
                                                        archiving vital signs
                                                        data; definition of
                                                        supported storage media
                                                        (only applicable for
                                                        archival applications).
      GEN-13     ACSE                ISO/IEC 8649       Use of ACSE protocol        Specify use of
                                     ISO/IEC 8650-      (only applicable for        optional fields
                                     1                  communicating               in ACSE
                                                        systems).                   protocol data
                                                                                    units (PDUs).
 1

 2   For each implementation, one General ICS shall be provided.
 3   9.3.3 Service Support ICS

 4   The Service Support ICS defines which services that are defined in the service model are
 5   implemented. This ICS needs only be supplied for communicating devices.

 6   Table 124 shows the Service Support ICS.

7                                  Table 124 —Service Support ICS
        Index        Feature             Reference               Status                 Support       Comment
      SRV-1      GET Service         7.4.2              o
      SRV-2      SET Service         7.4.3              o
      SRV-3      Confirmed SET       7.4.3              o
                 Service
      SRV-4      EVENT               7.4.1              m
                 REPORT
                 Service
      SRV-5      Confirmed           7.4.1              o
                 EVENT
                 REPORT
                 Service
      SRV-6      ACTION              7.4.4              o
                 Service
      SRV-7      Confirmed           7.4.4              o
                 ACTION
                 Service
      SRV-8      Create Service      7.4.5              o
      SRV-9      Delete Service      7.4.6              o
 8

 9   The Support column of the completed table should define if the implementation invokes
10   the service (e.g., sends a GET PDU), provides the service (e.g., processes a received GET
11   PDU), or does not implement the service at all.

12   In addition, specific restrictions should be listed (e.g., if a specific service is restricted to
13   objects of only one class).
                                                             184
                                          Copyright © 2018 IEEE. All rights reserved.
                               This is an unapproved IEEE Standards Draft, subject to change.
                               APPROVED DRAFT




                                                                                                                 Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                  Copyrighted and Authorized by IEEE. Restrictions Apply.
                                 IEEE P11073-10201/D2.1.109, September October 2018



 1   9.3.4 DIM managed object class (MOC) ICS

 2   The DIM MOC ICS defines which managed medical objects (not base classes) are used by
 3   the implementation. Table 125 is a template only. For each object supported by the
 4   implementation, one row shall be filled out.

 5                           Table 125 —Template for DIM MOC ICS
       Index       Feature           Reference                Status                  Support          Comment
      MOC-      Object Name        Reference to      Implemented                 Specify
      [1-n]     and OID            the clause in                                 restrictions, e.g.,
                                   this standard                                 maximum number
                                   where the                                     of supported
                                   object is                                     instances
                                   defined                                       CREATE/DELETE
                                                                                 services are
                                                                                 supported.
 6

 7   If the implementation uses private objects, these objects should also be specified in the
 8   DIM MOC ICS. A separate definition should be appended to the conformance statement
 9   that can be referenced in the Reference column.

10   The Support column should indicate specific restrictions about the object implementation.
11   In particular, it shall indicate whether object instances can be dynamically created/deleted
12   using the CREATE/DELETE service.

13   In addition to the DIM MOC ICS, an object containment diagram (i.e., class instance
14   diagram) should be provided that allows reviewing the class hierarchy used by the
15   implementation.

16   9.3.5 MOC Attribute ICS

17   For each supported object as defined in the DIM MOC ICS, a MOC Attribute ICS has to
18   be provided that defines which attributes are used/supported by the implementation,
19   including any inherited attributes. Table 126 is a template only.

20                     Table 126 —Template for MOC Attribute ICS
        Index      Feature            Reference                 Status                 Support         Comment
      ATTR-     Attribute Name      Reference to       m/o/c (see 6.1.2 for an     Access (i.e.,
      x-n       and Attribute       the clause in      explanation of these        GET, GET-
                ID                  this standard      abbreviations)              GRP, SET,
                                    where the                                      SCAN, SCAN-
                                    object is                                      GRP, ER,
                                    defined                                        CRER; see third
                                                                                   paragraph after
                                                                                   this table) Value
                                                                                   ranges
                                                                                   Additional
                                                                                   restrictions
                                                                                   Static/dynamic
                                                                                   value


                                                            185
                                         Copyright © 2018 IEEE. All rights reserved.
                              This is an unapproved IEEE Standards Draft, subject to change.
                                  APPROVED DRAFT




                                                                                                                            Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                             Copyrighted and Authorized by IEEE. Restrictions Apply.
                                    IEEE P11073-10201/D2.1.109, September October 2018



 1

 2   The x in the Index column is the ID of the managed object for which the table is supplied
 3   (i.e., the index of the managed object as specified in the DIM MOC ICS). There is one
 4   separate table for each supported managed object.

 5   The n in the Index column is just a serial number (1..m).

 6   The attribute access specification fields in the Support column have to be specified if the
 7   implementation provides access services for attributes. (In other words, the fields are not
 8   needed for a plain storage format.) The fields have the following meanings:

 9     GET      Attribute can be individually accessed by the GET service.
10     GET-GRP  Attribute can be accessed by the GET service as part of an attribute group.
11     SET      Attribute can be individually modified by the SET service.
12     SCAN     Attribute can be individually accessed by a Scanner object (individual scan
13              list entry).
14     SCAN-GRP Attribute can be accessed by a Scanner object (attribute group scan list
15              entry).
16     ER       Attribute changes are communicated by event reports from the container
17              object itself.
18     CR-ER    Attribute value is provided within the notification that announces the
19              availability of the container object (object create notification).

20   The Support column should also contain attribute value ranges (if applicable), hints about
21   specific restrictions for attribute access or attribute availability and information, and an
22   indication if the attribute value is static or dynamic in the implementation.
23   NOTE— The attribute definition tables in this standard define a minimum mandatory set of attributes for each object.

24   9.3.6 MOC Behavior ICS

25   The MOC Behavior ICS specifies all implemented instance methods that can be invoked
26   by the ACTION service. Table 127 is a template only. One table has to be provided for
27   each object that supports special methods.

28                         Table 127 —Template for MOC Behavior ICS
        Index           Feature             Reference              Status               Support             Comment
      ACT-          Method Name        Reference to the                           Specific restrictions
      x-n           and Method ID      clause in this
                                       standard where the
                                       instance method is
                                       defined
29

30   The x in the Index column is the ID of the managed object for which the table is supplied
31   (i.e., the index of the managed object as specified in the DIM MOC ICS). There is one
32   separate table for each managed object that supports specific instance methods (i.e.,
33   actions).
                                                               186
                                            Copyright © 2018 IEEE. All rights reserved.
                                 This is an unapproved IEEE Standards Draft, subject to change.
                              APPROVED DRAFT




                                                                                                                Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                 Copyrighted and Authorized by IEEE. Restrictions Apply.
                                  IEEE P11073-10201/D2.1.109, September October 2018



 1   The n in the Index column is just a serial number (1..m).

 2   The Support column should specify any restrictions for the method.

 3   9.3.7 MOC Notification ICS

 4   The MOC Notification ICS specifies all implemented notifications (typically in form of
 5   the EVENT REPORT service) that are emitted by supported objects. Table 128 is a
 6   template only. One table has to be provided for each object that supports special object
 7   notifications.

 8                   Table 128 —Template for MOC Notification ICS
        Index      Feature               Reference             Status               Support           Comment
      NOTI-     Notification        Reference to the                          Specific restrictions
      x-n       Name and            clause in this
                Notification ID     standard where the
                                    event is defined
 9

10   The x in the Index column is the ID of the managed object for which the table is supplied
11   (i.e., the index of the managed object as specified in the DIM MOC ICS). There is one
12   separate table for each managed object that supports specific object notifications (i.e.,
13   events).

14   The n in the Index column is just a serial number (1..m).

15   The Support column should specify any restrictions for the notification.




                                                           187
                                        Copyright © 2018 IEEE. All rights reserved.
                             This is an unapproved IEEE Standards Draft, subject to change.
                                     APPROVED DRAFT




                                                                                                                                             Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                                                              Copyrighted and Authorized by IEEE. Restrictions Apply.
                                        IEEE P11073-10201/D2.1.109, September October 2018



 1   Annex A (informative) Bibliography


 2   Bibliographical references are resources that provide additional or helpful material but do
 3   not need to be understood or used to implement this guide. Reference to these resources is
 4   made for informational use only. To aid the reader, notes in parentheses have been added
 5   to indicate where bibliographical references are mentioned in this guide.

6    [B1] CEN EN 1064, Medical informatics — Standard communication protocol —
7    computer-assisted electrocardiography. 8
 8   [B2] FDA Unique Device Identification System, A Rule by the Food and Drug
 9   Administration,            accessed            September           17,        2018,
10   https://www.federalregister.gov/articles/2013/09/24/2013-23059/unique-device-
11   identification-system
12   [B3] IETF RFC 1155, Structure and Identification of Management Information for
13   TCP/IP-Based Internets. 9
14   [B4] Integrating the Healthcare Enterprise. IHE Patient Care Device (PCD) technical
15   framework (volume 1, revision 7.0), accessed September 17, 2018,
16   https://www.ihe.net/Technical_Frameworks/#pcd
17   [B5] ISO 639-1, Code for the representation of names of languages — Part 1: Alpha-2
18   code. 10
19   [B6] ISO 639-2, Codes for the representation of names of languages — Part 2: Alpha-3
20   code.
21   [B7] ISO/IEC 646, Information technology — ISO 7-bit coded character set for
22   information interchange.
23   [B8] ISO 3166-1, Codes for the representation of names of countries and their subdivisions
24   — Part 1: Country codes.
25   [B9] ISO 3166-2, Codes for the representation of names of countries and their subdivisions
26   — Part 2: Country subdivision code.
27   [B10]         ISO 3166-3, Codes for the representation of names of countries and their
28   subdivisions — Part 3: Code for formerly used names of countries.
29   [B11]        ISO 8601, Data elements and interchange formats — Information
30   interchange — Representation of dates and times.
31   [B12]        ISO 12052, Health informatics -- Digital imaging and communication in
32   medicine (DICOM) including workflow and data management.



     8
        CEN publications are available from the European Committee for Standardization (CEN), 36, rue de Stassart, B-1050 Brussels,
     Belgium (http://www.cenorm.be).
     9
       Internet requests for comment (RFCs) are available from the Internet Engineering Task Force at http://www.ietf.org/.
     10
         ISO publications are available from the ISO Central Secretariat, Case Postale 56, 1 rue de Varembé, CH-1211, Genève 20,
     Switzerland/Suisse (http://www.iso.ch/). ISO publications are also available in the United States from the Sales Department, American
     National Standards Institute, 25 West 43rd Street, 4th Floor, New York, NY 10036, USA (http://www.ansi.org/).

                                                                  188
                                               Copyright © 2018 IEEE. All rights reserved.
                                    This is an unapproved IEEE Standards Draft, subject to change.
                          APPROVED DRAFT




                                                                                               Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                Copyrighted and Authorized by IEEE. Restrictions Apply.
                            IEEE P11073-10201/D2.1.109, September October 2018



 1   [B13]         ISO 15225, Nomenclature — Specification for a nomenclature system for
 2   medical devices for the purpose of regulatory data exchange.
 3   [B14]          ISO/IEC 2022, Information technology — Character code structure and
 4   extension techniques.
 5   [B15]        ISO/IEC 5218, Information technology — Codes for the representation of
 6   human sexes.
 7   [B16]         ISO/IEC 7498-1, Information technology — Open systems interconnection
 8   — Basic reference model — Part 1: The basic model.
 9   [B17]          ISO/IEC 7498-2, Information processing systems — Open systems
10   interconnection — Basic reference model — Part 2: Security architecture.
11   [B18]          ISO/IEC 7498-3, Information processing systems — Open systems
12   interconnection — Basic reference model — Part 3: Naming and addressing.
13   [B19]          ISO/IEC 7498-4, Information processing systems — Open systems
14   interconnection — Basic reference model — Part 4: Management framework.
15   [B20]          ISO/IEC 8649, Information processing systems — Open systems
16   interconnection — Service definition for the Association Control Service Element.
17   [B21]       ISO/IEC 8650-1, Information technology — Open systems interconnection
18   — Connection-Oriented Protocol for the Association Control Service Element — Part 1:
19   Protocol.
20   [B22]        ISO/IEC 8650-2, Information technology — Open systems interconnection
21   — Protocol Specification for Association Control Service Element — Part 2: Protocol
22   Implementation Conformance Statements (PICS) proforma.
23   [B23]       ISO/IEC 8824-2, Information technology — Abstract Syntax Notation One
24   (ASN.1) — Part 2: Information object specification.
25   [B24]          ISO/IEC 8859-n, Information processing — 8-bit single-byte coded graphic
26   character sets — Part 1 to Part 15: Various alphabets.
27   [B25]        ISO/IEC 9545, Information technology — Open systems interconnection
28   — Application layer structure.
29   [B26]     ISO/IEC 9595, Information technology — Open systems interconnection
30   — Common management information service definition.
31   [B27]     ISO/IEC 9596-1, Information technology — Open systems interconnection
32   — Common Management Information Protocol — Part 1: Specification.
33   [B28]       ISO/IEC 10040, Information technology — Open systems interconnection
34   — Systems management overview.
35   [B29]          ISO/IEC 10164-1, Information technology — Open systems
36   interconnection — Systems management — Part 1: Object management function.
37   [B30]          ISO/IEC 10164-2, Information technology — Open systems
38   interconnection — Systems management — Part 2: State management function.


                                                       189
                                    Copyright © 2018 IEEE. All rights reserved.
                         This is an unapproved IEEE Standards Draft, subject to change.
                         APPROVED DRAFT




                                                                                                   Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                                                    Copyrighted and Authorized by IEEE. Restrictions Apply.
                           IEEE P11073-10201/D2.1.109, September October 2018



 1   [B31]          ISO/IEC 10164-3, Information technology — Open systems
 2   interconnection — System management — Part 3: Attributes for representing
 3   relationships.
 4   [B32]          ISO/IEC 10164-4, Information technology — Open                       systems
 5   interconnection — Systems management — Part 4: Alarm reporting function.
 6   [B33]          ISO/IEC 10164-5, Information technology — Open systems
 7   interconnection — Systems management — Part 5: Event management function.
 8   [B34]          ISO/IEC 10164-6, Information technology — Open                       systems
 9   interconnection — Systems management — Part 6: Log control function.
10   [B35]          ISO/IEC 10164-7, Information technology — Open systems
11   interconnection — Systems management — Part 7: Security alarm reporting function.
12   [B36]          ISO/IEC 10164-8, Information technology — Open systems
13   interconnection — Systems management — Part 8: Security audit trail function.
14   [B37]          ISO/IEC 10164-9, Information technology — Open systems
15   interconnection — Systems management — Part 9: Objects and attributes for access
16   control.
17   [B38]          ISO/IEC 10164-10, Information technology — Open systems
18   interconnection — Systems management — Part 10: Usage metering function for
19   accounting purposes.
20   [B39]          ISO/IEC 10164-11, Information technology — Open systems
21   interconnection — Systems management — Part 11: Metric objects and attributes.
22   [B40]          ISO/IEC 10164-12, Information technology — Open systems
23   interconnection — Systems management — Part 12: Test management function.
24   [B41]          ISO/IEC 10164-13, Information technology — Open                      systems
25   interconnection — Systems management — Part 13: Summarization function.
26   [B42]          ISO/IEC 10164-14, Information technology — Open systems
27   interconnection — Systems management — Part 14: Confidence and diagnostic test
28   categories.
29   [B43]          ISO/IEC 10165-1, Information technology — Open systems
30   interconnection — Structure of management information — Part 1: Management
31   information model.
32   [B44]          ISO/IEC 10165-2, Information technology — Open systems
33   interconnection — Structure of management information — Part 2: Definition of
34   management information.
35   [B45]         ISO/IEC 10646-1, Information technology — Universal multiple-octet
36   coded character set (UCS) — Part 1: Architecture and basic multilingual plane.
37   [B46]        ISO/IEEE 11073-20601, Health informatics — Personal health device
38   communication — Part 20601: Application profile — Optimized Exchange Protocol
39

                                                      190
                                   Copyright © 2018 IEEE. All rights reserved.
                        This is an unapproved IEEE Standards Draft, subject to change.
     APPROVED DRAFT




                                                                     Copyrighted material licensed to Naveed Pasha on 2019-02-25 for licensee's use only.
                                                                      Copyrighted and Authorized by IEEE. Restrictions Apply.
       IEEE P11073-10201/D2.1.109, September October 2018



1

2

3




                                  191
               Copyright © 2018 IEEE. All rights reserved.
    This is an unapproved IEEE Standards Draft, subject to change.
